// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/




import {
  merge,
  quoteSQLName,
  unquoteSQLName,
  parseSQLStringLiteral,
  intoSQLIdentifier,
  parseEscapedStringBody,
  isIdentifier,
  quote,
  escapeVegaField,
  TableBuilder,
  modulePathNameToSQLName,
} from "../src/parser-utils.js";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$DefaultTracer() {
  this.indentLevel = 0;
}

peg$DefaultTracer.prototype.trace = function(event) {
  var that = this;

  function log(event) {
    function repeat(string, n) {
       var result = "", i;

       for (i = 0; i < n; i++) {
         result += string;
       }

       return result;
    }

    function pad(string, length) {
      return string + repeat(" ", length - string.length);
    }

    if (typeof console === "object") {
      console.log(
        event.location.start.line + ":" + event.location.start.column + "-"
          + event.location.end.line + ":" + event.location.end.column + " "
          + pad(event.type, 10) + " "
          + repeat("  ", that.indentLevel) + event.rule
      );
    }
  }

  switch (event.type) {
    case "rule.enter":
      log(event);
      this.indentLevel++;
      break;

    case "rule.match":
      this.indentLevel--;
      log(event);
      break;

    case "rule.fail":
      this.indentLevel--;
      log(event);
      break;

    default:
      throw new Error("Invalid event type: " + event.type + ".");
  }
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart, cli_readline: peg$parsecli_readline, script: peg$parsescript };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = ";;";
  var peg$c1 = ".";
  var peg$c2 = "'";
  var peg$c3 = "\"";
  var peg$c4 = "\\";
  var peg$c5 = "explain";
  var peg$c6 = "query";
  var peg$c7 = "plan";
  var peg$c8 = "if";
  var peg$c9 = "(";
  var peg$c10 = ")";
  var peg$c11 = "then";
  var peg$c12 = "else";
  var peg$c13 = "for";
  var peg$c14 = "of";
  var peg$c15 = "while";
  var peg$c16 = "each";
  var peg$c17 = "parallel";
  var peg$c18 = ",";
  var peg$c19 = "=";
  var peg$c20 = "@";
  var peg$c21 = "do";
  var peg$c22 = "set";
  var peg$c23 = "format";
  var peg$c24 = "output";
  var peg$c25 = "dense";
  var peg$c26 = "sparse";
  var peg$c27 = "array";
  var peg$c28 = "object";
  var peg$c29 = "ndjson";
  var peg$c30 = "raw";
  var peg$c31 = "csv";
  var peg$c32 = "with";
  var peg$c33 = "header";
  var peg$c34 = "no";
  var peg$c35 = "delimiter";
  var peg$c36 = "quote";
  var peg$c37 = "escape";
  var peg$c38 = "encoding";
  var peg$c39 = "omit";
  var peg$c40 = "null";
  var peg$c41 = "to";
  var peg$c42 = "stdout";
  var peg$c43 = "stderr";
  var peg$c44 = "file";
  var peg$c45 = "vega";
  var peg$c46 = "lite";
  var peg$c47 = "spec";
  var peg$c48 = "svg";
  var peg$c49 = "png";
  var peg$c50 = "inline";
  var peg$c51 = "image";
  var peg$c52 = "mark";
  var peg$c53 = "{";
  var peg$c54 = "}";
  var peg$c55 = "repeat";
  var peg$c56 = "columns";
  var peg$c57 = "layer";
  var peg$c58 = "hconcat";
  var peg$c59 = "vconcat";
  var peg$c60 = "concat";
  var peg$c61 = ";";
  var peg$c62 = "facet";
  var peg$c63 = "row";
  var peg$c64 = "column";
  var peg$c65 = ":";
  var peg$c66 = "resolve";
  var peg$c67 = "scale";
  var peg$c68 = "axis";
  var peg$c69 = "legend";
  var peg$c70 = "independent";
  var peg$c71 = "shared";
  var peg$c72 = "options";
  var peg$c73 = "quantitative";
  var peg$c74 = "q";
  var peg$c75 = "nominal";
  var peg$c76 = "n";
  var peg$c77 = "ordinal";
  var peg$c78 = "o";
  var peg$c79 = "temporal";
  var peg$c80 = "t";
  var peg$c81 = "geojson";
  var peg$c82 = "g";
  var peg$c83 = "binned";
  var peg$c84 = "utc";
  var peg$c85 = "year";
  var peg$c86 = "quarter";
  var peg$c87 = "month";
  var peg$c88 = "date";
  var peg$c89 = "week";
  var peg$c90 = "dayofyear";
  var peg$c91 = "day";
  var peg$c92 = "hours";
  var peg$c93 = "minutes";
  var peg$c94 = "seconds";
  var peg$c95 = "milliseconds";
  var peg$c96 = "sort";
  var peg$c97 = "channel";
  var peg$c98 = "chan";
  var peg$c99 = "asc";
  var peg$c100 = "desc";
  var peg$c101 = "[";
  var peg$c102 = "]";
  var peg$c103 = "nosort";
  var peg$c104 = "bin";
  var peg$c105 = "count";
  var peg$c106 = "*";
  var peg$c107 = "datum";
  var peg$c108 = "value";
  var peg$c109 = "transform";
  var peg$c110 = "=>";
  var peg$c111 = "apply";
  var peg$c112 = "or";
  var peg$c113 = "and";
  var peg$c114 = "not";
  var peg$c115 = "valid";
  var peg$c116 = "in";
  var peg$c117 = "between";
  var peg$c118 = "<>";
  var peg$c119 = "!=";
  var peg$c120 = "<=";
  var peg$c121 = ">=";
  var peg$c122 = "<";
  var peg$c123 = ">";
  var peg$c124 = "==";
  var peg$c125 = ">>>";
  var peg$c126 = ">>";
  var peg$c127 = "||";
  var peg$c128 = "--";
  var peg$c129 = "++";
  var peg$c130 = "event";
  var peg$c131 = "NaN";
  var peg$c132 = "E";
  var peg$c133 = "LN2";
  var peg$c134 = "LN10";
  var peg$c135 = "LOG2E";
  var peg$c136 = "MAX_VALUE";
  var peg$c137 = "MIN_VALUE";
  var peg$c138 = "PI";
  var peg$c139 = "SQRT1_2";
  var peg$c140 = "SQRT2";
  var peg$c141 = "projection";
  var peg$c142 = "begin";
  var peg$c143 = "deferred";
  var peg$c144 = "immediate";
  var peg$c145 = "exclusive";
  var peg$c146 = "commit";
  var peg$c147 = "savepoint";
  var peg$c148 = "release";
  var peg$c149 = "rollback";
  var peg$c150 = "analyze";
  var peg$c151 = "load";
  var peg$c152 = "module";
  var peg$c153 = "as";
  var peg$c154 = "::";
  var peg$c155 = "table";
  var peg$c156 = "exists";
  var peg$c157 = "from";
  var peg$c158 = "comment";
  var peg$c159 = "relax";
  var peg$c160 = "less";
  var peg$c161 = "more";
  var peg$c162 = "sniff";
  var peg$c163 = "size";
  var peg$c164 = "skip";
  var peg$c165 = "empty";
  var peg$c166 = "lines";
  var peg$c167 = "trim";
  var peg$c168 = "cast";
  var peg$c169 = "create";
  var peg$c170 = "function";
  var peg$c171 = "language";
  var peg$c172 = "returns";
  var peg$c173 = "json";
  var peg$c174 = "primary";
  var peg$c175 = "key";
  var peg$c176 = "unique";
  var peg$c177 = "check";
  var peg$c178 = "foreign";
  var peg$c179 = "constraint";
  var peg$c180 = "auto";
  var peg$c181 = "increment";
  var peg$c182 = "default";
  var peg$c183 = "collate";
  var peg$c184 = "stored";
  var peg$c185 = "virtual";
  var peg$c186 = "current_timestamp";
  var peg$c187 = "current_time";
  var peg$c188 = "current_date";
  var peg$c189 = "on";
  var peg$c190 = "conflict";
  var peg$c191 = "abort";
  var peg$c192 = "fail";
  var peg$c193 = "ignore";
  var peg$c194 = "replace";
  var peg$c195 = "attach";
  var peg$c196 = "detach";
  var peg$c197 = "temporary";
  var peg$c198 = "view";
  var peg$c199 = "index";
  var peg$c200 = "using";
  var peg$c201 = "trigger";
  var peg$c202 = "before";
  var peg$c203 = "after";
  var peg$c204 = "instead";
  var peg$c205 = "delete";
  var peg$c206 = "insert";
  var peg$c207 = "update";
  var peg$c208 = "when";
  var peg$c209 = "recursive";
  var peg$c210 = "strict";
  var peg$c211 = "without";
  var peg$c212 = "rowid";
  var peg$c213 = "alter";
  var peg$c214 = "rename";
  var peg$c215 = "add";
  var peg$c216 = "drop";
  var peg$c217 = "into";
  var peg$c218 = "<-";
  var peg$c219 = "where";
  var peg$c220 = "nothing";
  var peg$c221 = "+=";
  var peg$c222 = "-=";
  var peg$c223 = "*=";
  var peg$c224 = "/=";
  var peg$c225 = "%=";
  var peg$c226 = "&=";
  var peg$c227 = "|=";
  var peg$c228 = "^=";
  var peg$c229 = "<<=";
  var peg$c230 = ">>=";
  var peg$c231 = "||=";
  var peg$c232 = "??=";
  var peg$c233 = "truncate";
  var peg$c234 = "vacuum";
  var peg$c235 = "pragma";
  var peg$c236 = "returning";
  var peg$c237 = "''";
  var peg$c238 = "reindex";
  var peg$c239 = "window";
  var peg$c240 = "except";
  var peg$c241 = "intersect";
  var peg$c242 = "distinct";
  var peg$c243 = "order";
  var peg$c244 = "by";
  var peg$c245 = "limit";
  var peg$c246 = "offset";
  var peg$c247 = "select";
  var peg$c248 = "values";
  var peg$c249 = "group";
  var peg$c250 = "join";
  var peg$c251 = "natural";
  var peg$c252 = "-:";
  var peg$c253 = ":>";
  var peg$c254 = "left";
  var peg$c255 = "right";
  var peg$c256 = "full";
  var peg$c257 = "inner";
  var peg$c258 = "cross";
  var peg$c259 = "lateral";
  var peg$c260 = "<<";
  var peg$c261 = "->>";
  var peg$c262 = "->";
  var peg$c263 = "is";
  var peg$c264 = "glob";
  var peg$c265 = "like";
  var peg$c266 = "regexp";
  var peg$c267 = "match";
  var peg$c268 = "case";
  var peg$c269 = "end";
  var peg$c270 = "pack";
  var peg$c271 = "unpack";
  var peg$c272 = "filter";
  var peg$c273 = "over";
  var peg$c274 = "partition";
  var peg$c275 = "range";
  var peg$c276 = "rows";
  var peg$c277 = "groups";
  var peg$c278 = "nulls";
  var peg$c279 = "first";
  var peg$c280 = "last";
  var peg$c281 = "unbounded";
  var peg$c282 = "preceding";
  var peg$c283 = "current";
  var peg$c284 = "following";
  var peg$c285 = "exclude";
  var peg$c286 = "others";
  var peg$c287 = "ties";
  var peg$c288 = "raise";
  var peg$c289 = "references";
  var peg$c290 = "generated";
  var peg$c291 = "`";
  var peg$c292 = "``";
  var peg$c293 = "true";
  var peg$c294 = "false";
  var peg$c295 = "e'";
  var peg$c296 = "e''";
  var peg$c297 = "/";
  var peg$c298 = "a";
  var peg$c299 = "b";
  var peg$c300 = "e";
  var peg$c301 = "f";
  var peg$c302 = "r";
  var peg$c303 = "v";
  var peg$c304 = "x";
  var peg$c305 = "u{";
  var peg$c306 = "u";
  var peg$c307 = "u(";
  var peg$c308 = "%";
  var peg$c309 = "0x";
  var peg$c310 = "_";
  var peg$c311 = "\r";
  var peg$c312 = "\n";
  var peg$c313 = "/*";
  var peg$c314 = "*/";
  var peg$c315 = "\\u";
  var peg$c316 = "-";

  var peg$r0 = /^[_0-9A-Za-z]/;
  var peg$r1 = /^[^']/;
  var peg$r2 = /^[^"]/;
  var peg$r3 = /^[^'"]/;
  var peg$r4 = /^[\-+*\/%|\^&<>]/;
  var peg$r5 = /^[\-~+!]/;
  var peg$r6 = /^[A-Za-z_]/;
  var peg$r7 = /^[A-Za-z0-9_]/;
  var peg$r8 = /^[^()']/;
  var peg$r9 = /^[+\-~]/;
  var peg$r10 = /^[&<->]/;
  var peg$r11 = /^[+|]/;
  var peg$r12 = /^[%*\-\/]/;
  var peg$r13 = /^[<>]/;
  var peg$r14 = /^[,}]/;
  var peg$r15 = /^[\-+]/;
  var peg$r16 = /^[^`\0]/;
  var peg$r17 = /^[ \f\n\r\t\v\xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
  var peg$r18 = /^[_A-Za-z\u0100-\uFFFF]/;
  var peg$r19 = /^[_A-Za-z0-9\u0100-\uFFFF]/;
  var peg$r20 = /^[^'\0]/;
  var peg$r21 = /^[0-9A-Fa-f]/;
  var peg$r22 = /^[^%\\']/;
  var peg$r23 = /^[\-+ 0#,!]/;
  var peg$r24 = /^[1-9]/;
  var peg$r25 = /^[0-9]/;
  var peg$r26 = /^[diufeEgGxXoscqQw]/;
  var peg$r27 = /^[eE]/;
  var peg$r28 = /^[+\-]/;
  var peg$r29 = /^[\-_0-9A-Za-z]/;
  var peg$r30 = /^[^\r\n]/;
  var peg$r31 = /^["\\\/bfnrt]/;
  var peg$r32 = /^[^\0-\x1F"\\]/;

  var peg$e0 = peg$literalExpectation(";;", false);
  var peg$e1 = peg$literalExpectation(".", false);
  var peg$e2 = peg$classExpectation(["_", ["0", "9"], ["A", "Z"], ["a", "z"]], false, false);
  var peg$e3 = peg$literalExpectation("'", false);
  var peg$e4 = peg$classExpectation(["'"], true, false);
  var peg$e5 = peg$literalExpectation("\"", false);
  var peg$e6 = peg$literalExpectation("\\", false);
  var peg$e7 = peg$anyExpectation();
  var peg$e8 = peg$classExpectation(["\""], true, false);
  var peg$e9 = peg$classExpectation(["'", "\""], true, false);
  var peg$e10 = peg$literalExpectation("explain", false);
  var peg$e11 = peg$literalExpectation("query", false);
  var peg$e12 = peg$literalExpectation("plan", false);
  var peg$e13 = peg$literalExpectation("if", false);
  var peg$e14 = peg$literalExpectation("(", false);
  var peg$e15 = peg$literalExpectation(")", false);
  var peg$e16 = peg$literalExpectation("then", false);
  var peg$e17 = peg$literalExpectation("else", false);
  var peg$e18 = peg$literalExpectation("for", false);
  var peg$e19 = peg$literalExpectation("of", false);
  var peg$e20 = peg$literalExpectation("while", false);
  var peg$e21 = peg$literalExpectation("each", false);
  var peg$e22 = peg$literalExpectation("parallel", false);
  var peg$e23 = peg$literalExpectation(",", false);
  var peg$e24 = peg$literalExpectation("=", false);
  var peg$e25 = peg$literalExpectation("@", false);
  var peg$e26 = peg$literalExpectation("do", false);
  var peg$e27 = peg$literalExpectation("set", false);
  var peg$e28 = peg$literalExpectation("format", false);
  var peg$e29 = peg$literalExpectation("output", false);
  var peg$e30 = peg$literalExpectation("dense", false);
  var peg$e31 = peg$literalExpectation("sparse", false);
  var peg$e32 = peg$literalExpectation("array", false);
  var peg$e33 = peg$literalExpectation("object", false);
  var peg$e34 = peg$literalExpectation("ndjson", false);
  var peg$e35 = peg$literalExpectation("raw", false);
  var peg$e36 = peg$literalExpectation("csv", false);
  var peg$e37 = peg$literalExpectation("with", false);
  var peg$e38 = peg$literalExpectation("header", false);
  var peg$e39 = peg$literalExpectation("no", false);
  var peg$e40 = peg$literalExpectation("delimiter", false);
  var peg$e41 = peg$literalExpectation("quote", false);
  var peg$e42 = peg$literalExpectation("escape", false);
  var peg$e43 = peg$literalExpectation("encoding", false);
  var peg$e44 = peg$literalExpectation("omit", false);
  var peg$e45 = peg$literalExpectation("null", false);
  var peg$e46 = peg$literalExpectation("to", false);
  var peg$e47 = peg$literalExpectation("stdout", false);
  var peg$e48 = peg$literalExpectation("stderr", false);
  var peg$e49 = peg$literalExpectation("file", false);
  var peg$e50 = peg$literalExpectation("vega", false);
  var peg$e51 = peg$literalExpectation("lite", false);
  var peg$e52 = peg$literalExpectation("spec", false);
  var peg$e53 = peg$literalExpectation("svg", false);
  var peg$e54 = peg$literalExpectation("png", false);
  var peg$e55 = peg$literalExpectation("inline", false);
  var peg$e56 = peg$literalExpectation("image", false);
  var peg$e57 = peg$literalExpectation("mark", false);
  var peg$e58 = peg$literalExpectation("{", false);
  var peg$e59 = peg$literalExpectation("}", false);
  var peg$e60 = peg$literalExpectation("repeat", false);
  var peg$e61 = peg$literalExpectation("columns", false);
  var peg$e62 = peg$literalExpectation("layer", false);
  var peg$e63 = peg$literalExpectation("hconcat", false);
  var peg$e64 = peg$literalExpectation("vconcat", false);
  var peg$e65 = peg$literalExpectation("concat", false);
  var peg$e66 = peg$literalExpectation(";", false);
  var peg$e67 = peg$literalExpectation("facet", false);
  var peg$e68 = peg$literalExpectation("row", false);
  var peg$e69 = peg$literalExpectation("column", false);
  var peg$e70 = peg$literalExpectation(":", false);
  var peg$e71 = peg$literalExpectation("resolve", false);
  var peg$e72 = peg$literalExpectation("scale", false);
  var peg$e73 = peg$literalExpectation("axis", false);
  var peg$e74 = peg$literalExpectation("legend", false);
  var peg$e75 = peg$literalExpectation("independent", false);
  var peg$e76 = peg$literalExpectation("shared", false);
  var peg$e77 = peg$literalExpectation("options", false);
  var peg$e78 = peg$literalExpectation("quantitative", false);
  var peg$e79 = peg$literalExpectation("q", false);
  var peg$e80 = peg$literalExpectation("nominal", false);
  var peg$e81 = peg$literalExpectation("n", false);
  var peg$e82 = peg$literalExpectation("ordinal", false);
  var peg$e83 = peg$literalExpectation("o", false);
  var peg$e84 = peg$literalExpectation("temporal", false);
  var peg$e85 = peg$literalExpectation("t", false);
  var peg$e86 = peg$literalExpectation("geojson", false);
  var peg$e87 = peg$literalExpectation("g", false);
  var peg$e88 = peg$literalExpectation("binned", false);
  var peg$e89 = peg$literalExpectation("utc", false);
  var peg$e90 = peg$literalExpectation("year", false);
  var peg$e91 = peg$literalExpectation("quarter", false);
  var peg$e92 = peg$literalExpectation("month", false);
  var peg$e93 = peg$literalExpectation("date", false);
  var peg$e94 = peg$literalExpectation("week", false);
  var peg$e95 = peg$literalExpectation("dayofyear", false);
  var peg$e96 = peg$literalExpectation("day", false);
  var peg$e97 = peg$literalExpectation("hours", false);
  var peg$e98 = peg$literalExpectation("minutes", false);
  var peg$e99 = peg$literalExpectation("seconds", false);
  var peg$e100 = peg$literalExpectation("milliseconds", false);
  var peg$e101 = peg$literalExpectation("sort", false);
  var peg$e102 = peg$literalExpectation("channel", false);
  var peg$e103 = peg$literalExpectation("chan", false);
  var peg$e104 = peg$literalExpectation("asc", false);
  var peg$e105 = peg$literalExpectation("desc", false);
  var peg$e106 = peg$literalExpectation("[", false);
  var peg$e107 = peg$literalExpectation("]", false);
  var peg$e108 = peg$literalExpectation("nosort", false);
  var peg$e109 = peg$literalExpectation("bin", false);
  var peg$e110 = peg$literalExpectation("count", false);
  var peg$e111 = peg$literalExpectation("*", false);
  var peg$e112 = peg$literalExpectation("datum", false);
  var peg$e113 = peg$literalExpectation("value", false);
  var peg$e114 = peg$literalExpectation("transform", false);
  var peg$e115 = peg$literalExpectation("=>", false);
  var peg$e116 = peg$literalExpectation("apply", false);
  var peg$e117 = peg$literalExpectation("or", false);
  var peg$e118 = peg$literalExpectation("and", false);
  var peg$e119 = peg$literalExpectation("not", false);
  var peg$e120 = peg$literalExpectation("valid", false);
  var peg$e121 = peg$literalExpectation("in", false);
  var peg$e122 = peg$literalExpectation("between", false);
  var peg$e123 = peg$literalExpectation("<>", false);
  var peg$e124 = peg$literalExpectation("!=", false);
  var peg$e125 = peg$literalExpectation("<=", false);
  var peg$e126 = peg$literalExpectation(">=", false);
  var peg$e127 = peg$literalExpectation("<", false);
  var peg$e128 = peg$literalExpectation(">", false);
  var peg$e129 = peg$literalExpectation("==", false);
  var peg$e130 = peg$literalExpectation(">>>", false);
  var peg$e131 = peg$literalExpectation(">>", false);
  var peg$e132 = peg$literalExpectation("||", false);
  var peg$e133 = peg$classExpectation(["-", "+", "*", "/", "%", "|", "^", "&", "<", ">"], false, false);
  var peg$e134 = peg$literalExpectation("--", false);
  var peg$e135 = peg$literalExpectation("++", false);
  var peg$e136 = peg$classExpectation(["-", "~", "+", "!"], false, false);
  var peg$e137 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false);
  var peg$e138 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e139 = peg$literalExpectation("event", false);
  var peg$e140 = peg$literalExpectation("NaN", false);
  var peg$e141 = peg$literalExpectation("E", false);
  var peg$e142 = peg$literalExpectation("LN2", false);
  var peg$e143 = peg$literalExpectation("LN10", false);
  var peg$e144 = peg$literalExpectation("LOG2E", false);
  var peg$e145 = peg$literalExpectation("MAX_VALUE", false);
  var peg$e146 = peg$literalExpectation("MIN_VALUE", false);
  var peg$e147 = peg$literalExpectation("PI", false);
  var peg$e148 = peg$literalExpectation("SQRT1_2", false);
  var peg$e149 = peg$literalExpectation("SQRT2", false);
  var peg$e150 = peg$literalExpectation("projection", false);
  var peg$e151 = peg$literalExpectation("begin", false);
  var peg$e152 = peg$literalExpectation("deferred", false);
  var peg$e153 = peg$literalExpectation("immediate", false);
  var peg$e154 = peg$literalExpectation("exclusive", false);
  var peg$e155 = peg$literalExpectation("commit", false);
  var peg$e156 = peg$literalExpectation("savepoint", false);
  var peg$e157 = peg$literalExpectation("release", false);
  var peg$e158 = peg$literalExpectation("rollback", false);
  var peg$e159 = peg$literalExpectation("analyze", false);
  var peg$e160 = peg$literalExpectation("load", false);
  var peg$e161 = peg$literalExpectation("module", false);
  var peg$e162 = peg$literalExpectation("as", false);
  var peg$e163 = peg$literalExpectation("::", false);
  var peg$e164 = peg$literalExpectation("table", false);
  var peg$e165 = peg$literalExpectation("exists", false);
  var peg$e166 = peg$literalExpectation("from", false);
  var peg$e167 = peg$literalExpectation("comment", false);
  var peg$e168 = peg$literalExpectation("relax", false);
  var peg$e169 = peg$literalExpectation("less", false);
  var peg$e170 = peg$literalExpectation("more", false);
  var peg$e171 = peg$literalExpectation("sniff", false);
  var peg$e172 = peg$literalExpectation("size", false);
  var peg$e173 = peg$literalExpectation("skip", false);
  var peg$e174 = peg$literalExpectation("empty", false);
  var peg$e175 = peg$literalExpectation("lines", false);
  var peg$e176 = peg$literalExpectation("trim", false);
  var peg$e177 = peg$literalExpectation("cast", false);
  var peg$e178 = peg$literalExpectation("create", false);
  var peg$e179 = peg$literalExpectation("function", false);
  var peg$e180 = peg$literalExpectation("language", false);
  var peg$e181 = peg$literalExpectation("returns", false);
  var peg$e182 = peg$literalExpectation("json", false);
  var peg$e183 = peg$literalExpectation("primary", false);
  var peg$e184 = peg$literalExpectation("key", false);
  var peg$e185 = peg$literalExpectation("unique", false);
  var peg$e186 = peg$literalExpectation("check", false);
  var peg$e187 = peg$literalExpectation("foreign", false);
  var peg$e188 = peg$literalExpectation("constraint", false);
  var peg$e189 = peg$literalExpectation("auto", false);
  var peg$e190 = peg$literalExpectation("increment", false);
  var peg$e191 = peg$literalExpectation("default", false);
  var peg$e192 = peg$literalExpectation("collate", false);
  var peg$e193 = peg$literalExpectation("stored", false);
  var peg$e194 = peg$literalExpectation("virtual", false);
  var peg$e195 = peg$literalExpectation("current_timestamp", false);
  var peg$e196 = peg$literalExpectation("current_time", false);
  var peg$e197 = peg$literalExpectation("current_date", false);
  var peg$e198 = peg$literalExpectation("on", false);
  var peg$e199 = peg$literalExpectation("conflict", false);
  var peg$e200 = peg$literalExpectation("abort", false);
  var peg$e201 = peg$literalExpectation("fail", false);
  var peg$e202 = peg$literalExpectation("ignore", false);
  var peg$e203 = peg$literalExpectation("replace", false);
  var peg$e204 = peg$literalExpectation("attach", false);
  var peg$e205 = peg$literalExpectation("detach", false);
  var peg$e206 = peg$literalExpectation("temporary", false);
  var peg$e207 = peg$literalExpectation("view", false);
  var peg$e208 = peg$literalExpectation("index", false);
  var peg$e209 = peg$literalExpectation("using", false);
  var peg$e210 = peg$literalExpectation("trigger", false);
  var peg$e211 = peg$literalExpectation("before", false);
  var peg$e212 = peg$literalExpectation("after", false);
  var peg$e213 = peg$literalExpectation("instead", false);
  var peg$e214 = peg$literalExpectation("delete", false);
  var peg$e215 = peg$literalExpectation("insert", false);
  var peg$e216 = peg$literalExpectation("update", false);
  var peg$e217 = peg$literalExpectation("when", false);
  var peg$e218 = peg$literalExpectation("recursive", false);
  var peg$e219 = peg$literalExpectation("strict", false);
  var peg$e220 = peg$literalExpectation("without", false);
  var peg$e221 = peg$literalExpectation("rowid", false);
  var peg$e222 = peg$literalExpectation("alter", false);
  var peg$e223 = peg$literalExpectation("rename", false);
  var peg$e224 = peg$literalExpectation("add", false);
  var peg$e225 = peg$literalExpectation("drop", false);
  var peg$e226 = peg$literalExpectation("into", false);
  var peg$e227 = peg$literalExpectation("<-", false);
  var peg$e228 = peg$literalExpectation("where", false);
  var peg$e229 = peg$literalExpectation("nothing", false);
  var peg$e230 = peg$literalExpectation("+=", false);
  var peg$e231 = peg$literalExpectation("-=", false);
  var peg$e232 = peg$literalExpectation("*=", false);
  var peg$e233 = peg$literalExpectation("/=", false);
  var peg$e234 = peg$literalExpectation("%=", false);
  var peg$e235 = peg$literalExpectation("&=", false);
  var peg$e236 = peg$literalExpectation("|=", false);
  var peg$e237 = peg$literalExpectation("^=", false);
  var peg$e238 = peg$literalExpectation("<<=", false);
  var peg$e239 = peg$literalExpectation(">>=", false);
  var peg$e240 = peg$literalExpectation("||=", false);
  var peg$e241 = peg$literalExpectation("??=", false);
  var peg$e242 = peg$literalExpectation("truncate", false);
  var peg$e243 = peg$literalExpectation("vacuum", false);
  var peg$e244 = peg$literalExpectation("pragma", false);
  var peg$e245 = peg$literalExpectation("returning", false);
  var peg$e246 = peg$literalExpectation("''", false);
  var peg$e247 = peg$classExpectation(["(", ")", "'"], true, false);
  var peg$e248 = peg$literalExpectation("reindex", false);
  var peg$e249 = peg$literalExpectation("window", false);
  var peg$e250 = peg$literalExpectation("except", false);
  var peg$e251 = peg$literalExpectation("intersect", false);
  var peg$e252 = peg$literalExpectation("distinct", false);
  var peg$e253 = peg$literalExpectation("order", false);
  var peg$e254 = peg$literalExpectation("by", false);
  var peg$e255 = peg$literalExpectation("limit", false);
  var peg$e256 = peg$literalExpectation("offset", false);
  var peg$e257 = peg$literalExpectation("select", false);
  var peg$e258 = peg$literalExpectation("values", false);
  var peg$e259 = peg$literalExpectation("group", false);
  var peg$e260 = peg$literalExpectation("join", false);
  var peg$e261 = peg$literalExpectation("natural", false);
  var peg$e262 = peg$literalExpectation("-:", false);
  var peg$e263 = peg$literalExpectation(":>", false);
  var peg$e264 = peg$literalExpectation("left", false);
  var peg$e265 = peg$literalExpectation("right", false);
  var peg$e266 = peg$literalExpectation("full", false);
  var peg$e267 = peg$literalExpectation("inner", false);
  var peg$e268 = peg$literalExpectation("cross", false);
  var peg$e269 = peg$literalExpectation("lateral", false);
  var peg$e270 = peg$classExpectation(["+", "-", "~"], false, false);
  var peg$e271 = peg$literalExpectation("<<", false);
  var peg$e272 = peg$classExpectation(["&", ["<", ">"]], false, false);
  var peg$e273 = peg$classExpectation(["+", "|"], false, false);
  var peg$e274 = peg$literalExpectation("->>", false);
  var peg$e275 = peg$literalExpectation("->", false);
  var peg$e276 = peg$classExpectation(["%", "*", "-", "/"], false, false);
  var peg$e277 = peg$literalExpectation("is", false);
  var peg$e278 = peg$literalExpectation("glob", false);
  var peg$e279 = peg$literalExpectation("like", false);
  var peg$e280 = peg$literalExpectation("regexp", false);
  var peg$e281 = peg$literalExpectation("match", false);
  var peg$e282 = peg$classExpectation(["<", ">"], false, false);
  var peg$e283 = peg$literalExpectation("case", false);
  var peg$e284 = peg$literalExpectation("end", false);
  var peg$e285 = peg$literalExpectation("pack", false);
  var peg$e286 = peg$classExpectation([",", "}"], false, false);
  var peg$e287 = peg$literalExpectation("unpack", false);
  var peg$e288 = peg$literalExpectation("filter", false);
  var peg$e289 = peg$literalExpectation("over", false);
  var peg$e290 = peg$literalExpectation("partition", false);
  var peg$e291 = peg$literalExpectation("range", false);
  var peg$e292 = peg$literalExpectation("rows", false);
  var peg$e293 = peg$literalExpectation("groups", false);
  var peg$e294 = peg$literalExpectation("nulls", false);
  var peg$e295 = peg$literalExpectation("first", false);
  var peg$e296 = peg$literalExpectation("last", false);
  var peg$e297 = peg$literalExpectation("unbounded", false);
  var peg$e298 = peg$literalExpectation("preceding", false);
  var peg$e299 = peg$literalExpectation("current", false);
  var peg$e300 = peg$literalExpectation("following", false);
  var peg$e301 = peg$literalExpectation("exclude", false);
  var peg$e302 = peg$literalExpectation("others", false);
  var peg$e303 = peg$literalExpectation("ties", false);
  var peg$e304 = peg$literalExpectation("raise", false);
  var peg$e305 = peg$literalExpectation("references", false);
  var peg$e306 = peg$literalExpectation("generated", false);
  var peg$e307 = peg$classExpectation(["-", "+"], false, false);
  var peg$e308 = peg$otherExpectation("name");
  var peg$e309 = peg$otherExpectation("quoted name");
  var peg$e310 = peg$literalExpectation("`", false);
  var peg$e311 = peg$literalExpectation("``", false);
  var peg$e312 = peg$classExpectation(["`", "\0"], true, false);
  var peg$e313 = peg$otherExpectation("identifier");
  var peg$e314 = peg$classExpectation([" ", "\f", "\n", "\r", "\t", "\v", "\xA0", "\u1680", "\u180E", ["\u2000", "\u200A"], "\u2028", "\u2029", "\u202F", "\u205F", "\u3000", "\uFEFF"], false, false);
  var peg$e315 = peg$classExpectation(["_", ["A", "Z"], ["a", "z"], ["\u0100", "\uFFFF"]], false, false);
  var peg$e316 = peg$classExpectation(["_", ["A", "Z"], ["a", "z"], ["0", "9"], ["\u0100", "\uFFFF"]], false, false);
  var peg$e317 = peg$otherExpectation("literal");
  var peg$e318 = peg$literalExpectation("true", true);
  var peg$e319 = peg$literalExpectation("false", true);
  var peg$e320 = peg$literalExpectation("null", true);
  var peg$e321 = peg$literalExpectation("E'", true);
  var peg$e322 = peg$classExpectation(["'", "\0"], true, false);
  var peg$e323 = peg$literalExpectation("E''", true);
  var peg$e324 = peg$literalExpectation("/", false);
  var peg$e325 = peg$literalExpectation("a", false);
  var peg$e326 = peg$literalExpectation("b", false);
  var peg$e327 = peg$literalExpectation("e", false);
  var peg$e328 = peg$literalExpectation("f", false);
  var peg$e329 = peg$literalExpectation("r", false);
  var peg$e330 = peg$literalExpectation("v", false);
  var peg$e331 = peg$literalExpectation("x", false);
  var peg$e332 = peg$classExpectation([["0", "9"], ["A", "F"], ["a", "f"]], false, false);
  var peg$e333 = peg$literalExpectation("u{", false);
  var peg$e334 = peg$literalExpectation("u", false);
  var peg$e335 = peg$literalExpectation("u(", false);
  var peg$e336 = peg$literalExpectation("%", false);
  var peg$e337 = peg$classExpectation(["%", "\\", "'"], true, false);
  var peg$e338 = peg$classExpectation(["-", "+", " ", "0", "#", ",", "!"], false, false);
  var peg$e339 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e340 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e341 = peg$classExpectation(["d", "i", "u", "f", "e", "E", "g", "G", "x", "X", "o", "s", "c", "q", "Q", "w"], false, false);
  var peg$e342 = peg$literalExpectation("0x", false);
  var peg$e343 = peg$literalExpectation("_", false);
  var peg$e344 = peg$classExpectation(["e", "E"], false, false);
  var peg$e345 = peg$classExpectation(["+", "-"], false, false);
  var peg$e346 = peg$classExpectation(["-", "_", ["0", "9"], ["A", "Z"], ["a", "z"]], false, false);
  var peg$e347 = peg$literalExpectation("\r", false);
  var peg$e348 = peg$literalExpectation("\n", false);
  var peg$e349 = peg$classExpectation(["\r", "\n"], true, false);
  var peg$e350 = peg$literalExpectation("/*", false);
  var peg$e351 = peg$literalExpectation("*/", false);
  var peg$e352 = peg$otherExpectation("space");
  var peg$e353 = peg$otherExpectation("boundary");
  var peg$e354 = peg$literalExpectation("true", false);
  var peg$e355 = peg$literalExpectation("false", false);
  var peg$e356 = peg$literalExpectation("\\u", false);
  var peg$e357 = peg$classExpectation(["\"", "\\", "/", "b", "f", "n", "r", "t"], false, false);
  var peg$e358 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false);
  var peg$e359 = peg$literalExpectation("-", false);

  var peg$f0 = function(s) { return s; };
  var peg$f1 = function(c) { return [c]; };
  var peg$f2 = function(s) { return s; };
  var peg$f3 = function(ss) { return ss.filter(s => s != null); };
  var peg$f4 = function(ss) { return ss.filter(s => s != null); };
  var peg$f5 = function(c, xs) { return xs.join(""); };
  var peg$f6 = function(c, x) { if (x === "\n") { return ""; } else { return x; } };
  var peg$f7 = function(c, x) { return x; };
  var peg$f8 = function(c, xs) { return xs.join(""); };
  var peg$f9 = function(c, x) { return x; };
  var peg$f10 = function(c, a) { return a.join(""); };
  var peg$f11 = function(c, args) { return { type: "command", command: c, args }; };
  var peg$f12 = function(s) { return { type: "select", format: "eqp", query: `explain query plan ${s.query}`, dest: s.dest }; };
  var peg$f13 = function(s) { return { type: "select", query: `explain ${s.query}`, dest: s.dest }; };
  var peg$f14 = function(l) { return { type: "command", command: "meta-load", args: l }};
  var peg$f15 = function(l) { return { type: "command", command: "meta-load-module", args: l }};
  var peg$f16 = function(c) { return { type: "command", command: "meta-create-function", args:c } };
  var peg$f17 = function(c) { return { type: "command", command: "meta-create-table-from-json", args:c } };
  var peg$f18 = function(f) { return { type: "command", command: "meta-set-output", args:[f] } };
  var peg$f19 = function(e, t, f) { return f; };
  var peg$f20 = function(e, t, els) { return { type: "if", condition: e, thenStatements: t, elseStatements: els }; };
  var peg$f21 = function(a, t, body) {
    return {
      type: "for",
      assignments: a,
      sourceTable: t,
      bodyStatements: body,
    };
  };
  var peg$f22 = function(e, body) {
    return {
      type: "while",
      condition: e,
      bodyStatements: body,
    };
  };
  var peg$f23 = function(a, body) {
    return {
      assignments: a,
      bodyStatements: body,
    };
  };
  var peg$f24 = function(a, body) {
    return {
      assignments: a,
      bodyStatements: body,
    };
  };
  var peg$f25 = function(v, e) { return { variable: v, name: intoSQLIdentifier(v.slice(1)), expression: e }; };
  var peg$f26 = function(v) { return { variable: v, name: intoSQLIdentifier(v.slice(1)) }; };
  var peg$f27 = function(ss) { return ss; };
  var peg$f28 = function(s) { return [s]; };
  var peg$f29 = function(s) { return { type: "attach", query: s }; };
  var peg$f30 = function(s) { return { type: "detach", query: s }; };
  var peg$f31 = function(c) { return { type: "create", query: c }; };
  var peg$f32 = function(a) { return { type: "alter", query: a }; };
  var peg$f33 = function(d) { return { type: "drop", query: d }; };
  var peg$f34 = function(d) { return { type: "delete", query: d }; };
  var peg$f35 = function(s) { return { type: "vacuum", query: s }; };
  var peg$f36 = function(s) { return { type: "pragma", query: s }; };
  var peg$f37 = function(s) { return { type: "begin", query: s }; };
  var peg$f38 = function(s) { return { type: "savepoint", query: s }; };
  var peg$f39 = function(s) { return { type: "release", query: s }; };
  var peg$f40 = function(s) { return { type: "commit", query: s }; };
  var peg$f41 = function(s) { return { type: "rollback", query: s }; };
  var peg$f42 = function(s) { return { type: "analyze", query: s }; };
  var peg$f43 = function(s) { return { type: "reindex", query: s }; };
  var peg$f44 = function(t, f) { return { type: "for", sourceTable: t, ...f }; };
  var peg$f45 = function(t, f) { return { type: "parallel", sourceTable: t, ...f }; };
  var peg$f46 = function(t, f) { return { ...t, ...f }; };
  var peg$f47 = function(f) { return f; };
  var peg$f48 = function(d, f) { return { ...f, ...d }; };
  var peg$f49 = function(f, d) { return { ...f, ...d }; };
  var peg$f50 = function() { return { format: "dense" }; };
  var peg$f51 = function() { return { format: "sparse" }; };
  var peg$f52 = function() { return { format: "dense" }; };
  var peg$f53 = function() { return { format: "sparse" }; };
  var peg$f54 = function(opts) { return { format: "sparse", formatOptions: opts ?? {} }; };
  var peg$f55 = function() { return { format: "raw" }; };
  var peg$f56 = function(opts) { return { format: "csv", formatOptions: opts ?? {} }; };
  var peg$f57 = function(v) { return { format: v }; };
  var peg$f58 = function(f) { return f; };
  var peg$f59 = function() { return { header: true }; };
  var peg$f60 = function() { return { header: false }; };
  var peg$f61 = function(s) { return { delimiter: s }; };
  var peg$f62 = function(s) { return { quote: s }; };
  var peg$f63 = function() { return { quote: '' }; };
  var peg$f64 = function(s) { return { escape: s }; };
  var peg$f65 = function(s) { return { encoding: s }; };
  var peg$f66 = function(opts) { return Object.assign({}, ...opts); };
  var peg$f67 = function() { return { omitNull: true }; };
  var peg$f68 = function(opts) { return Object.assign({}, ...opts); };
  var peg$f69 = function() { return { type: "stdout" }; };
  var peg$f70 = function() { return { type: "stderr" }; };
  var peg$f71 = function(e) { return { type: "file", sql: `select ${e}` }; };
  var peg$f72 = function(f) { return { type: "file", file: f }; };
  var peg$f73 = function(d) { return { dest: d } ; };
  var peg$f74 = function() { return "inline"; };
  var peg$f75 = function(s) { return s; };
  var peg$f76 = function(s, v) {
    return {
      "type": "vega",
      "view": v,
      "format": s,
    };
  };
  var peg$f77 = function(opts) {
    return merge(...opts);
  };
  var peg$f78 = function(m, props) { return props; };
  var peg$f79 = function(m, props) { return { mark: { type: m, ...props } }; };
  var peg$f80 = function(cs) {
    return { encoding: Object.fromEntries(cs) };
  };
  var peg$f81 = function(d, v) { return { repeat: d, spec: v }; };
  var peg$f82 = function(d, n, v) { return { repeat: d, spec: v, columns: n }; };
  var peg$f83 = function(n) { return n; };
  var peg$f84 = function(op, vs) { return { [op]: vs }; };
  var peg$f85 = function(n, vs) { return { concat: vs, columns: n }; };
  var peg$f86 = function(n, def, spec) { return { facet: def, columns: n, spec }; };
  var peg$f87 = function(axes, spec) { return { facet: merge(...axes), spec }; };
  var peg$f88 = function(d, def) { return { [d]: def }; };
  var peg$f89 = function(f, os, j) { return j; };
  var peg$f90 = function(f, os, jos) {
    return {
      ...(f ? { field: f.field } : {}),
      ...Object.fromEntries(os),
      ...jos,
    };
  };
  var peg$f91 = function(os) { return os; };
  var peg$f92 = function(b, c, d) { return { resolve: { [b]: { [c]: d } } }; };
  var peg$f93 = function(ds) { return merge(...ds); };
  var peg$f94 = function(dir, fs) {
      return { [dir]: fs.map(f => f.field) };
    };
  var peg$f95 = function(fs) {
      return fs.map(f => f.field);
    };
  var peg$f96 = function(obj) {
    return obj;
  };
  var peg$f97 = function(c, a) { return { aggregate: a.op, field: a.field } };
  var peg$f98 = function(c, f, os, j) { return j; };
  var peg$f99 = function(c, f, os, jos) {
    return [unquoteSQLName(c), {
      ...f,
      ...Object.fromEntries(os),
      ...jos,
    }];
  };
  var peg$f100 = function(os) { return os; };
  var peg$f101 = function() { return ["type", "quantitative"]; };
  var peg$f102 = function() { return ["type", "quantitative"]; };
  var peg$f103 = function() { return ["type", "nominal"]; };
  var peg$f104 = function() { return ["type", "nominal"]; };
  var peg$f105 = function() { return ["type", "ordinal"]; };
  var peg$f106 = function() { return ["type", "ordinal"]; };
  var peg$f107 = function() { return ["type", "temporal"]; };
  var peg$f108 = function() { return ["type", "temporal"]; };
  var peg$f109 = function() { return ["type", "geojson"]; };
  var peg$f110 = function() { return ["type", "geojson"]; };
  var peg$f111 = function(t) { return ["timeUnit", t]; };
  var peg$f112 = function(binned, utc, us) {
      const options = [];
      if (binned) { options.push("binned"); }
      if (utc) { options.push("utc"); }
      options.push(...us);
      return options.join("");
    };
  var peg$f113 = function(c) { return "ascending"; };
  var peg$f114 = function(c) { return "descending"; };
  var peg$f115 = function(c, o) { return ["sort", { encoding: c, order: o }] };
  var peg$f116 = function(f) { return "ascending"; };
  var peg$f117 = function(f) { return "descending"; };
  var peg$f118 = function(f, o) { return ["sort", { ...f, order: o }] };
  var peg$f119 = function(vs) { return ["sort", vs]; };
  var peg$f120 = function() { return ["sort", "ascending"]; };
  var peg$f121 = function() { return ["sort", "descending"]; };
  var peg$f122 = function() { return ["sort", null]; };
  var peg$f123 = function() { return ["bin", "binned"]; };
  var peg$f124 = function() { return ["bin", true]; };
  var peg$f125 = function() { return { op: "count" }; };
  var peg$f126 = function(op, f) {
    return {
      op: unquoteSQLName(op),
      field: f.field,
    };
  };
  var peg$f127 = function(v) { return { datum: { repeat: v } }; };
  var peg$f128 = function(v) { return { datum: v }; };
  var peg$f129 = function(v) { return { value: v }; };
  var peg$f130 = function(v) { return { field: { repeat: v } }; };
  var peg$f131 = function() { return { field: { repeat: "repeat" } }; };
  var peg$f132 = function(f) { return { field: escapeVegaField(unquoteSQLName(f)) }; };
  var peg$f133 = function(ms) { return { transform: [].concat(...ms) }; };
  var peg$f134 = function(filter) { return [{ filter }]; };
  var peg$f135 = function(e) { return [{ filter: e }]; };
  var peg$f136 = function(fs, ags) {
    return [{ aggregate: ags, groupby: fs.map(f => escapeVegaField(unquoteSQLName(f)))}];
  };
  var peg$f137 = function(cs) { return cs; };
  var peg$f138 = function(obj) { return [obj]; };
  var peg$f139 = function(ps) { return {"or": ps}; };
  var peg$f140 = function(ps) { return {"and": ps}; };
  var peg$f141 = function(p) { return {"not": p}; };
  var peg$f142 = function(p) { return p; };
  var peg$f143 = function(f) { return { field: escapeVegaField(unquoteSQLName(f)), valid: true }; };
  var peg$f144 = function(f, vs) { return { field: escapeVegaField(unquoteSQLName(f)), oneOf: vs }; };
  var peg$f145 = function(f, t, vs) { return { field: escapeVegaField(unquoteSQLName(f)), timeUnit: t, oneOf: vs }; };
  var peg$f146 = function(f, a, b) { return { field: escapeVegaField(unquoteSQLName(f)), range: [a, b] }; };
  var peg$f147 = function(f, t, a, b) { return { field: escapeVegaField(unquoteSQLName(f)), timeUnit: t, range: [a, b] }; };
  var peg$f148 = function(f, value) { return { not: { field: escapeVegaField(unquoteSQLName(f)), equal: value } }; };
  var peg$f149 = function(f, op, value) { return { field: escapeVegaField(unquoteSQLName(f)), [op]: value }; };
  var peg$f150 = function(f, t, value) { return { not: { field: escapeVegaField(unquoteSQLName(f)), timeUnit: t, [op]: value } }; };
  var peg$f151 = function(f, t, op, value) { return { field: escapeVegaField(unquoteSQLName(f)), timeUnit: t, [op]: value }; };
  var peg$f152 = function(f, a) {
    return {
      "op": a.op,
      "field": a.field,
      "as": escapeVegaField(unquoteSQLName(f)),
    };
  };
  var peg$f153 = function(f, e) { return { calculate: e, as: escapeVegaField(unquoteSQLName(f)) }; };
  var peg$f154 = function() { return "equal"; };
  var peg$f155 = function() { return "lte"; };
  var peg$f156 = function() { return "gte"; };
  var peg$f157 = function() { return "lt"; };
  var peg$f158 = function() { return "gt"; };
  var peg$f159 = function(v) { return v; };
  var peg$f160 = function(v) { return v; };
  var peg$f161 = function(e) { return { expr: e }; };
  var peg$f162 = function(es) { return es.join(" || "); };
  var peg$f163 = function(es) { return es.join(" && "); };
  var peg$f164 = function(e) { return `!(${e})`; };
  var peg$f165 = function(e, e1, e2) { return `${e} >= ${e1} && ${e} <= ${e2}`; };
  var peg$f166 = function(e1, op, e2) { return `${e1} ${op} ${e2}`; };
  var peg$f167 = function() { return "==="; };
  var peg$f168 = function() { return "!=="; };
  var peg$f169 = function() { return "!=="; };
  var peg$f170 = function() { return "==="; };
  var peg$f171 = function() { return "+"; };
  var peg$f172 = function(op, e) { return `${op}${e}`; };
  var peg$f173 = function(e) { return `(${e})`; };
  var peg$f174 = function(f, es) { return `${f}(${es.join(", ")})`; };
  var peg$f175 = function(f) { return `datum[${JSON.stringify(unquoteSQLName(f))}]`; };
  var peg$f176 = function(f) { return `event[${JSON.stringify(unquoteSQLName(f))}]`; };
  var peg$f177 = function(s) { return JSON.stringify(s); };
  var peg$f178 = function(v) { return JSON.stringify(v); };
  var peg$f179 = function(f) { return `datum[${JSON.stringify(unquoteSQLName(f))}]`; };
  var peg$f180 = function() { return "NaN"; };
  var peg$f181 = function() { return "E"; };
  var peg$f182 = function() { return "LN2"; };
  var peg$f183 = function() { return "LN10"; };
  var peg$f184 = function() { return "LOG2E"; };
  var peg$f185 = function() { return "MAX_VALUE"; };
  var peg$f186 = function() { return "MIN_VALUE"; };
  var peg$f187 = function() { return "PI"; };
  var peg$f188 = function() { return "SQRT1_2"; };
  var peg$f189 = function() { return "SQRT2"; };
  var peg$f190 = function(type, opts) { return opts; };
  var peg$f191 = function(type, opts) {
    return {
      projection: {
        type,
        ...opts,
      },
    };
  };
  var peg$f192 = function(i, r) { return r != null ? { type: "insert", query: i + r, returning: true } : { type: "insert", query: i }; };
  var peg$f193 = function(d, r) { return r != null ? { type: "delete", query: d + r, returning: true } : { type: "delete", query: d }; };
  var peg$f194 = function(u, r) { return r != null ? { type: "update", query: u + r, returning: true } : { type: "update", query: u }; };
  var peg$f195 = function(t) { return { type: "select", query: t }; };
  var peg$f196 = function(opt) { return opt; };
  var peg$f197 = function(opt) {
    if (opt != null) {
      return `begin ${opt}`;
    } else {
      return "begin";
    }
  };
  var peg$f198 = function() { return "commit"; };
  var peg$f199 = function(n) { return `savepoint ${n}`; };
  var peg$f200 = function(n) { return `release ${n}`; };
  var peg$f201 = function(n) { return n; };
  var peg$f202 = function(savepoint) {
    if (savepoint != null) {
      return `rollback to ${savepoint}`;
    } else {
      return "rollback";
    }
  };
  var peg$f203 = function(s, n) { return `analyze ${s}.${n}`; };
  var peg$f204 = function(n) { return `analyze ${n}`; };
  var peg$f205 = function() { return "analyze"; };
  var peg$f206 = function(modulePath, n) { return n; };
  var peg$f207 = function(modulePath, alias) { return [modulePath, alias]; };
  var peg$f208 = function(ns) { return ns; };
  var peg$f209 = function() { return true; };
  var peg$f210 = function(ifNotExists, table, td) { return td; };
  var peg$f211 = function(ifNotExists, table, d, e) { return { sql: `select ${e}`, as: "path" }; };
  var peg$f212 = function(ifNotExists, table, d, v) { return { variable: v }; };
  var peg$f213 = function(ifNotExists, table, d, e) { return { sql: `select ${e}`, as: "content" }; };
  var peg$f214 = function(ifNotExists, table, d, x, opt1, o) { return o; };
  var peg$f215 = function(ifNotExists, table, d, x, opt1, opts) { return [opt1, ...opts]; };
  var peg$f216 = function(ifNotExists, table, d, x, opt) {
    const def = d && d.def;
    const columns = d && d.columns.filter(c => !c.constraints.some(({ body }) => body.startsWith("as"))).map(c => c.name);
    const options = Object.fromEntries(opt ?? []);
    const base = {
      ifNotExists,
      table,
      def,
      columns,
      options,
    };
    if (typeof x === "string") {
      const path = typeof x === "string" ? x : null;
      return {
        ...base,
        path,
      };
    } else if ("rawblock" in x) {
      const contentType = x.rawblock[0];
      const content = x.rawblock[1];
      return {
        ...base,
        contentType,
        content,
      };
    } else if ("variable" in x) {
      const variable = x.variable;
      return {
        ...base,
        variable,
      };
    } else if ("sql" in x) {
      return {
        ...base,
        sql: x.sql,
        as: x.as,
      };
    }
  };
  var peg$f217 = function(s) { return ["null", s]; };
  var peg$f218 = function() { return ["header", true]; };
  var peg$f219 = function() { return ["header", false]; };
  var peg$f220 = function(s) { return ["delimiter", s]; };
  var peg$f221 = function(s) { return ["quote", s]; };
  var peg$f222 = function() { return ["quote", false]; };
  var peg$f223 = function(s) { return ["escape", s]; };
  var peg$f224 = function(s) { return ["comment", s]; };
  var peg$f225 = function(s) { return ["encoding", s]; };
  var peg$f226 = function(lm) { return ["relax_column_count_" + lm, true]; };
  var peg$f227 = function() { return ["relax_column_count", true]; };
  var peg$f228 = function(n) { return ["sniff_size", n]; };
  var peg$f229 = function() { return ["skip_empty_lines", true]; };
  var peg$f230 = function() { return ["trim", true]; };
  var peg$f231 = function() { return ["cast", true]; };
  var peg$f232 = function() { return ["cast", false]; };
  var peg$f233 = function(f) { return ["format", f]; };
  var peg$f234 = function() { return "table"; };
  var peg$f235 = function(type, n, ps, opts, x) {
    return [n, ps, x, {...opts, type: type ?? undefined}];
  };
  var peg$f236 = function(opts) { return Object.fromEntries(opts); };
  var peg$f237 = function(l) { return ["language", l]; };
  var peg$f238 = function(t) { return ["returns", t]; };
  var peg$f239 = function(ine, table, td) { return td; };
  var peg$f240 = function(ine, table, d, e) { return [table, d, e, Boolean(ine)]; };
  var peg$f241 = function() { return []; };
  var peg$f242 = function(ns) { return ns; };
  var peg$f243 = function(n, t) { return t; };
  var peg$f244 = function(n, t) {
    // TODO: use type information
    return n;
  };
  var peg$f245 = function(cs, cc, vs) { return { cc, cs: vs }; };
  var peg$f246 = function(cs, vcs, c) { return c; };
  var peg$f247 = function(cs, vcs, cos) {
    if (vcs) {
      const pkbody = `primary key (${cs.map(c => c.name).join(", ")})${vcs.cc ?? ""}`;
      const pk = { def: pkbody, name: undefined, body: pkbody };
      const def = [...cs, ...vcs.cs, ...cos, pk].map(c => c.def).join(", ");
      return { def, columns: [...cs, ...vcs.cs], constraints: [...cos, pk] };
    }
    const def = [...cs, ...cos].map(c => c.def).join(", ");
    return { def, columns: cs, constraints: cos };
  };
  var peg$f248 = function(name, t) { return t; };
  var peg$f249 = function(name, type, c) { return c; };
  var peg$f250 = function(name, type, constraints) {
    let def = name;
    if (type) def += ` ${type}`;
    for (const c of constraints) def += ` ${c.def}`
    return { def, name, type, constraints };
  };
  var peg$f251 = function(n) { return n; };
  var peg$f252 = function(name, body) {
    const def = name ? `constraint ${name} ${body}` : body;
    return { def, name, body }
  };
  var peg$f253 = function(d) { return ` ${d}`; };
  var peg$f254 = function(d, cc) {return " autoincrement"; };
  var peg$f255 = function(d, cc, a) { return `primary key${d ?? ""}${cc ?? ""}${a ?? ""}`; };
  var peg$f256 = function(cc) { return `not null${cc ?? ""}`; };
  var peg$f257 = function(cc) { return `unique${cc ?? ""}`; };
  var peg$f258 = function(e) { return `check (${e})`; };
  var peg$f259 = function(e) { return `(${e})`; };
  var peg$f260 = function(x) { return `default ${x}`; };
  var peg$f261 = function(n) { return `collate ${n}`; };
  var peg$f262 = function(e, x) { return ` ${x}`; };
  var peg$f263 = function(e, x) { return `as (${e})${x ?? ""}`; };
  var peg$f264 = function() { return "current_timestamp"; };
  var peg$f265 = function() { return "current_time"; };
  var peg$f266 = function() { return "current_date"; };
  var peg$f267 = function(n) { return n; };
  var peg$f268 = function(name, body) {
    const def = name ? `constraint ${name} ${body}` : body;
    return { def, name, body }
  };
  var peg$f269 = function() { return "primary key"; };
  var peg$f270 = function(k, cs, cc) { return `${k} (${cs.join(", ")})${cc ?? ""}`; };
  var peg$f271 = function(e) { return `check (${e})`; };
  var peg$f272 = function(k) { return ` on conflict ${k}`; };
  var peg$f273 = function(e, n) {
    return `attach ${e} as ${n}`;
  };
  var peg$f274 = function(n) {
    return `detach ${n}`;
  };
  var peg$f275 = function(tv, ine, n, t) {
    if (ine) {
      return `create temporary ${tv} if not exists ${n} as ${t}`;
    } else {
      return `create temporary ${tv} ${n} as ${t}`;
    }
  };
  var peg$f276 = function(tv, ine, n, t) {
    if (ine) {
      return `create ${tv} if not exists ${n} as ${t}`;
    } else {
      return `create ${tv} ${n} as ${t}`;
    }
  };
  var peg$f277 = function() { return " unique"; };
  var peg$f278 = function(uniq) { return " if not exists"; };
  var peg$f279 = function(uniq, ine, n, tn, cond) { return ` where ${cond}`; };
  var peg$f280 = function(uniq, ine, n, tn, cond, ic) {
    return `create${uniq ?? ""} index${ine ?? ""} ${n} on ${tn} (${ic})${cond ?? ""}`;
  };
  var peg$f281 = function(n, tn, a) {
    return `create virtual table ${n} using ${tn}(${a})`;
  };
  var peg$f282 = function(ine, n, td, opts) {
    return `create table${ine ? " if not exists" : ""} ${n} (${td.def})${opts ? ` ${opts.join(", ")}` : ""}`;
  };
  var peg$f283 = function() { return " temporary"; };
  var peg$f284 = function(temp) { return " if not exists"; };
  var peg$f285 = function(temp, ine, trig) { return "instead of"; };
  var peg$f286 = function(temp, ine, trig, triggerPhase, cns) { return `update of ${cns.join(", ")}`; };
  var peg$f287 = function(temp, ine, trig, triggerPhase, triggerMethod, tn, when) { return ` when ${when}`; };
  var peg$f288 = function(temp, ine, trig, triggerPhase, triggerMethod, tn, when, ss) {
    return `create${temp ?? ""} trigger${ine ?? ""} ${trig} ${triggerPhase} ${triggerMethod} on ${tn}${when ?? ""} begin ${ss.map(s => `${s.query};`).join("")} end`;
  };
  var peg$f289 = function(tv, x, a, t) {
    const [s, n] = x;
    const qn = s != null ? `${s}.${n}` : n;
    if (a != null) {
      return `create ${tv} ${qn} as with ${n}(${a.join(", ")}) as (${t}) select * from ${n}`;
    } else {
      return `create ${tv} ${qn} as with ${n} as (${t}) select * from ${n}`;
    }
  };
  var peg$f290 = function(tv, x, a, t) {
    const [s, n] = x;
    const qn = s != null ? `${s}.${n}` : n;
    if (a != null) {
      return `create ${tv} ${qn} as with ${n}(${a.join(", ")}) as (${t}) select * from ${n}`;
    } else {
      return `create ${tv} ${qn} as ${t}`;
    }
  };
  var peg$f291 = function(opts) { return opts; };
  var peg$f292 = function() { return "strict"; };
  var peg$f293 = function() { return "without rowid"; };
  var peg$f294 = function(s) { return [s]; };
  var peg$f295 = function(ss) { return ss; };
  var peg$f296 = function(n, d) { return `alter table ${n} rename to ${d}`; };
  var peg$f297 = function(n, c, d) { return `alter table ${n} rename ${c} to ${d}`; };
  var peg$f298 = function(n, d) { return `alter table ${n} add ${d.def}`; };
  var peg$f299 = function(n, c) { return `alter table ${n} drop ${c}`; };
  var peg$f300 = function(k) { return ` or ${k}`; };
  var peg$f301 = function(ts, oc, n, nl) { return ` (${nl.join(", ")})` };
  var peg$f302 = function(ts, oc, n, a, t, up) {
    const withclause = ts.length > 0 ? "with " + ts.join(", ") + " " : "";
    if (up.length > 0) {
      // workaround for syntax ambiguity
      t = `select * from (${t}) where 1`;
    }
    return `${withclause}insert${oc ?? ""} into ${n}${a ?? ""} ${t}${up.join("")}`;
  };
  var peg$f303 = function(ts, oc) { return oc; };
  var peg$f304 = function(ts, oc, n, nl) { return ` (${nl.join(", ")})` };
  var peg$f305 = function(ts, oc, n, a, t, up) {
    const withclause = ts.length > 0 ? "with " + ts.join(", ") + " " : "";
    if (up.length > 0) {
      // workaround for syntax ambiguity
      t = `select * from (${t}) where 1`;
    }
    return `${withclause}insert${oc ?? ""} into ${n}${a ?? ""} ${t}${up.join("")}`;
  };
  var peg$f306 = function(ct, ua) {
    return ` on conflict${ct ?? ""} do ${ua}`;
  };
  var peg$f307 = function(cs, cond) { return ` (${cs}) where ${cond}`; };
  var peg$f308 = function(cs) { return ` (${cs})`; };
  var peg$f309 = function(cond, cs) { return ` (${cs}) where ${cond}`; };
  var peg$f310 = function() { return "nothing"; };
  var peg$f311 = function(ss, e) { return ` where ${e}`; };
  var peg$f312 = function(ss, where) { return `update set ${ss.join(", ")}${where ?? ""}`; };
  var peg$f313 = function(cond, ss) { return `update set ${ss.join(", ")} where ${cond}`; };
  var peg$f314 = function(ts, n, e) {
    const withclause = ts.length > 0 ? "with " + ts.join(", ") + " " : "";
    return `${withclause}delete from ${n} where ${e}`;
  };
  var peg$f315 = function(ts, n, e) {
    const withclause = ts.length > 0 ? "with " + ts.join(", ") + " " : "";
    return `${withclause}delete from ${n} where ${e}`;
  };
  var peg$f316 = function(ts, oc, n, e) { return e; };
  var peg$f317 = function(ts, oc, n, cond, s) { return s; };
  var peg$f318 = function(ts, oc, n, cond, ss) {
    const withclause = ts.length > 0 ? "with " + ts.join(", ") + " " : "";
    return `${withclause}update${oc ?? ""} ${n} set ${ss.join(", ")}${cond ? ` where ${cond}` : ""}`
  };
  var peg$f319 = function(e) { return e; };
  var peg$f320 = function(es) {
    if (es.length == 1) {
      return es[0];
    } else {
      return `(${es.join(") and (")})`;
    }
  };
  var peg$f321 = function(l, e) { return `${l} = ${e}`; };
  var peg$f322 = function(t, e) { return `${t} = ${t} + (${e})`; };
  var peg$f323 = function(t, e) { return `${t} = ${t} - (${e})`; };
  var peg$f324 = function(t, e) { return `${t} = ${t} * (${e})`; };
  var peg$f325 = function(t, e) { return `${t} = ${t} / (${e})`; };
  var peg$f326 = function(t, e) { return `${t} = ${t} % (${e})`; };
  var peg$f327 = function(t, e) { return `${t} = ${t} & (${e})`; };
  var peg$f328 = function(t, e) { return `${t} = ${t} | (${e})`; };
  var peg$f329 = function(t, e) { return `${t} = ${t} ^ (${e})`; };
  var peg$f330 = function(t, e) { return `${t} = ${t} << (${e})`; };
  var peg$f331 = function(t, e) { return `${t} = ${t} >> (${e})`; };
  var peg$f332 = function(t, e) { return `${t} = ${t} || (${e})`; };
  var peg$f333 = function(t, e) { return `${t} = coalesce(${t}, ${e})`; };
  var peg$f334 = function(ans) { return `(${ans.join(", ")})`; };
  var peg$f335 = function(n) { return `delete from ${n}`; };
  var peg$f336 = function(n, s) { return `vacuum ${n} into ${s}`; };
  var peg$f337 = function(s) { return `vacuum into ${s}`; };
  var peg$f338 = function(n) { return `vacuum ${n}`; };
  var peg$f339 = function() { return `vacuum`; };
  var peg$f340 = function(s) { return s; };
  var peg$f341 = function(s, n, v) { return `= ${v}`; };
  var peg$f342 = function(s, n, v) { return `(${v})`; };
  var peg$f343 = function(s, n, e) {
    const sn = (s != null) ? `${s}.${n}` : n;
    if (e != null) {
      return `pragma ${sn} ${e}`;
    } else {
      return `pragma ${sn}`;
    }
  };
  var peg$f344 = function(rs) { return rs; };
  var peg$f345 = function(rs) {
    return " returning " + rs.map(s => {
      if (s.name && s.name !== s.expression) {
        return `${s.expression} as ${s.name}`;
      } else {
        return s.expression;
      }
    }).join(", ");
  };
  var peg$f346 = function(e1, e) { return e; };
  var peg$f347 = function(e1, es) {
    return [e1, ...es].join(", ");
  };
  var peg$f348 = function(e, s) { return s; };
  var peg$f349 = function(e, s1) {
    if (s1) {
      return `${e} ${s1}`;
    } else {
      return e;
    }
  };
  var peg$f350 = function(n) { return `reindex ${n}`; };
  var peg$f351 = function() { return `reindex`; };
  var peg$f352 = function(tv, n) {
    return `drop temporary ${tv} ${n}`;
  };
  var peg$f353 = function(tv, ie, n) {
    if (ie) {
      return `drop ${tv} if exists ${n}`;
    } else {
      return `drop ${tv} ${n}`;
    }
  };
  var peg$f354 = function(s, v) { return [s, v]; };
  var peg$f355 = function(v) { return [null, v]; };
  var peg$f356 = function(x) {
    const [s, n] = x;
    if (s != null) {
      return `${s}.${n}`;
    } else {
      return n;
    }
  };
  var peg$f357 = function(x) {
    const [s, n] = x;
    if (s != null) {
      return `${s}.${n}`;
    } else {
      return n;
    }
  };
  var peg$f358 = function(s, n) { return [s, n]; };
  var peg$f359 = function(n) { return [null, n]; };
  var peg$f360 = function(i) { return `\u0000t${i}\u0000`; };
  var peg$f361 = function(m) { return modulePathNameToSQLName(m); };
  var peg$f362 = function(t) { return t; };
  var peg$f363 = function(ts, t) {
    return `with ${ts.join(", ")} ${t}`;
  };
  var peg$f364 = function(n, a, t) {
    if (a != null) {
      return `${n}(${a.join(", ")}) as (${t})`;
    }
    return `${n} as (${t})`;
  };
  var peg$f365 = function(n, w) { return { name: n, window: w }; };
  var peg$f366 = function(ns) { return ns; };
  var peg$f367 = function(ns) { return ns; };
  var peg$f368 = function(ans) { return ans; };
  var peg$f369 = function(ts) { return ts; };
  var peg$f370 = function(t) { return t; };
  var peg$f371 = function(t) { return t; };
  var peg$f372 = function(t) { return ["except", t]; };
  var peg$f373 = function(t) { return ["intersect", t]; };
  var peg$f374 = function(tss, tex, distinct, order, limitOffset, alias, d) { return ["distinct", true]; };
  var peg$f375 = function(tss, tex, distinct, order, limitOffset, alias, o) { return ["orderBy", o]; };
  var peg$f376 = function(tss, tex, distinct, order, limitOffset, alias, l) { return ["limitOffset", l]; };
  var peg$f377 = function(tss, tex, distinct, order, limitOffset, alias, a) { return ["as", a]; };
  var peg$f378 = function(tss, tex, distinct, order, limitOffset, alias, fs) { return ["filters", fs]; };
  var peg$f379 = function(tss, tex, distinct, order, limitOffset, alias, cs) {
    let [t1, ...ts] = tss;
    const union = distinct ? " union " : " union all "
    let sql;
    t1.distinct(distinct);
    if (ts.length === 0 && tex.length === 0) {
      if (order != null) {
        t1 = t1.orderBy(order);
      }
      sql = t1.toSQL(true);
    } else {
      sql = t1.toSQL(false)
      if (ts.length > 0) {
        sql += union;
        sql += ts.map(tb => tb.distinct(distinct).toSQL(false)).join(union);
      }
      for (const [k, t] of tex) {
        sql = `${sql} ${k} ${t.toSQL(false)}`;
      }
      if (order) {
        sql += " order by ";
        let k = 0;
        for (const [e, s] of order) {
          k++;
          if (k > 1) {
            sql += ", ";
          }
          sql += e;
          sql += " ";
          sql += s;
        }
      }
    }
    if (limitOffset) {
      const [limit, offset] = limitOffset;
      sql += " limit ";
      sql += limit;
      if (offset != null) {
        sql += " offset ";
        sql += offset;
      }
    }
    if (cs.length > 0) {
      let tb = new TableBuilder(alias ?? null, `(${sql})`);
      for (const [tag, v] of cs) {
        if (tag === "distinct") {
          tb = tb.distinct(v);
        } else if (tag === "orderBy") {
          tb = tb.orderBy(v);
        } else if (tag === "limitOffset") {
          const [limit, offset] = v;
          tb = tb.limitOffset(limit, offset);
        } else if (tag === "as") {
          tb = tb.as(v);
        } else if (tag === "filters") {
          for (const f of v) {
            tb = f(tb)
          }
        }
      }
      sql = tb.toSQL(true);
    }
    return sql;
  };
  var peg$f380 = function() { return true; };
  var peg$f381 = function(n) { return n; };
  var peg$f382 = function(e1, s) { return s; };
  var peg$f383 = function(e1, s1, e, s) { return s; };
  var peg$f384 = function(e1, s1, e, s) { return [e, s ?? "asc"]; };
  var peg$f385 = function(e1, s1, r) {
    return [[e1, s1 ?? "asc"], ...r];
  };
  var peg$f386 = function(limit, offset) { return [limit, offset]; };
  var peg$f387 = function(limit) { return [limit, null]; };
  var peg$f388 = function(offset, limit) { return [limit, offset]; };
  var peg$f389 = function(tb, fs) { return fs; };
  var peg$f390 = function(tb, fs) {
    if (fs != null) {
      for (const f of fs) {
        tb = f(tb);
      }
    }
    return tb;
  };
  var peg$f391 = function(rs) {
    return new TableBuilder(null, null).select(rs);
  };
  var peg$f392 = function(rs) {
    return new TableBuilder(null, null).select(rs);
  };
  var peg$f393 = function(vs) {
    return new TableBuilder(null, `(${vs})`).rawSQL(vs);
  };
  var peg$f394 = function(l) {
    return new TableBuilder(null, null).select([{ name: "value", expression: l, sort: null }]);
  };
  var peg$f395 = function(tr) {
    if (tr.table) {
      return tr.table;
    }
    return new TableBuilder(tr.name, tr.expression, tr.rename);
  };
  var peg$f396 = function(a, es) { return es.map(e => `(${e})`).join(", "); };
  var peg$f397 = function(a, vs) {
    const values = "values " + vs;
    if (a != null) {
      return `select ${a.map(c => `null as ${c}`).join(", ")} where 0 union all ${values}`;
    }
    return values;
  };
  var peg$f398 = function(a) {
    return `select ${a.map(c => `null as ${c}`).join(", ")} where 0`;
  };
  var peg$f399 = function(ess) {
    const keys = new Set();
    for (const es of ess) {
      for (const [key, _value] of es) {
        keys.add(key);
      }
    }
    const keyNames = [...keys];
    if (keyNames.length === 0) {
      return `select null where 0`;
    }
    return `select ${
      keyNames.map(c => `null as ${quoteSQLName(c)}`).join(", ")
    } where 0 union all values ${
      ess.map(es => `(${keyNames.map(
        k => {
          for (const [key, value] of es) {
            if (key === k) {
              return value;
            }
          }
          return "null";
        }
      ).join(", ")})`).join(", ")
    }`;
    return values;
  };
  var peg$f400 = function(vs) {
    return vs;
  };
  var peg$f401 = function(n, e) { return { name: n, expression: e.expression, rename: true }; };
  var peg$f402 = function(e) { return { name: e.name, expression: e.expression, table: e.table, rename: false }; };
  var peg$f403 = function(f, fs) { return [f, ...fs]; };
  var peg$f404 = function(f) { return [f]; };
  var peg$f405 = function(e) {
    return (tb) => tb.where(e);
  };
  var peg$f406 = function(e) {
    return (tb) => tb.where(e);
  };
  var peg$f407 = function(grs, rs) {
    return (tb) => tb.groupSelect(grs, [...grs, ...rs]);
  };
  var peg$f408 = function(grs) {
    return (tb) => tb.groupSelect(grs, grs);
  };
  var peg$f409 = function(grs) {
    return (tb) => tb.groupSelect([], grs);
  };
  var peg$f410 = function(rs) {
    return (tb) => tb.select(rs);
  };
  var peg$f411 = function(grs, rs) {
    return (tb) => tb.groupSelect(grs, rs);
  };
  var peg$f412 = function(rs) {
    return (tb) => tb.select(rs);
  };
  var peg$f413 = function(dw, tr, u) {
    return (tb) => tb.joinUsing(tr, u, dw);
  };
  var peg$f414 = function(dw, tr, e) { return e; };
  var peg$f415 = function(dw, tr, on) {
    return (tb) => tb.join(tr, on, dw);
  };
  var peg$f416 = function(tr) {
    return (tb) => tb.join(tr, null, "natural");
  };
  var peg$f417 = function(dw, nl, nr) { return nr; };
  var peg$f418 = function(dw, nl, nr, tr) {
    if (nr == null) {
      return (tb) => tb.joinUsing(tr, [nl], dw);
    }
    return (tb) => tb.sugarJoin(nl, nr, tr, dw);
  };
  var peg$f419 = function(w) {
    return (tb) => tb.window(w);
  };
  var peg$f420 = function(dw) { return dw; };
  var peg$f421 = function(rs) {
    return rs.flat();
  };
  var peg$f422 = function(rs) {
    return rs.flat();
  };
  var peg$f423 = function(n, e, sort) {
    return { name: n, expression: e, sort: sort };
  };
  var peg$f424 = function(n, e) {
    return { name: n, expression: e, sort: null };
  };
  var peg$f425 = function(e, sort) {
    return { name: null, expression: e, sort: sort };
  };
  var peg$f426 = function(e) {
    return { name: null, expression: e, sort: null };
  };
  var peg$f427 = function(s, t) { return `${s}.${t}.*`; };
  var peg$f428 = function(t) { return `${t}.*`; };
  var peg$f429 = function(e) {
    return { name: null, expression: e, sort: null };
  };
  var peg$f430 = function(r) { return [r]; };
  var peg$f431 = function(r) { return [r]; };
  var peg$f432 = function(rs) {
    return { name: null, expression: `(${new TableBuilder(null, null).select(rs).toSQL(true)})` };
  };
  var peg$f433 = function(t) { return { name: null, expression: `(${t.toSQL(true)})`, table: t }; };
  var peg$f434 = function(t) { return { name: null, expression: `(${t})` }; };
  var peg$f435 = function(es) { return { name: null, expression: `deserialize_values(serialize_values(${es}))` }; };
  var peg$f436 = function(t) { return { name: null, expression: `(${t})` }; };
  var peg$f437 = function(l) { return { name: null, expression: `(select ${l} as value)` } };
  var peg$f438 = function(s, m) { const n = modulePathNameToSQLName(m); return { name: n, expression: `${s}.${n}()` }; };
  var peg$f439 = function(s, m, es) { const n = modulePathNameToSQLName(m); return { name: n, expression: `${s}.${n}(${es})` }; };
  var peg$f440 = function(s, m) { const t = modulePathNameToSQLName(m); return { name: t, expression: `${s}.${t}` }; };
  var peg$f441 = function(m) { const n = modulePathNameToSQLName(m); return { name: n, expression: `${n}()` }; };
  var peg$f442 = function(m, es) { const n = modulePathNameToSQLName(m); return { name: n, expression: `${n}(${es})` }; };
  var peg$f443 = function(m) { const n = modulePathNameToSQLName(m); return { name: n, expression: n } };
  var peg$f444 = function(e, es) { return `${e}, ${es}`; };
  var peg$f445 = function(e, es) { return `${e}, ${es}`; };
  var peg$f446 = function() { return "not "; };
  var peg$f447 = function() { return "not between"; };
  var peg$f448 = function() { return "between"; };
  var peg$f449 = function() { return "and"; };
  var peg$f450 = function() { return "or"; };
  var peg$f451 = function() { return "is not"; };
  var peg$f452 = function() { return "is"; };
  var peg$f453 = function() { return "not glob"; };
  var peg$f454 = function() { return "glob"; };
  var peg$f455 = function() { return "not like"; };
  var peg$f456 = function() { return "like"; };
  var peg$f457 = function() { return "not regexp"; };
  var peg$f458 = function() { return "regexp"; };
  var peg$f459 = function() { return "not match"; };
  var peg$f460 = function() { return "match"; };
  var peg$f461 = function() { return "collate"; };
  var peg$f462 = function() { return "escape"; };
  var peg$f463 = function() { return "is not"; };
  var peg$f464 = function() { return "is"; };
  var peg$f465 = function(e, t, op, e2) { return `not in (${t}) ${op} ${e2}` };
  var peg$f466 = function(e, t) { return `not in (${t})`; };
  var peg$f467 = function(e, es, op, e2) { return `not in (${es}) ${op} ${e2}` };
  var peg$f468 = function(e, es) { return `not in (${es})`; };
  var peg$f469 = function(e, t, op, e2) { return `in (${t}) ${op} ${e2}` };
  var peg$f470 = function(e, t) { return `in (${t})`; };
  var peg$f471 = function(e, es, op, e2) { return `in (${es}) ${op} ${e2}` };
  var peg$f472 = function(e, es) { return `in (${es})`; };
  var peg$f473 = function(e, rest) { return `${e} ${rest}`; };
  var peg$f474 = function(w, el) {
    let sql = `case`;
    for (const e of w) {
      sql += e;
    }
    if (el != null) {
      sql += el;
    }
    sql += " end";
    return sql;
  };
  var peg$f475 = function(ex, w, el) {
    let sql = `case `;
    sql += ex;
    for (const e of w) {
      sql += e;
    }
    if (el != null) {
      sql += el;
    }
    sql += " end";
    return sql;
  };
  var peg$f476 = function(c, e, el) {
    return `case when ${c} then ${e}${el ?? ""} end`;
  };
  var peg$f477 = function(c, e) { return ` when ${c} then ${e}`; };
  var peg$f478 = function(e) { return ` else ${e}`; };
  var peg$f479 = function(es) { return es.join(", "); };
  var peg$f480 = function(r) {return `(${r})`};
  var peg$f481 = function(es) { return `(${es})`; };
  var peg$f482 = function(t) { return `(${t})`; };
  var peg$f483 = function(t, cnl) { return `(${cnl.map(cn => `${t}.${cn}`)})`; };
  var peg$f484 = function(v) { return `(${v})`; };
  var peg$f485 = function(op, e) { return `${op}${e}` };
  var peg$f486 = function(r1, op, r2) { return `${r1} ${op} ${r2}`; };
  var peg$f487 = function(v, op, e) { return `${op} ${e}`; };
  var peg$f488 = function(v, x) { if (x) return `${v} ${x}`; else return v; };
  var peg$f489 = function(e) { return `(${e})` };
  var peg$f490 = function(t) { return `(${t})` };
  var peg$f491 = function(t) { return `not exists (${t})` };
  var peg$f492 = function(t) { return `exists (${t})` };
  var peg$f493 = function(e, t) { return `cast(${e} as ${t})`; };
  var peg$f494 = function(n1, n2, n) { return n; };
  var peg$f495 = function(n1, n2, n3) { return n3 != null ? `.${modulePathNameToSQLName(n2)}.${n3}` : `.${modulePathNameToSQLName(n2)}`; };
  var peg$f496 = function(n1, ns) { return ns != null ? `${n1}${ns}` : n1; };
  var peg$f497 = function(b) {
    return b;
  };
  var peg$f498 = function(ps) {
    return `json_object(${ps.map(([k, e]) => {
      return `${quote(k)}, ${e}`;
    }).join(", ")})`;
  };
  var peg$f499 = function(es) {
    return `json_array(${es.join(", ")})`;
  };
  var peg$f500 = function(k, e) { return [k, e]; };
  var peg$f501 = function(n) { return [unquoteSQLName(n), n]; };
  var peg$f502 = function(e) { return [e, e]; };
  var peg$f503 = function(k, l) { return l.map(([k1, n]) => [`.${JSON.stringify(k)}${k1}`, n]); };
  var peg$f504 = function(k) { return [[`.${JSON.stringify(k)}`, k]]; };
  var peg$f505 = function(l) { return l.flat(); };
  var peg$f506 = function(l) { return l.flat(); };
  var peg$f507 = function(l) { return l; };
  var peg$f508 = function(l) { return l.map(([k, n], i) => {
    return [`[${i}]${k}`, n];
  }); };
  var peg$f509 = function(n) { return [["", unquoteSQLName(n)]]; };
  var peg$f510 = function(e) { return `(${e})`; };
  var peg$f511 = function(s, t, n) { return `${s}.${t}.${n}`; };
  var peg$f512 = function(t, n) { return `${t}.${n}`; };
  var peg$f513 = function(n) { return n; };
  var peg$f514 = function(e, ps) {
    return ps.map(([k, n]) => {
      return {
        name: quoteSQLName(n),
        expression: `${e}->>${quote(`$${k}`)}`,
        sort: null
      };
    });
  };
  var peg$f515 = function(e) { return e; };
  var peg$f516 = function(e) { return e; };
  var peg$f517 = function(w) { return `over ${w}`; };
  var peg$f518 = function(n) { return `over ${n}`; };
  var peg$f519 = function(n) { return n; };
  var peg$f520 = function(n, e1, e) { return e; };
  var peg$f521 = function(n, e1, es) { return [e1, ...es]; };
  var peg$f522 = function(n, ps, e1, e) { return e; };
  var peg$f523 = function(n, ps, e1, es) { return [e1, ...es]; };
  var peg$f524 = function(n, ps, os, f) { return f; };
  var peg$f525 = function(n, ps, os, f) {
      const a = [];
      if (n != null) a.push(n);
      if (ps != null) a.push(`partition by ${ps.join(", ")}`)
      if (os != null) a.push(`order by ${os.join(", ")}`)
      if (f != null) a.push(f);
      return "(" + a.join(" ") + ")";
    };
  var peg$f526 = function(e, n) { return n; };
  var peg$f527 = function(e, c, a) { return a; };
  var peg$f528 = function(e, c, a) { return "nulls first"; };
  var peg$f529 = function(e, c, a) { return "nulls last"; };
  var peg$f530 = function(e, c, a, n) { return n; };
  var peg$f531 = function(e, c, a, n) {
      let x = e;
      if (c != null) x += ` collate ${c}`;
      if (a != null) x += ` ${a}`;
      if (n != null) x += ` ${n}`;
      return x;
    };
  var peg$f532 = function(t) { return `unbounded preceding`; };
  var peg$f533 = function(t) { return `current row`; };
  var peg$f534 = function(t, e, pf) { return `${e} ${pf}`; };
  var peg$f535 = function(t, b1) { return `unbounded following`; };
  var peg$f536 = function(t, b1) { return `current row`; };
  var peg$f537 = function(t, b1, e, pf) { return `${e} ${pf}`; };
  var peg$f538 = function(t, b1, b2) { return `between ${b1} and ${b2}`; };
  var peg$f539 = function(t) { return `unbounded preceding`; };
  var peg$f540 = function(t, e) { return `${e} preceding`; };
  var peg$f541 = function(t) { return `current row`; };
  var peg$f542 = function(t, r) { return `exclude no others`; };
  var peg$f543 = function(t, r) { return `exclude current row`; };
  var peg$f544 = function(t, r) { return `exclude group`; };
  var peg$f545 = function(t, r) { return `exclude ties`; };
  var peg$f546 = function(t, r, x) { return x; };
  var peg$f547 = function(t, r, x) {
      const a = [t, r];
      if (x != null) a.push(x);
      return a.join(" ");
    };
  var peg$f548 = function(e, o, f) { return `${f} filter (where ${e}) ${o}`; };
  var peg$f549 = function(o, f) { return `${f} ${o}`; };
  var peg$f550 = function(o, f) { return `${f} ${o}`; };
  var peg$f551 = function(e, f) { return `${f} filter (where ${e})`; };
  var peg$f552 = function() { return `raise(ignore)`; };
  var peg$f553 = function(t, message) { return `raise(${t}, ${message})`; };
  var peg$f554 = function(m) { return `)`; };
  var peg$f555 = function(m) { return `*)`; };
  var peg$f556 = function(m, es, oc) {
      if (oc == null) return `distinct ${es})`;
      return `distinct ${es} order by ${oc.map(([v, dir]) => `${v} ${dir}`).join(", ")})`;
    };
  var peg$f557 = function(m, es, oc) {
      if (oc == null) return `${es})`;
      return `${es} order by ${oc.map(([v, dir]) => `${v} ${dir}`).join(", ")})`;
    };
  var peg$f558 = function(m, rs) { return `${modulePathNameToSQLName(m)}(${rs}`; };
  var peg$f559 = function(n1, n) { return n; };
  var peg$f560 = function(n1, ns, s1, s2) { return [n1, ...ns].join(" ") + `(${s1}, ${s2})` };
  var peg$f561 = function(n1, n) { return n; };
  var peg$f562 = function(n1, ns, s1) { return [n1, ...ns].join(" ") + `(${s1})` };
  var peg$f563 = function(n1, n) { return n; };
  var peg$f564 = function(n1, ns) { return [n1, ...ns].join(" ") };
  var peg$f565 = function(x) { return x; };
  var peg$f566 = function(f) { return f; };
  var peg$f567 = function(n, t) { return [unquoteSQLName(n), t]; };
  var peg$f568 = function(n) { return [unquoteSQLName(n), null]; };
  var peg$f569 = function(s, n) {
    if (s != null) {
      return `${s}${n}`;
    } else {
      return n;
    }
  };
  var peg$f570 = function(n) {
    return isIdentifier(n);
  };
  var peg$f571 = function(n) {
    return intoSQLIdentifier(n);
  };
  var peg$f572 = function() { return "1"; };
  var peg$f573 = function() { return "0"; };
  var peg$f574 = function() { return "null"; };
  var peg$f575 = function(e) { return e; };
  var peg$f576 = function(s) { return quote(s); };
  var peg$f577 = function(l) { return parseSQLStringLiteral(l); };
  var peg$f578 = function(e) { return parseEscapedStringBody(e); };
  var peg$f579 = function(s) { return s; };
  var peg$f580 = function() { return "''"; };
  var peg$f581 = function(s) {
    let fs = "";
    let args = "";
    for (const [f, ...a] of s) {
      fs += f;
      for (const x of a) {
        args += ", ";
        args += x;
      }
    }
    return `printf('${fs}'${args})`;
  };
  var peg$f582 = function() { return ["''"]; };
  var peg$f583 = function() { return ['"']; };
  var peg$f584 = function() { return ["\\"]; };
  var peg$f585 = function() { return ["/"]; };
  var peg$f586 = function() { return ["%c", "char(7)"]; };
  var peg$f587 = function() { return ["%c", "char(8)"]; };
  var peg$f588 = function() { return ["%c", "char(27)"]; };
  var peg$f589 = function() { return ["%c", "char(12)"]; };
  var peg$f590 = function() { return ["%c", "char(10)"]; };
  var peg$f591 = function() { return ["%c", "char(13)"];; };
  var peg$f592 = function() { return ["%c", "char(9)"]; };
  var peg$f593 = function() { return ["%c", "char(11)"]; };
  var peg$f594 = function(x) { return ["%c", `char(0x${x})`]; };
  var peg$f595 = function(x) { return ["%c", `char(0x${x})`]; };
  var peg$f596 = function(x) { return ["%c", `char(0x${x})`]; };
  var peg$f597 = function(e) { return ["%c", `char(${e})`]; };
  var peg$f598 = function(e) { return ["%s", e]; };
  var peg$f599 = function(opt, e) { return [`%${opt}`, e]; };
  var peg$f600 = function(c) { return c; };
  var peg$f601 = function() { return ["''"]; };
  var peg$f602 = function() { return ["%%"]; };
  var peg$f603 = function(s) { return [s] };
  var peg$f604 = function(s) { return s; };
  var peg$f605 = function(n) { return n.replaceAll("_", ""); };
  var peg$f606 = function(n) { return n.replaceAll("_", ""); };
  var peg$f607 = function(n) { return n.replaceAll("_", ""); };
  var peg$f608 = function(p, tag, q) { return p === q; };
  var peg$f609 = function(p, tag, c) { return { rawblock: [tag, c] }; };
  var peg$f610 = function() {
  const re = /\b/y;
  re.lastIndex = offset();
  return re.test(input);
};
  var peg$f611 = function() { return true; };
  var peg$f612 = function() { return false; };
  var peg$f613 = function() { return null; };
  var peg$f614 = function(kvs) {
    return Object.fromEntries(kvs);
  };
  var peg$f615 = function(k) { return unquoteSQLName(k); };
  var peg$f616 = function(k, v) { return [k, v]; };
  var peg$f617 = function(vs) { return vs; };
  var peg$f618 = function(s) { return JSON.parse(s); };
  var peg$f619 = function(n) { return JSON.parse(n); };
  var peg$f620 = function(xs) {
    return `json_object(${xs.map(([k, e]) => {
      return `${quote(k)}, ${e}`;
    }).join(", ")})`;
  };
  var peg$f621 = function(xs) {
    return `json_array(${xs.join(", ")})`;
  };
  var peg$f622 = function(k, e) { return [k, e]; };
  var peg$f623 = function(xs) {
    return xs;
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "start",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseStatement();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "start",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "start",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsecli_readline() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "cli_readline",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseCLICommand();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseStatement();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s6 = peg$c0;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s3;
        s3 = peg$f2(s4);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseStatement();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s6 = peg$c0;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s3;
          s3 = peg$f2(s4);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f3(s2);
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "cli_readline",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "cli_readline",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsescript() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "script",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parseStatement();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s6 = peg$c0;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseStatement();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = s4;
      } else {
        s3 = s4;
      }
    }
    s3 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s4 = peg$c0;
      peg$currPos += 2;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f4(s2);

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "script",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "script",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCLICommand() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CLICommand",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r0.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
      }
      s2 = input.substring(s2, peg$currPos);
      s3 = [];
      s4 = peg$parsespace();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsespace();
      }
      s4 = [];
      s5 = peg$currPos;
      s6 = [];
      s7 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s8 = peg$c2;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s8 !== peg$FAILED) {
        s9 = [];
        s10 = input.charAt(peg$currPos);
        if (peg$r1.test(s10)) {
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        while (s10 !== peg$FAILED) {
          s9.push(s10);
          s10 = input.charAt(peg$currPos);
          if (peg$r1.test(s10)) {
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s10 = peg$c2;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s10 !== peg$FAILED) {
          peg$savedPos = s7;
          s7 = peg$f5(s2, s9);
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      if (s7 === peg$FAILED) {
        s7 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s8 = peg$c3;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s8 !== peg$FAILED) {
          s9 = [];
          s10 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s11 = peg$c4;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s11 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s12 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s12 !== peg$FAILED) {
              peg$savedPos = s10;
              s10 = peg$f6(s2, s12);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 === peg$FAILED) {
            s10 = peg$currPos;
            s11 = input.charAt(peg$currPos);
            if (peg$r2.test(s11)) {
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s10;
              s11 = peg$f7(s2, s11);
            }
            s10 = s11;
          }
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s11 = peg$c4;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s11 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s12 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s12 !== peg$FAILED) {
                peg$savedPos = s10;
                s10 = peg$f6(s2, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 === peg$FAILED) {
              s10 = peg$currPos;
              s11 = input.charAt(peg$currPos);
              if (peg$r2.test(s11)) {
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s10;
                s11 = peg$f7(s2, s11);
              }
              s10 = s11;
            }
          }
          if (input.charCodeAt(peg$currPos) === 34) {
            s10 = peg$c3;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s10 !== peg$FAILED) {
            peg$savedPos = s7;
            s7 = peg$f8(s2, s9);
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = peg$currPos;
          s8 = peg$currPos;
          peg$silentFails++;
          s9 = peg$parsespace();
          peg$silentFails--;
          if (s9 === peg$FAILED) {
            s8 = undefined;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = input.charAt(peg$currPos);
            if (peg$r3.test(s9)) {
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f9(s2, s9);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
      }
      if (s7 !== peg$FAILED) {
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s8 = peg$c2;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = input.charAt(peg$currPos);
            if (peg$r1.test(s10)) {
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = input.charAt(peg$currPos);
              if (peg$r1.test(s10)) {
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
            }
            if (input.charCodeAt(peg$currPos) === 39) {
              s10 = peg$c2;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s10 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f5(s2, s9);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s8 = peg$c3;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s11 = peg$c4;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s11 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s12 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s12 !== peg$FAILED) {
                  peg$savedPos = s10;
                  s10 = peg$f6(s2, s12);
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = peg$currPos;
                s11 = input.charAt(peg$currPos);
                if (peg$r2.test(s11)) {
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s10;
                  s11 = peg$f7(s2, s11);
                }
                s10 = s11;
              }
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s11 = peg$c4;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s11 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s12 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s12 !== peg$FAILED) {
                    peg$savedPos = s10;
                    s10 = peg$f6(s2, s12);
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 === peg$FAILED) {
                  s10 = peg$currPos;
                  s11 = input.charAt(peg$currPos);
                  if (peg$r2.test(s11)) {
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e8); }
                  }
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s10;
                    s11 = peg$f7(s2, s11);
                  }
                  s10 = s11;
                }
              }
              if (input.charCodeAt(peg$currPos) === 34) {
                s10 = peg$c3;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s10 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f8(s2, s9);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$currPos;
              peg$silentFails++;
              s9 = peg$parsespace();
              peg$silentFails--;
              if (s9 === peg$FAILED) {
                s8 = undefined;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = input.charAt(peg$currPos);
                if (peg$r3.test(s9)) {
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s7 = peg$f9(s2, s9);
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
          }
        }
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = peg$parsespace();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parsespace();
        }
        peg$savedPos = s5;
        s5 = peg$f10(s2, s6);
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s8 = peg$c2;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s8 !== peg$FAILED) {
          s9 = [];
          s10 = input.charAt(peg$currPos);
          if (peg$r1.test(s10)) {
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = input.charAt(peg$currPos);
            if (peg$r1.test(s10)) {
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
          }
          if (input.charCodeAt(peg$currPos) === 39) {
            s10 = peg$c2;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s10 !== peg$FAILED) {
            peg$savedPos = s7;
            s7 = peg$f5(s2, s9);
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s11 = peg$c4;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s11 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s12 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s12 !== peg$FAILED) {
                peg$savedPos = s10;
                s10 = peg$f6(s2, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 === peg$FAILED) {
              s10 = peg$currPos;
              s11 = input.charAt(peg$currPos);
              if (peg$r2.test(s11)) {
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s10;
                s11 = peg$f7(s2, s11);
              }
              s10 = s11;
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s11 = peg$c4;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s11 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s12 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s12 !== peg$FAILED) {
                  peg$savedPos = s10;
                  s10 = peg$f6(s2, s12);
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = peg$currPos;
                s11 = input.charAt(peg$currPos);
                if (peg$r2.test(s11)) {
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s10;
                  s11 = peg$f7(s2, s11);
                }
                s10 = s11;
              }
            }
            if (input.charCodeAt(peg$currPos) === 34) {
              s10 = peg$c3;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s10 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f8(s2, s9);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$currPos;
            s8 = peg$currPos;
            peg$silentFails++;
            s9 = peg$parsespace();
            peg$silentFails--;
            if (s9 === peg$FAILED) {
              s8 = undefined;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s9 = input.charAt(peg$currPos);
              if (peg$r3.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f9(s2, s9);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
              s8 = peg$c2;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = input.charAt(peg$currPos);
              if (peg$r1.test(s10)) {
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = input.charAt(peg$currPos);
                if (peg$r1.test(s10)) {
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
              }
              if (input.charCodeAt(peg$currPos) === 39) {
                s10 = peg$c2;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s10 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f5(s2, s9);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s8 = peg$c3;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s11 = peg$c4;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s11 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s12 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s12 !== peg$FAILED) {
                    peg$savedPos = s10;
                    s10 = peg$f6(s2, s12);
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 === peg$FAILED) {
                  s10 = peg$currPos;
                  s11 = input.charAt(peg$currPos);
                  if (peg$r2.test(s11)) {
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e8); }
                  }
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s10;
                    s11 = peg$f7(s2, s11);
                  }
                  s10 = s11;
                }
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s11 = peg$c4;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                  }
                  if (s11 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s12 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e7); }
                    }
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s10;
                      s10 = peg$f6(s2, s12);
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  if (s10 === peg$FAILED) {
                    s10 = peg$currPos;
                    s11 = input.charAt(peg$currPos);
                    if (peg$r2.test(s11)) {
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e8); }
                    }
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s10;
                      s11 = peg$f7(s2, s11);
                    }
                    s10 = s11;
                  }
                }
                if (input.charCodeAt(peg$currPos) === 34) {
                  s10 = peg$c3;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s7 = peg$f8(s2, s9);
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$parsespace();
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = undefined;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = input.charAt(peg$currPos);
                  if (peg$r3.test(s9)) {
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s7 = peg$f9(s2, s9);
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parsespace();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parsespace();
          }
          peg$savedPos = s5;
          s5 = peg$f10(s2, s6);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f11(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CLICommand",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CLICommand",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Statement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseMetaStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c5) {
        s1 = peg$c5;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c6) {
            s3 = peg$c6;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c7) {
                s5 = peg$c7;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseStatement1();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f12(s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c5) {
          s1 = peg$c5;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseStatement1();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f13(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseIfStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseForStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseWhileStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$parseStatement1();
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Statement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Statement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseMetaStatement() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MetaStatement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseLoadRawBlock();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLoadModule();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f15(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCreateFunction();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f16(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCreateTableFromJson();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f17(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSetOutputFormat();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f18(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MetaStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MetaStatement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseIfStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IfStatement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c10;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c11) {
              s10 = peg$c11;
              peg$currPos += 4;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse__();
              if (s11 !== peg$FAILED) {
                s10 = [s10, s11];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parseBlockStatement();
            if (s10 !== peg$FAILED) {
              s11 = peg$currPos;
              s12 = peg$parse_();
              if (input.substr(peg$currPos, 4) === peg$c12) {
                s13 = peg$c12;
                peg$currPos += 4;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse__();
                if (s14 !== peg$FAILED) {
                  s15 = peg$parseBlockStatement();
                  if (s15 !== peg$FAILED) {
                    peg$savedPos = s11;
                    s11 = peg$f19(s5, s10, s15);
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f20(s5, s10, s11);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IfStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IfStatement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseForStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ForStatement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseForVarAssignments();
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c14) {
          s5 = peg$c14;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseTable();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseBlockStatement();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f21(s3, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ForStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ForStatement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWhileStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WhileStatement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c10;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseBlockStatement();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f22(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WhileStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WhileStatement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseForEachClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ForEachClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c13) {
      s2 = peg$c13;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c16) {
        s4 = peg$c16;
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c9;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseForVarAssignments();
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s10 = peg$c10;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseBlockStatement();
            if (s12 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f23(s8, s12);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ForEachClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ForEachClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseParallelClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ParallelClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 8) === peg$c17) {
      s2 = peg$c17;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c9;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseForVarAssignments();
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c10;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseBlockStatement();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f24(s6, s10);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ParallelClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ParallelClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseForVarAssignments() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ForVarAssignments",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = [];
    s1 = peg$parseForVarAssignment();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c18;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s2 = peg$parseForVarAssignment();
        if (s2 === peg$FAILED) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
      } else {
        s1 = s2;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ForVarAssignments",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ForVarAssignments",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseForVarAssignment() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ForVarAssignment",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c19;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ForVarAssignment",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ForVarAssignment",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVariable() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Variable",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s2 = peg$c20;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Variable",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Variable",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBlockStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BlockStatement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseStatement();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$currPos;
        s7 = peg$currPos;
        s8 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s9 = peg$c0;
          peg$currPos += 2;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s8 = [s8, s9, s10];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s7 = peg$parseStatement();
          if (s7 === peg$FAILED) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
        } else {
          s6 = s7;
        }
      }
      if (s5.length < 1) {
        peg$currPos = s4;
        s4 = peg$FAILED;
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s6 = peg$c0;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c10;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f27(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseStatement();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f28(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BlockStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BlockStatement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseDo() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Do",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Do",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Do",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseStatement1() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Statement1",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseAttach();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDetach();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f30(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCreate();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f31(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseAlter();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f32(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDrop();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f33(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseTruncate();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f34(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseVacuum();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f35(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePragma();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f36(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseBegin();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f37(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseSavepoint();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f38(s1);
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseRelease();
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f39(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseCommit();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f40(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseRollback();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f41(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseAnalyze();
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f42(s1);
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseReindex();
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f43(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseDo();
                                  if (s1 === peg$FAILED) {
                                    s1 = null;
                                  }
                                  s2 = peg$parseTable();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseForEachClause();
                                    if (s3 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f44(s2, s3);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseDo();
                                    if (s1 === peg$FAILED) {
                                      s1 = null;
                                    }
                                    s2 = peg$parseTable();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseParallelClause();
                                      if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f45(s2, s3);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseTriggerStatement();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseFormattingClause();
                                        if (s2 === peg$FAILED) {
                                          s2 = null;
                                        }
                                        peg$savedPos = s0;
                                        s0 = peg$f46(s1, s2);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Statement1",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Statement1",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseSetOutputFormat() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SetOutputFormat",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 6) === peg$c23) {
          s4 = peg$c23;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        peg$silentFails--;
        if (s4 !== peg$FAILED) {
          peg$currPos = s3;
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFormatClause();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f47(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SetOutputFormat",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SetOutputFormat",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFormattingClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FormattingClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 6) === peg$c24) {
      s2 = peg$c24;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDestinationClause();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseFormatClause();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f48(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 6) === peg$c24) {
        s2 = peg$c24;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFormatClause();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDestinationClause();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f49(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FormattingClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FormattingClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFormatClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FormatClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c23) {
      s3 = peg$c23;
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c25) {
      s4 = peg$c25;
      peg$currPos += 5;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parseboundary();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f50();
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 === peg$FAILED) {
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c26) {
        s4 = peg$c26;
        peg$currPos += 6;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseboundary();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f51();
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c27) {
          s4 = peg$c27;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseboundary();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f52();
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c28) {
            s4 = peg$c28;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseboundary();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f53();
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c29) {
              s4 = peg$c29;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e34); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseboundary();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNdjsonOptions();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                peg$savedPos = s3;
                s3 = peg$f54(s6);
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c30) {
                s4 = peg$c30;
                peg$currPos += 3;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e35); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseboundary();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f55();
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c31) {
                  s4 = peg$c31;
                  peg$currPos += 3;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e36); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseboundary();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseCsvOptions();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    peg$savedPos = s3;
                    s3 = peg$f56(s6);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseVega();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$f57(s4);
                  }
                  s3 = s4;
                }
              }
            }
          }
        }
      }
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f58(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FormatClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FormatClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCsvOptions() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CsvOptions",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c32) {
      s3 = peg$c32;
      peg$currPos += 4;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    s4 = [];
    s5 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c33) {
      s6 = peg$c33;
      peg$currPos += 6;
    } else {
      s6 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s6 !== peg$FAILED) {
      s7 = peg$parseboundary();
      if (s7 !== peg$FAILED) {
        peg$savedPos = s5;
        s5 = peg$f59();
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    if (s5 === peg$FAILED) {
      s5 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c34) {
        s6 = peg$c34;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        if (s7 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c33) {
            s8 = peg$c33;
            peg$currPos += 6;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parseboundary();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f60();
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c35) {
          s6 = peg$c35;
          peg$currPos += 9;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseParsedStringLiteral();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f61(s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c36) {
            s6 = peg$c36;
            peg$currPos += 5;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseParsedStringLiteral();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f62(s8);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c34) {
              s6 = peg$c34;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e39); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c36) {
                  s8 = peg$c36;
                  peg$currPos += 5;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e41); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseboundary();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s5 = peg$f63();
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c37) {
                s6 = peg$c37;
                peg$currPos += 6;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e42); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseParsedStringLiteral();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s5 = peg$f64(s8);
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c38) {
                  s6 = peg$c38;
                  peg$currPos += 8;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e43); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseParsedStringLiteral();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s5 = peg$f65(s8);
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$currPos;
      s6 = peg$currPos;
      s7 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s8 = peg$c18;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s8 !== peg$FAILED) {
        s9 = peg$parse_();
        s7 = [s7, s8, s9];
        s6 = s7;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s6 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c33) {
          s7 = peg$c33;
          peg$currPos += 6;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseboundary();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s6;
            s6 = peg$f59();
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c34) {
            s7 = peg$c34;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            if (s8 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c33) {
                s9 = peg$c33;
                peg$currPos += 6;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e38); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parseboundary();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s6 = peg$f60();
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c35) {
              s7 = peg$c35;
              peg$currPos += 9;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e40); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseParsedStringLiteral();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s6 = peg$f61(s9);
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c36) {
                s7 = peg$c36;
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e41); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseParsedStringLiteral();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s6 = peg$f62(s9);
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c34) {
                  s7 = peg$c34;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e39); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c36) {
                      s9 = peg$c36;
                      peg$currPos += 5;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e41); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseboundary();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s6 = peg$f63();
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 6) === peg$c37) {
                    s7 = peg$c37;
                    peg$currPos += 6;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e42); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseParsedStringLiteral();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s6 = peg$f64(s9);
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c38) {
                      s7 = peg$c38;
                      peg$currPos += 8;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e43); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse__();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseParsedStringLiteral();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s6;
                          s6 = peg$f65(s9);
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
        if (s6 === peg$FAILED) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
      } else {
        s5 = s6;
      }
    }
    if (s4.length < 1) {
      peg$currPos = s3;
      s3 = peg$FAILED;
    } else {
      s3 = s4;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f66(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CsvOptions",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CsvOptions",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseNdjsonOptions() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NdjsonOptions",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c32) {
      s3 = peg$c32;
      peg$currPos += 4;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    s4 = [];
    s5 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c39) {
      s6 = peg$c39;
      peg$currPos += 4;
    } else {
      s6 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s6 !== peg$FAILED) {
      s7 = peg$parse__();
      if (s7 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c40) {
          s8 = peg$c40;
          peg$currPos += 4;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f67();
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$currPos;
      s6 = peg$currPos;
      s7 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s8 = peg$c18;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s8 !== peg$FAILED) {
        s9 = peg$parse_();
        s7 = [s7, s8, s9];
        s6 = s7;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s6 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c39) {
          s7 = peg$c39;
          peg$currPos += 4;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          if (s8 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c40) {
              s9 = peg$c40;
              peg$currPos += 4;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e45); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s6;
              s6 = peg$f67();
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
      } else {
        s5 = s6;
      }
    }
    if (s4.length < 1) {
      peg$currPos = s3;
      s3 = peg$FAILED;
    } else {
      s3 = s4;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f68(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NdjsonOptions",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NdjsonOptions",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseDestinationClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DestinationClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c41) {
      s2 = peg$c41;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c42) {
          s5 = peg$c42;
          peg$currPos += 6;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseboundary();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f69();
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c43) {
            s5 = peg$c43;
            peg$currPos += 6;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseboundary();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f70();
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c44) {
              s6 = peg$c44;
              peg$currPos += 4;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e49); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseboundary();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseEscapedString();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f71(s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c44) {
                s6 = peg$c44;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e49); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseboundary();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parseParsedStringLiteral();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s4 = peg$f72(s6);
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f73(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DestinationClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DestinationClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVega() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Vega",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c46) {
          s4 = peg$c46;
          peg$currPos += 4;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c47) {
          s5 = peg$c47;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c48) {
            s5 = peg$c48;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c49) {
              s5 = peg$c49;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e54); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c50) {
                s6 = peg$c50;
                peg$currPos += 6;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e55); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c51) {
                    s9 = peg$c51;
                    peg$currPos += 5;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e56); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                peg$savedPos = s5;
                s5 = peg$f74();
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f75(s5);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c32) {
          s6 = peg$c32;
          peg$currPos += 4;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseVegaView();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f76(s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Vega",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Vega",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaView() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaView",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseVegaViewOption();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaViewOption();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaView",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaView",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaViewOption() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaViewOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseVegaRepeat();
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaFacet();
      if (s0 === peg$FAILED) {
        s0 = peg$parseVegaCompose();
        if (s0 === peg$FAILED) {
          s0 = peg$parseVegaResolve();
          if (s0 === peg$FAILED) {
            s0 = peg$parseVegaMark();
            if (s0 === peg$FAILED) {
              s0 = peg$parseVegaEncoding();
              if (s0 === peg$FAILED) {
                s0 = peg$parseVegaTransform();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseVegaProjection();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseVegaViewJsonOption();
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaViewOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaViewOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaMark() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaMark",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = peg$parseJSONObject();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f78(s3, s6);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f79(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaMark",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaMark",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaEncoding() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaEncoding",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c53;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$parseVegaEncodingChannel();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c18;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s8 = [s8, s9, s10];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s7 = peg$parseVegaEncodingChannel();
            if (s7 === peg$FAILED) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
          } else {
            s6 = s7;
          }
        }
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c18;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s8 = peg$c54;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f80(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaEncoding",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaEncoding",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaRepeat() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaRepeat",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVegaRepeatDefVars();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseVegaView();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c10;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f81(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c55) {
        s1 = peg$c55;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVegaRepeatDef();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseVegaRepeatColumns();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (input.charCodeAt(peg$currPos) === 40) {
              s6 = peg$c9;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parseVegaView();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s10 = peg$c10;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f82(s3, s5, s8);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaRepeat",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaRepeat",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaRepeatColumns() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaRepeatColumns",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseJSONNumber();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f83(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaRepeatColumns",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaRepeatColumns",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaCompose() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaCompose",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c57) {
      s1 = peg$c57;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c59) {
          s1 = peg$c59;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c60) {
            s1 = peg$c60;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e65); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$parseVegaView();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          s8 = peg$parse_();
          s9 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c0) {
            s10 = peg$c0;
            peg$currPos += 2;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          peg$silentFails--;
          if (s10 === peg$FAILED) {
            s9 = undefined;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s10 = peg$c61;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e66); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s8 = [s8, s9, s10, s11];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s7 = peg$parseVegaView();
            if (s7 === peg$FAILED) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
          } else {
            s6 = s7;
          }
        }
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s9 = peg$c0;
          peg$currPos += 2;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        peg$silentFails--;
        if (s9 === peg$FAILED) {
          s8 = undefined;
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s9 = peg$c61;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e66); }
          }
          if (s9 !== peg$FAILED) {
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c10;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f84(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c56) {
            s3 = peg$c56;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e61); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseJSONNumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 40) {
                  s7 = peg$c9;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = [];
                  s10 = peg$parseVegaView();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$currPos;
                    s11 = peg$currPos;
                    s12 = peg$parse_();
                    s13 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 2) === peg$c0) {
                      s14 = peg$c0;
                      peg$currPos += 2;
                    } else {
                      s14 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    peg$silentFails--;
                    if (s14 === peg$FAILED) {
                      s13 = undefined;
                    } else {
                      peg$currPos = s13;
                      s13 = peg$FAILED;
                    }
                    if (s13 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s14 = peg$c61;
                        peg$currPos++;
                      } else {
                        s14 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e66); }
                      }
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse_();
                        s12 = [s12, s13, s14, s15];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    if (s11 !== peg$FAILED) {
                      s11 = peg$parseVegaView();
                      if (s11 === peg$FAILED) {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      } else {
                        s10 = s11;
                      }
                    } else {
                      s10 = s11;
                    }
                  }
                  s10 = peg$currPos;
                  s11 = peg$parse_();
                  s12 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 2) === peg$c0) {
                    s13 = peg$c0;
                    peg$currPos += 2;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  peg$silentFails--;
                  if (s13 === peg$FAILED) {
                    s12 = undefined;
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                  if (s12 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s13 = peg$c61;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e66); }
                    }
                    if (s13 !== peg$FAILED) {
                      s11 = [s11, s12, s13];
                      s10 = s11;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  s11 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s12 = peg$c10;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
                  if (s12 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f85(s5, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaCompose",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaCompose",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaFacet() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaFacet",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c56) {
          s3 = peg$c56;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseJSONNumber();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s7 = peg$c53;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e58); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = peg$parseFacetFieldDef();
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s11 = peg$c54;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e59); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s13 = peg$c9;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e14); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      s15 = peg$parseVegaView();
                      if (s15 !== peg$FAILED) {
                        s16 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s17 = peg$c10;
                          peg$currPos++;
                        } else {
                          s17 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e15); }
                        }
                        if (s17 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f86(s5, s9, s15);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c53;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parseFacetAxis();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$currPos;
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c18;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s8 = peg$parseFacetAxis();
              if (s8 === peg$FAILED) {
                peg$currPos = s7;
                s7 = peg$FAILED;
              } else {
                s7 = s8;
              }
            } else {
              s7 = s8;
            }
          }
          if (s6.length < 1) {
            peg$currPos = s5;
            s5 = peg$FAILED;
          } else {
            s5 = s6;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c18;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s8 = peg$c54;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e59); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 40) {
                s10 = peg$c9;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                s12 = peg$parseVegaView();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s14 = peg$c10;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
                  if (s14 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f87(s5, s12);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaFacet",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaFacet",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFacetAxis() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FacetAxis",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c64) {
        s1 = peg$c64;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseFacetFieldDef();
        peg$savedPos = s0;
        s0 = peg$f88(s1, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FacetAxis",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FacetAxis",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFacetFieldDef() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FacetFieldDef",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseVegaField();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseVegaFieldOptions();
    s3 = peg$currPos;
    s4 = peg$parse_();
    s5 = peg$parseJSONObject();
    if (s5 !== peg$FAILED) {
      peg$savedPos = s3;
      s3 = peg$f89(s1, s2, s5);
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    peg$savedPos = s0;
    s0 = peg$f90(s1, s2, s3);

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FacetFieldDef",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FacetFieldDef",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaFieldOptions() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaFieldOptions",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parseVegaFieldOption();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaFieldOption();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f91(s2);

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaFieldOptions",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaFieldOptions",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaFieldOption() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaFieldOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseVegaMeasurementType();
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaTimeUnitOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parseVegaBinning();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaFieldOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaFieldOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaResolve() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaResolve",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c67) {
          s3 = peg$c67;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c68) {
            s3 = peg$c68;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e73); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c69) {
              s3 = peg$c69;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e74); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseName();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c70) {
                  s7 = peg$c70;
                  peg$currPos += 11;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e75); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c71) {
                    s7 = peg$c71;
                    peg$currPos += 6;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e76); }
                  }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f92(s3, s5, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaResolve",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaResolve",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaRepeatDefVars() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaRepeatDefVars",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseVegaRepeatDefVar();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 6) === peg$c55) {
        s6 = peg$c55;
        peg$currPos += 6;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaRepeatDefVar();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f93(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaRepeatDefVars",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaRepeatDefVars",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaRepeatDefVar() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaRepeatDefVar",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c64) {
        s1 = peg$c64;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c57) {
          s1 = peg$c57;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$parseVegaField();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$currPos;
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s10 = peg$c18;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s9 = [s9, s10, s11];
            s8 = s9;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s8 = peg$parseVegaField();
            if (s8 === peg$FAILED) {
              peg$currPos = s7;
              s7 = peg$FAILED;
            } else {
              s7 = s8;
            }
          } else {
            s7 = s8;
          }
        }
        if (s6.length < 1) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c18;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c10;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f94(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaRepeatDefVar",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaRepeatDefVar",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaRepeatDef() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaRepeatDef",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseVegaField();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c18;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s6 = peg$parseVegaField();
          if (s6 === peg$FAILED) {
            peg$currPos = s5;
            s5 = peg$FAILED;
          } else {
            s5 = s6;
          }
        } else {
          s5 = s6;
        }
      }
      if (s4.length < 1) {
        peg$currPos = s3;
        s3 = peg$FAILED;
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f95(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaRepeatDef",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaRepeatDef",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaViewJsonOption() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaViewJsonOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseJSONObject();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f96(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaViewJsonOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaViewJsonOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaEncodingChannel() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaEncodingChannel",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVegaDatum();
        if (s5 === peg$FAILED) {
          s5 = peg$parseVegaValueEncoding();
          if (s5 === peg$FAILED) {
            s5 = peg$parseVegaRepeatField();
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseVegaAggregatedField();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$f97(s1, s6);
              }
              s5 = s6;
              if (s5 === peg$FAILED) {
                s5 = peg$parseVegaField();
              }
            }
          }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseVegaChannelOptions();
        s7 = peg$currPos;
        s8 = peg$parse_();
        s9 = peg$parseJSONObject();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s7;
          s7 = peg$f98(s1, s5, s6, s9);
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f99(s1, s5, s6, s7);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaEncodingChannel",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaEncodingChannel",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaChannelOptions() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaChannelOptions",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parseVegaChannelOption();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaChannelOption();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f100(s2);

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaChannelOptions",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaChannelOptions",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaChannelOption() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaChannelOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseVegaMeasurementType();
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaTimeUnitOption();
      if (s0 === peg$FAILED) {
        s0 = peg$parseVegaSorting();
        if (s0 === peg$FAILED) {
          s0 = peg$parseVegaBinning();
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaChannelOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaChannelOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaMeasurementType() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaMeasurementType",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f101();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 113) {
        s1 = peg$c74;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f102();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c75) {
          s1 = peg$c75;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseboundary();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f103();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 110) {
            s1 = peg$c76;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e81); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseboundary();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f104();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c77) {
              s1 = peg$c77;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e82); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseboundary();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f105();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 111) {
                s1 = peg$c78;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e83); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseboundary();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f106();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c79) {
                  s1 = peg$c79;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e84); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseboundary();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f107();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 116) {
                    s1 = peg$c80;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e85); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseboundary();
                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f108();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c81) {
                      s1 = peg$c81;
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e86); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseboundary();
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f109();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 103) {
                        s1 = peg$c82;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e87); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseboundary();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f110();
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaMeasurementType",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaMeasurementType",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaTimeUnitOption() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaTimeUnitOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseVegaTimeUnit();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f111(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaTimeUnitOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaTimeUnitOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaTimeUnit() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaTimeUnit",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 3) === peg$c84) {
      s2 = peg$c84;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    s4 = [];
    s5 = peg$parseVegaTimeUnitComponent();
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$parseVegaTimeUnitComponent();
    }
    if (s4.length < 1) {
      peg$currPos = s3;
      s3 = peg$FAILED;
    } else {
      s3 = s4;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseboundary();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f112(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaTimeUnit",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaTimeUnit",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaTimeUnitComponent() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaTimeUnitComponent",
      location: peg$computeLocation(startPos, startPos, true)
    });

    if (input.substr(peg$currPos, 4) === peg$c85) {
      s0 = peg$c85;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c86) {
        s0 = peg$c86;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c87) {
          s0 = peg$c87;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c88) {
            s0 = peg$c88;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e93); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c89) {
              s0 = peg$c89;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e94); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c90) {
                s0 = peg$c90;
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e95); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c91) {
                  s0 = peg$c91;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e96); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c92) {
                    s0 = peg$c92;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e97); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c93) {
                      s0 = peg$c93;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e98); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c94) {
                        s0 = peg$c94;
                        peg$currPos += 7;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e99); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 12) === peg$c95) {
                          s0 = peg$c95;
                          peg$currPos += 12;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e100); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaTimeUnitComponent",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaTimeUnitComponent",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaSorting() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaSorting",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 7) === peg$c97) {
          s5 = peg$c97;
          peg$currPos += 7;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e102); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c98) {
            s5 = peg$c98;
            peg$currPos += 4;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e103); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseName();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c99) {
                s10 = peg$c99;
                peg$currPos += 3;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e104); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parseboundary();
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s9;
                  s9 = peg$f113(s7);
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              if (s9 === peg$FAILED) {
                s9 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c100) {
                  s10 = peg$c100;
                  peg$currPos += 4;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e105); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseboundary();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s9 = peg$f114(s7);
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s11 = peg$c10;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f115(s7, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c96) {
        s1 = peg$c96;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseVegaRepeatField();
          if (s5 === peg$FAILED) {
            s5 = peg$parseVegaAggregatedField();
            if (s5 === peg$FAILED) {
              s5 = peg$parseVegaField();
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c99) {
              s8 = peg$c99;
              peg$currPos += 3;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseboundary();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f116(s5);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c100) {
                s8 = peg$c100;
                peg$currPos += 4;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e105); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseboundary();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s7 = peg$f117(s5);
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c10;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f118(s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c96) {
          s1 = peg$c96;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e101); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 91) {
            s3 = peg$c101;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e106); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = [];
            s6 = peg$parseParsedStringLiteral();
            if (s6 === peg$FAILED) {
              s6 = peg$parseJSONValue();
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$currPos;
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c18;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s8 = [s8, s9, s10];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s7 = peg$parseParsedStringLiteral();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseJSONValue();
                }
                if (s7 === peg$FAILED) {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                } else {
                  s6 = s7;
                }
              } else {
                s6 = s7;
              }
            }
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c18;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (input.charCodeAt(peg$currPos) === 93) {
              s7 = peg$c102;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e107); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f119(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c99) {
            s1 = peg$c99;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseboundary();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f120();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c100) {
              s1 = peg$c100;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e105); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseboundary();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f121();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c103) {
                s1 = peg$c103;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e108); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseboundary();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f122();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaSorting",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaSorting",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaBinning() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaBinning",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f123();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c104) {
        s1 = peg$c104;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f124();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaBinning",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaBinning",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaAggregatedField() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaAggregatedField",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c105) {
      s1 = peg$c105;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s6 = peg$c106;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f125();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseVegaField();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c10;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f126(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaAggregatedField",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaAggregatedField",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaDatum() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaDatum",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c107) {
      s1 = peg$c107;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c63) {
          s5 = peg$c63;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c64) {
            s5 = peg$c64;
            peg$currPos += 6;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c57) {
              s5 = peg$c57;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e62); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c55) {
                s5 = peg$c55;
                peg$currPos += 6;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e60); }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c10;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f127(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c107) {
        s1 = peg$c107;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e112); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseParsedStringLiteral();
          if (s5 === peg$FAILED) {
            s5 = peg$parseJSONValue();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c10;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f128(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaDatum",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaDatum",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaValueEncoding() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaValueEncoding",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c108) {
      s1 = peg$c108;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseParsedStringLiteral();
        if (s5 === peg$FAILED) {
          s5 = peg$parseJSONValue();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c10;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f129(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaValueEncoding",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaValueEncoding",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaRepeatField() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaRepeatField",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c63) {
          s5 = peg$c63;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c64) {
            s5 = peg$c64;
            peg$currPos += 6;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c57) {
              s5 = peg$c57;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e62); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c55) {
                s5 = peg$c55;
                peg$currPos += 6;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e60); }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c10;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f130(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c55) {
        s1 = peg$c55;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f131();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaRepeatField",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaRepeatField",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaField() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaField",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f132(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaField",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaField",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaTransform() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaTransform",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c109) {
      s1 = peg$c109;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseVegaTransformMethod();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s6 = peg$parseVegaTransformMethod();
          if (s6 === peg$FAILED) {
            peg$currPos = s5;
            s5 = peg$FAILED;
          } else {
            s5 = s6;
          }
        }
        if (s4.length < 1) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f133(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaTransform",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaTransform",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaTransformMethod() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaTransformMethod",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseVegaPredicate();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c102;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f134(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseVegaExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c102;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e107); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f135(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c53;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = [];
          s4 = peg$parseName();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c18;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s5 = peg$parseName();
              if (s5 === peg$FAILED) {
                peg$currPos = s4;
                s4 = peg$FAILED;
              } else {
                s4 = s5;
              }
            } else {
              s4 = s5;
            }
          }
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c18;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c110) {
            s6 = peg$c110;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e115); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$currPos;
            s9 = [];
            s10 = peg$parseVegaLabeledAggregatedField();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$currPos;
              s11 = peg$currPos;
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s13 = peg$c18;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                s12 = [s12, s13, s14];
                s11 = s12;
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
              if (s11 !== peg$FAILED) {
                s11 = peg$parseVegaLabeledAggregatedField();
                if (s11 === peg$FAILED) {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                } else {
                  s10 = s11;
                }
              } else {
                s10 = s11;
              }
            }
            if (s9.length < 1) {
              peg$currPos = s8;
              s8 = peg$FAILED;
            } else {
              s8 = s9;
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$currPos;
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s11 = peg$c18;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s11 !== peg$FAILED) {
                s10 = [s10, s11];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s11 = peg$c54;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e59); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f136(s3, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c53;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e58); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseVegaCalculateField();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c18;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s6 = peg$parseVegaCalculateField();
                if (s6 === peg$FAILED) {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                } else {
                  s5 = s6;
                }
              } else {
                s5 = s6;
              }
            }
            if (s4.length < 1) {
              peg$currPos = s3;
              s3 = peg$FAILED;
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c18;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s6 = peg$c54;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e59); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f137(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c111) {
              s1 = peg$c111;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e116); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseJSONObject();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f138(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaTransformMethod",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaTransformMethod",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaPredicate() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaPredicate",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseVegaPredicate1();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c112) {
        s6 = peg$c112;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaPredicate1();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f139(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaPredicate1();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaPredicate",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaPredicate",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaPredicate1() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaPredicate1",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseVegaPredicate2();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c113) {
        s6 = peg$c113;
        peg$currPos += 3;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaPredicate2();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f140(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaPredicate2();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaPredicate1",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaPredicate1",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaPredicate2() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaPredicate2",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c114) {
      s1 = peg$c114;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVegaPredicate2();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f141(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaPredicate3();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaPredicate2",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaPredicate2",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaPredicate3() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaPredicate3",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseVegaPredicate();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f142(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c115) {
        s1 = peg$c115;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseName();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c10;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f143(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c116) {
            s3 = peg$c116;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e121); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 91) {
              s5 = peg$c101;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e106); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = [];
              s8 = peg$parseEscapedString();
              if (s8 === peg$FAILED) {
                s8 = peg$parseJSONValue();
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$currPos;
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s11 = peg$c18;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e23); }
                }
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  s10 = [s10, s11, s12];
                  s9 = s10;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  s9 = peg$parseEscapedString();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parseJSONValue();
                  }
                  if (s9 === peg$FAILED) {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  } else {
                    s8 = s9;
                  }
                } else {
                  s8 = s9;
                }
              }
              s8 = peg$currPos;
              s9 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c18;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s10 !== peg$FAILED) {
                s9 = [s9, s10];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 93) {
                s10 = peg$c102;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e107); }
              }
              if (s10 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f144(s1, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseName();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseVegaTimeUnit();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.substr(peg$currPos, 2) === peg$c116) {
                s5 = peg$c116;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e121); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 91) {
                  s7 = peg$c101;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e106); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = [];
                  s10 = peg$parseEscapedString();
                  if (s10 === peg$FAILED) {
                    s10 = peg$parseJSONValue();
                  }
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$currPos;
                    s11 = peg$currPos;
                    s12 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s13 = peg$c18;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e23); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      s12 = [s12, s13, s14];
                      s11 = s12;
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    if (s11 !== peg$FAILED) {
                      s11 = peg$parseEscapedString();
                      if (s11 === peg$FAILED) {
                        s11 = peg$parseJSONValue();
                      }
                      if (s11 === peg$FAILED) {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      } else {
                        s10 = s11;
                      }
                    } else {
                      s10 = s11;
                    }
                  }
                  s10 = peg$currPos;
                  s11 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s12 = peg$c18;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s12 !== peg$FAILED) {
                    s11 = [s11, s12];
                    s10 = s11;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  s11 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s12 = peg$c102;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e107); }
                  }
                  if (s12 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f145(s1, s3, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseName();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (input.substr(peg$currPos, 7) === peg$c117) {
                s3 = peg$c117;
                peg$currPos += 7;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e122); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseVegaValue();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (input.substr(peg$currPos, 3) === peg$c113) {
                      s7 = peg$c113;
                      peg$currPos += 3;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e118); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse__();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseVegaValue();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f146(s1, s5, s9);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseName();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseVegaTimeUnit();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (input.substr(peg$currPos, 7) === peg$c117) {
                    s5 = peg$c117;
                    peg$currPos += 7;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e122); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseVegaValue();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (input.substr(peg$currPos, 3) === peg$c113) {
                          s9 = peg$c113;
                          peg$currPos += 3;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e118); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse__();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseVegaValue();
                            if (s11 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f147(s1, s3, s7, s11);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseName();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (input.substr(peg$currPos, 2) === peg$c118) {
                    s3 = peg$c118;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e123); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c119) {
                      s3 = peg$c119;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e124); }
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parseVegaValue();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f148(s1, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseName();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parseVegaCompareOperator();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      s5 = peg$parseVegaValue();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f149(s1, s3, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseName();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      s3 = peg$parseVegaTimeUnit();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (input.substr(peg$currPos, 2) === peg$c118) {
                          s5 = peg$c118;
                          peg$currPos += 2;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e123); }
                        }
                        if (s5 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c119) {
                            s5 = peg$c119;
                            peg$currPos += 2;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e124); }
                          }
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parse_();
                          s7 = peg$parseVegaValue();
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f150(s1, s3, s7);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseName();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        s3 = peg$parseVegaTimeUnit();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          s5 = peg$parseVegaCompareOperator();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            s7 = peg$parseVegaValue();
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f151(s1, s3, s5, s7);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaPredicate3",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaPredicate3",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaLabeledAggregatedField() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaLabeledAggregatedField",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVegaAggregatedField();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f152(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaLabeledAggregatedField",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaLabeledAggregatedField",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaCalculateField() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaCalculateField",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVegaExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f153(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaCalculateField",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaCalculateField",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaCompareOperator() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaCompareOperator",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f154();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c120) {
        s1 = peg$c120;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f155();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c121) {
          s1 = peg$c121;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e126); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f156();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 60) {
            s1 = peg$c122;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e127); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f157();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s1 = peg$c123;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e128); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f158();
            }
            s0 = s1;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaCompareOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaCompareOperator",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaValue() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaValue",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseEscapedString();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseVegaExpressionBinOp();
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f159(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseJSONValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseVegaExpressionBinOp();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        peg$silentFails--;
        if (s3 !== peg$FAILED) {
          peg$currPos = s2;
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f160(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseVegaExpression3();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f161(s1);
        }
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaValue",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpression",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseVegaExpression0();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c112) {
        s6 = peg$c112;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e117); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaExpression0();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f162(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaExpression0();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpression",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpression0() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpression0",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseVegaExpression1();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c113) {
        s6 = peg$c113;
        peg$currPos += 3;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseVegaExpression1();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f163(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaExpression1();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpression0",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpression0",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpression1() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpression1",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c114) {
      s1 = peg$c114;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVegaExpression2();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f164(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaExpression2();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpression1",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpression1",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpression2() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpression2",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseVegaExpression3();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 7) === peg$c117) {
        s3 = peg$c117;
        peg$currPos += 7;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseVegaExpression3();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.substr(peg$currPos, 3) === peg$c113) {
              s7 = peg$c113;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e118); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseVegaExpression3();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f165(s1, s5, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaExpression3();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpression2",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpression2",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpression3() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpression3",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseVegaExpression4();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseVegaExpressionBinOp();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVegaExpression3();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f166(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaExpression4();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpression3",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpression3",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpressionBinOp() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpressionBinOp",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c124) {
      s1 = peg$c124;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f167();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c119) {
        s1 = peg$c119;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e124); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f168();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c125) {
          s0 = peg$c125;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e130); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c126) {
            s0 = peg$c126;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c121) {
              s0 = peg$c121;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e126); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c120) {
                s0 = peg$c120;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e125); }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c118) {
                  s1 = peg$c118;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e123); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f169();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s1 = peg$c19;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e24); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f170();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c127) {
                      s1 = peg$c127;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e132); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f171();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = input.charAt(peg$currPos);
                      if (peg$r4.test(s0)) {
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e133); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpressionBinOp",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpressionBinOp",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpression4() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpression4",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c128) {
      s2 = peg$c128;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c129) {
        s2 = peg$c129;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r5.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseVegaExpressionValue();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f172(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseVegaExpressionValue();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpression4",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpression4",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaExpressionValue() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaExpressionValue",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseVegaExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f173(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r7.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e138); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r7.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e138); }
          }
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = [];
          s6 = peg$parseVegaExpression();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$currPos;
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c18;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s7 = peg$parseVegaExpression();
              if (s7 === peg$FAILED) {
                peg$currPos = s6;
                s6 = peg$FAILED;
              } else {
                s6 = s7;
              }
            } else {
              s6 = s7;
            }
          }
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c10;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f174(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c107) {
          s1 = peg$c107;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e112); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseName();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f175(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c130) {
            s1 = peg$c130;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e139); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseName();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f176(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseParsedStringLiteral();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f177(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseJSONValue();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f178(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$parseVegaConstant();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseName();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f179(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaExpressionValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaExpressionValue",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaConstant() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaConstant",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c131) {
      s1 = peg$c131;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f180();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 69) {
        s1 = peg$c132;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f181();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c133) {
          s1 = peg$c133;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e142); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseboundary();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f182();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c134) {
            s1 = peg$c134;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e143); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseboundary();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f183();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c135) {
              s1 = peg$c135;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e144); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseboundary();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f184();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 9) === peg$c136) {
                s1 = peg$c136;
                peg$currPos += 9;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e145); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseboundary();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f185();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9) === peg$c137) {
                  s1 = peg$c137;
                  peg$currPos += 9;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e146); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseboundary();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f186();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c138) {
                    s1 = peg$c138;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e147); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseboundary();
                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f187();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c139) {
                      s1 = peg$c139;
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e148); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseboundary();
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f188();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 5) === peg$c140) {
                        s1 = peg$c140;
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e149); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseboundary();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f189();
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaConstant",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaConstant",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVegaProjection() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VegaProjection",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c141) {
      s1 = peg$c141;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseJSONObject();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f190(s3, s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f191(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VegaProjection",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VegaProjection",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTriggerStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TriggerStatement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseInsert();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseReturningClause();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f192(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDelete();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseReturningClause();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f193(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUpdate();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseReturningClause();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f194(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDo();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          s2 = peg$parseTable();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f195(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TriggerStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TriggerStatement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBegin() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Begin",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c142) {
      s1 = peg$c142;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 8) === peg$c143) {
          s5 = peg$c143;
          peg$currPos += 8;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e152); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c144) {
            s5 = peg$c144;
            peg$currPos += 9;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e153); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c145) {
              s5 = peg$c145;
              peg$currPos += 9;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e154); }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f196(s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f197(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Begin",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Begin",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCommit() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Commit",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c146) {
      s2 = peg$c146;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseboundary();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f198();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Commit",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Commit",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseSavepoint() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Savepoint",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 9) === peg$c147) {
      s2 = peg$c147;
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f199(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Savepoint",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Savepoint",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRelease() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Release",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 7) === peg$c148) {
      s2 = peg$c148;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f200(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Release",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Release",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRollback() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Rollback",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 8) === peg$c149) {
      s2 = peg$c149;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseboundary();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c41) {
          s6 = peg$c41;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseboundary();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseName();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f201(s8);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f202(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Rollback",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Rollback",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseAnalyze() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Analyze",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 7) === peg$c150) {
      s2 = peg$c150;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c1;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseName();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f203(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDo();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 7) === peg$c150) {
        s2 = peg$c150;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e159); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseName();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f204(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDo();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (input.substr(peg$currPos, 7) === peg$c150) {
          s2 = peg$c150;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e159); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseboundary();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f205();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Analyze",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Analyze",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseLoadModule() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LoadModule",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 4) === peg$c151) {
      s2 = peg$c151;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c152) {
          s4 = peg$c152;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e161); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseModulePathName();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parse_();
              if (input.substr(peg$currPos, 2) === peg$c153) {
                s9 = peg$c153;
                peg$currPos += 2;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e162); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseName();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s7 = peg$f206(s6, s11);
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f207(s6, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LoadModule",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LoadModule",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseModulePathName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModulePathName",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseName();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c154) {
        s6 = peg$c154;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e163); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f208(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModulePathName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModulePathName",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseLoadRawBlock() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LoadRawBlock",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 4) === peg$c151) {
      s2 = peg$c151;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c155) {
          s4 = peg$c155;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e164); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseboundary();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (input.substr(peg$currPos, 2) === peg$c8) {
              s8 = peg$c8;
              peg$currPos += 2;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              if (s9 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c114) {
                  s10 = peg$c114;
                  peg$currPos += 3;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e119); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse__();
                  if (s11 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c156) {
                      s12 = peg$c156;
                      peg$currPos += 6;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e165); }
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseboundary();
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s6 = peg$f209();
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parse_();
            s8 = peg$parseTableNameWithVariable();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s11 = peg$c9;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseTableDef();
                if (s13 !== peg$FAILED) {
                  s14 = peg$currPos;
                  s15 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s16 = peg$c18;
                    peg$currPos++;
                  } else {
                    s16 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s16 !== peg$FAILED) {
                    s15 = [s15, s16];
                    s14 = s15;
                  } else {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  }
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  s15 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s16 = peg$c10;
                    peg$currPos++;
                  } else {
                    s16 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
                  if (s16 !== peg$FAILED) {
                    s17 = peg$parse_();
                    peg$savedPos = s10;
                    s10 = peg$f210(s6, s8, s13);
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.substr(peg$currPos, 4) === peg$c157) {
                s11 = peg$c157;
                peg$currPos += 4;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e166); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse__();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parseRawBlock();
                  if (s13 === peg$FAILED) {
                    s13 = peg$currPos;
                    s14 = peg$parseEscapedString();
                    if (s14 !== peg$FAILED) {
                      peg$savedPos = s13;
                      s14 = peg$f211(s6, s8, s10, s14);
                    }
                    s13 = s14;
                    if (s13 === peg$FAILED) {
                      s13 = peg$parseParsedStringLiteral();
                      if (s13 === peg$FAILED) {
                        s13 = peg$currPos;
                        s14 = peg$parseVariable();
                        if (s14 !== peg$FAILED) {
                          peg$savedPos = s13;
                          s14 = peg$f212(s6, s8, s10, s14);
                        }
                        s13 = s14;
                        if (s13 === peg$FAILED) {
                          s13 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s14 = peg$c9;
                            peg$currPos++;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e14); }
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parseExpression();
                            if (s15 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s16 = peg$c10;
                                peg$currPos++;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e15); }
                              }
                              if (s16 !== peg$FAILED) {
                                peg$savedPos = s13;
                                s13 = peg$f213(s6, s8, s10, s15);
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$currPos;
                    s15 = peg$parse_();
                    s16 = peg$parseLoadOption();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$currPos;
                      s19 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s20 = peg$c18;
                        peg$currPos++;
                      } else {
                        s20 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e23); }
                      }
                      if (s20 !== peg$FAILED) {
                        s21 = peg$parse_();
                        s22 = peg$parseLoadOption();
                        if (s22 !== peg$FAILED) {
                          peg$savedPos = s18;
                          s18 = peg$f214(s6, s8, s10, s13, s16, s22);
                        } else {
                          peg$currPos = s18;
                          s18 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s18;
                        s18 = peg$FAILED;
                      }
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$currPos;
                        s19 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s20 = peg$c18;
                          peg$currPos++;
                        } else {
                          s20 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e23); }
                        }
                        if (s20 !== peg$FAILED) {
                          s21 = peg$parse_();
                          s22 = peg$parseLoadOption();
                          if (s22 !== peg$FAILED) {
                            peg$savedPos = s18;
                            s18 = peg$f214(s6, s8, s10, s13, s16, s22);
                          } else {
                            peg$currPos = s18;
                            s18 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s18;
                          s18 = peg$FAILED;
                        }
                      }
                      peg$savedPos = s14;
                      s14 = peg$f215(s6, s8, s10, s13, s16, s17);
                    } else {
                      peg$currPos = s14;
                      s14 = peg$FAILED;
                    }
                    if (s14 === peg$FAILED) {
                      s14 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f216(s6, s8, s10, s13, s14);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LoadRawBlock",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LoadRawBlock",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseLoadOption() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LoadOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseParsedStringLiteral();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f217(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c33) {
        s1 = peg$c33;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f218();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c34) {
          s1 = peg$c34;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c33) {
              s3 = peg$c33;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseboundary();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f219();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c35) {
            s1 = peg$c35;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseParsedStringLiteral();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f220(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c36) {
              s1 = peg$c36;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e41); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseParsedStringLiteral();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f221(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c34) {
                s1 = peg$c34;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e39); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c36) {
                    s3 = peg$c36;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e41); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseboundary();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f222();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c37) {
                  s1 = peg$c37;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e42); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseParsedStringLiteral();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f223(s3);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 7) === peg$c158) {
                    s1 = peg$c158;
                    peg$currPos += 7;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e167); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseParsedStringLiteral();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f224(s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c38) {
                      s1 = peg$c38;
                      peg$currPos += 8;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e43); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse__();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseParsedStringLiteral();
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f225(s3);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 5) === peg$c159) {
                        s1 = peg$c159;
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e168); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse__();
                        if (s2 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c64) {
                            s3 = peg$c64;
                            peg$currPos += 6;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e69); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse__();
                            if (s4 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c105) {
                                s5 = peg$c105;
                                peg$currPos += 5;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e110); }
                              }
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parse__();
                                if (s6 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c160) {
                                    s7 = peg$c160;
                                    peg$currPos += 4;
                                  } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e169); }
                                  }
                                  if (s7 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c161) {
                                      s7 = peg$c161;
                                      peg$currPos += 4;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e170); }
                                    }
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parseboundary();
                                    if (s8 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f226(s7);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 5) === peg$c159) {
                          s1 = peg$c159;
                          peg$currPos += 5;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e168); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse__();
                          if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c64) {
                              s3 = peg$c64;
                              peg$currPos += 6;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e69); }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parse__();
                              if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c105) {
                                  s5 = peg$c105;
                                  peg$currPos += 5;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e110); }
                                }
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parseboundary();
                                  if (s6 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f227();
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 5) === peg$c162) {
                            s1 = peg$c162;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e171); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parse__();
                            if (s2 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c163) {
                                s3 = peg$c163;
                                peg$currPos += 4;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e172); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parse__();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseJSONNumber();
                                  if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f228(s5);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 4) === peg$c164) {
                              s1 = peg$c164;
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e173); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parse__();
                              if (s2 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c165) {
                                  s3 = peg$c165;
                                  peg$currPos += 5;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e174); }
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parse__();
                                  if (s4 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c166) {
                                      s5 = peg$c166;
                                      peg$currPos += 5;
                                    } else {
                                      s5 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e175); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parseboundary();
                                      if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f229();
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 4) === peg$c167) {
                                s1 = peg$c167;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e176); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseboundary();
                                if (s2 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f230();
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 4) === peg$c168) {
                                  s1 = peg$c168;
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e177); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseboundary();
                                  if (s2 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f231();
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 2) === peg$c34) {
                                    s1 = peg$c34;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e39); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parse__();
                                    if (s2 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 4) === peg$c168) {
                                        s3 = peg$c168;
                                        peg$currPos += 4;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e177); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseboundary();
                                        if (s4 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f232();
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$currPos;
                                    if (input.substr(peg$currPos, 6) === peg$c23) {
                                      s2 = peg$c23;
                                      peg$currPos += 6;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parse__();
                                      if (s3 !== peg$FAILED) {
                                        s2 = [s2, s3];
                                        s1 = s2;
                                      } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s1;
                                      s1 = peg$FAILED;
                                    }
                                    if (s1 === peg$FAILED) {
                                      s1 = null;
                                    }
                                    if (input.substr(peg$currPos, 3) === peg$c31) {
                                      s2 = peg$c31;
                                      peg$currPos += 3;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e36); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c29) {
                                        s2 = peg$c29;
                                        peg$currPos += 6;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e34); }
                                      }
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseboundary();
                                      if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f233(s2);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LoadOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LoadOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCreateFunction() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CreateFunction",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c169) {
      s2 = peg$c169;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c155) {
          s5 = peg$c155;
          peg$currPos += 5;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e164); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f234();
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.substr(peg$currPos, 8) === peg$c170) {
          s5 = peg$c170;
          peg$currPos += 8;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e179); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseName();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseFunctionParams();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parseFunctionOptions();
                s12 = peg$parse_();
                if (input.substr(peg$currPos, 2) === peg$c153) {
                  s13 = peg$c153;
                  peg$currPos += 2;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e162); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse__();
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parseRawBlock();
                    if (s15 === peg$FAILED) {
                      s15 = peg$parseParsedStringLiteral();
                    }
                    if (s15 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f235(s4, s7, s9, s11, s15);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CreateFunction",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CreateFunction",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFunctionOptions() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionOptions",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseFunctionOption();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s4 = [s4, s5, s6];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parseFunctionOption();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f236(s1);
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionOptions",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionOptions",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFunctionOption() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c171) {
      s1 = peg$c171;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f237(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c172) {
        s1 = peg$c172;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTypeName();
          if (s3 === peg$FAILED) {
            s3 = peg$parseRowType();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f238(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCreateTableFromJson() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CreateTableFromJson",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c169) {
      s2 = peg$c169;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c155) {
          s4 = peg$c155;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e164); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c8) {
              s7 = peg$c8;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c114) {
                  s9 = peg$c114;
                  peg$currPos += 3;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e119); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c156) {
                      s11 = peg$c156;
                      peg$currPos += 6;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e165); }
                    }
                    if (s11 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9, s10, s11];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseTableNameWithVariable();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s10 = peg$c9;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                s12 = peg$parseTableDef();
                if (s12 !== peg$FAILED) {
                  s13 = peg$currPos;
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s15 = peg$c18;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s15 !== peg$FAILED) {
                    s14 = [s14, s15];
                    s13 = s14;
                  } else {
                    peg$currPos = s13;
                    s13 = peg$FAILED;
                  }
                  if (s13 === peg$FAILED) {
                    s13 = null;
                  }
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s15 = peg$c10;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    peg$savedPos = s9;
                    s9 = peg$f239(s5, s7, s12);
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s10 = peg$parseboundary();
              if (s10 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c157) {
                  s11 = peg$c157;
                  peg$currPos += 4;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e166); }
                }
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse__();
                  if (s12 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c173) {
                      s13 = peg$c173;
                      peg$currPos += 4;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e182); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s15 = peg$c9;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e14); }
                      }
                      if (s15 !== peg$FAILED) {
                        s16 = peg$parse_();
                        s17 = peg$parseTable();
                        if (s17 !== peg$FAILED) {
                          s18 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s19 = peg$c10;
                            peg$currPos++;
                          } else {
                            s19 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e15); }
                          }
                          if (s19 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f240(s5, s7, s9, s17);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CreateTableFromJson",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CreateTableFromJson",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFunctionParams() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionParams",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f241();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseFunctionParam();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c18;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s6 = peg$parseFunctionParam();
            if (s6 === peg$FAILED) {
              peg$currPos = s5;
              s5 = peg$FAILED;
            } else {
              s5 = s6;
            }
          } else {
            s5 = s6;
          }
        }
        if (s4.length < 1) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c18;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c10;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f242(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionParams",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionParams",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFunctionParam() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionParam",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseTypeName();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f243(s1, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f244(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionParam",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionParam",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableDef() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableDef",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseColumnDef();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseColumnDef();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseConflictClause();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c110) {
        s6 = peg$c110;
        peg$currPos += 2;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = [];
        s9 = peg$parseColumnDef();
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$currPos;
          s10 = peg$currPos;
          s11 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s12 = peg$c18;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s11 = [s11, s12, s13];
            s10 = s11;
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s10 = peg$parseColumnDef();
            if (s10 === peg$FAILED) {
              peg$currPos = s9;
              s9 = peg$FAILED;
            } else {
              s9 = s10;
            }
          } else {
            s9 = s10;
          }
        }
        peg$savedPos = s2;
        s2 = peg$f245(s1, s3, s8);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parseTableConstraint();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f246(s1, s2, s8);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseTableConstraint();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f246(s1, s2, s8);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f247(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableDef",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableDef",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseColumnDef() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ColumnDef",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c174) {
      s3 = peg$c174;
      peg$currPos += 7;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c175) {
          s5 = peg$c175;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e184); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c176) {
        s2 = peg$c176;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e185); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c177) {
          s2 = peg$c177;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e186); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c178) {
            s3 = peg$c178;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e187); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c175) {
                s5 = peg$c175;
                peg$currPos += 3;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e184); }
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseName();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseTypeName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f248(s2, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$parseColumnConstraint();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f249(s2, s3, s7);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parseColumnConstraint();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f249(s2, s3, s7);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f250(s2, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ColumnDef",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ColumnDef",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseColumnConstraint() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ColumnConstraint",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c179) {
      s2 = peg$c179;
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s1 = peg$f251(s4);
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseColumnConstraintBody();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f252(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ColumnConstraint",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ColumnConstraint",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseColumnConstraintBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ColumnConstraintBody",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c174) {
      s1 = peg$c174;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c175) {
          s3 = peg$c175;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e184); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c99) {
              s6 = peg$c99;
              peg$currPos += 3;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c100) {
                s6 = peg$c100;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e105); }
              }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f253(s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseboundary();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseConflictClause();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$currPos;
            s8 = peg$parse_();
            if (input.substr(peg$currPos, 4) === peg$c180) {
              s9 = peg$c180;
              peg$currPos += 4;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e189); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.substr(peg$currPos, 9) === peg$c181) {
                s11 = peg$c181;
                peg$currPos += 9;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e190); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parseboundary();
                if (s12 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s7 = peg$f254(s4, s6);
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f255(s4, s6, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c114) {
        s1 = peg$c114;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c40) {
            s3 = peg$c40;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e45); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseboundary();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseConflictClause();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f256(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c176) {
          s1 = peg$c176;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e185); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseboundary();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseConflictClause();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f257(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c177) {
            s1 = peg$c177;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e186); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c9;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c10;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f258(s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c182) {
              s1 = peg$c182;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e191); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                  s4 = peg$c9;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  s6 = peg$parseExpression();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c10;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e15); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s3 = peg$f259(s6);
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parseLiteral();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCurrent();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseSignedNumber();
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f260(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c183) {
                s1 = peg$c183;
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e192); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseName();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f261(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c153) {
                  s1 = peg$c153;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e162); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c9;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e14); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parseExpression();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s7 = peg$c10;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e15); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$currPos;
                        s9 = peg$parse__();
                        if (s9 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c184) {
                            s10 = peg$c184;
                            peg$currPos += 6;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e193); }
                          }
                          if (s10 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c185) {
                              s10 = peg$c185;
                              peg$currPos += 7;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e194); }
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s8;
                            s8 = peg$f262(s5, s10);
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f263(s5, s8);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ColumnConstraintBody",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ColumnConstraintBody",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCurrent() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Current",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c186) {
      s1 = peg$c186;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f264();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c187) {
        s1 = peg$c187;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e196); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f265();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12) === peg$c188) {
          s1 = peg$c188;
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e197); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseboundary();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f266();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Current",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Current",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableConstraint() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableConstraint",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c179) {
      s2 = peg$c179;
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseName();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f267(s3);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseTableConstraintBody();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f268(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableConstraint",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableConstraint",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableConstraintBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableConstraintBody",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c174) {
      s2 = peg$c174;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c175) {
          s4 = peg$c175;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e184); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s1 = peg$f269();
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c176) {
        s1 = peg$c176;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e185); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseColumnNameList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseConflictClause();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f270(s1, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c177) {
        s1 = peg$c177;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e186); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c10;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f271(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableConstraintBody",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableConstraintBody",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseConflictClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ConflictClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c189) {
      s2 = peg$c189;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c190) {
          s4 = peg$c190;
          peg$currPos += 8;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e199); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c149) {
              s6 = peg$c149;
              peg$currPos += 8;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e158); }
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c191) {
                s6 = peg$c191;
                peg$currPos += 5;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e200); }
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c192) {
                  s6 = peg$c192;
                  peg$currPos += 4;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e201); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c193) {
                    s6 = peg$c193;
                    peg$currPos += 6;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e202); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c194) {
                      s6 = peg$c194;
                      peg$currPos += 7;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e203); }
                    }
                  }
                }
              }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f272(s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ConflictClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ConflictClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseAttach() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Attach",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c195) {
      s2 = peg$c195;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c153) {
            s6 = peg$c153;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e162); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseName();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f273(s4, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Attach",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Attach",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseDetach() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Detach",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c196) {
      s2 = peg$c196;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f274(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Detach",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Detach",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCreate() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Create",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c169) {
      s2 = peg$c169;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c197) {
          s4 = peg$c197;
          peg$currPos += 9;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e206); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c155) {
              s6 = peg$c155;
              peg$currPos += 5;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e164); }
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c198) {
                s6 = peg$c198;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e207); }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseboundary();
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parse_();
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s10 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse__();
                  if (s11 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c114) {
                      s12 = peg$c114;
                      peg$currPos += 3;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e119); }
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c156) {
                          s14 = peg$c156;
                          peg$currPos += 6;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e165); }
                        }
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parseboundary();
                          if (s15 !== peg$FAILED) {
                            s9 = [s9, s10, s11, s12, s13, s14, s15];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parse_();
                s10 = peg$parseName();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  s12 = peg$parseboundary();
                  if (s12 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c153) {
                      s13 = peg$c153;
                      peg$currPos += 2;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e162); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse__();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parseTable();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f275(s6, s8, s10, s15);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c169) {
        s1 = peg$c169;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e178); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c155) {
            s3 = peg$c155;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e164); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c198) {
              s3 = peg$c198;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e207); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseboundary();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (input.substr(peg$currPos, 2) === peg$c8) {
                s7 = peg$c8;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c114) {
                    s9 = peg$c114;
                    peg$currPos += 3;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e119); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse__();
                    if (s10 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c156) {
                        s11 = peg$c156;
                        peg$currPos += 6;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e165); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseboundary();
                        if (s12 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9, s10, s11, s12];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parse_();
              s7 = peg$parseTableName();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (input.substr(peg$currPos, 2) === peg$c153) {
                  s9 = peg$c153;
                  peg$currPos += 2;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e162); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseTable();
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f276(s3, s5, s7, s11);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDo();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (input.substr(peg$currPos, 6) === peg$c169) {
          s2 = peg$c169;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e178); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseboundary();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse_();
            if (input.substr(peg$currPos, 6) === peg$c176) {
              s6 = peg$c176;
              peg$currPos += 6;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e185); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseboundary();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s4;
                s4 = peg$f277();
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c199) {
              s6 = peg$c199;
              peg$currPos += 5;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e208); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseboundary();
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parse_();
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s10 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse__();
                  if (s11 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c114) {
                      s12 = peg$c114;
                      peg$currPos += 3;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e119); }
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c156) {
                          s14 = peg$c156;
                          peg$currPos += 6;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e165); }
                        }
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parseboundary();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s8;
                            s8 = peg$f278(s4);
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parse_();
                s10 = peg$parseTableName();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (input.substr(peg$currPos, 2) === peg$c189) {
                    s12 = peg$c189;
                    peg$currPos += 2;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e198); }
                  }
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parse__();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parseName();
                      if (s14 !== peg$FAILED) {
                        s15 = peg$currPos;
                        s16 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 91) {
                          s17 = peg$c101;
                          peg$currPos++;
                        } else {
                          s17 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e106); }
                        }
                        if (s17 !== peg$FAILED) {
                          s18 = peg$parse_();
                          s19 = peg$parseExpression();
                          if (s19 !== peg$FAILED) {
                            s20 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 93) {
                              s21 = peg$c102;
                              peg$currPos++;
                            } else {
                              s21 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e107); }
                            }
                            if (s21 !== peg$FAILED) {
                              peg$savedPos = s15;
                              s15 = peg$f279(s4, s8, s10, s14, s19);
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s15;
                            s15 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s15;
                          s15 = peg$FAILED;
                        }
                        if (s15 === peg$FAILED) {
                          s15 = null;
                        }
                        s16 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s17 = peg$c9;
                          peg$currPos++;
                        } else {
                          s17 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e14); }
                        }
                        if (s17 !== peg$FAILED) {
                          s18 = peg$parse_();
                          s19 = peg$parseIndexedColumns();
                          if (s19 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s20 = peg$c10;
                              peg$currPos++;
                            } else {
                              s20 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e15); }
                            }
                            if (s20 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f280(s4, s8, s10, s14, s15, s19);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c169) {
            s1 = peg$c169;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e178); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c185) {
                s3 = peg$c185;
                peg$currPos += 7;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e194); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c155) {
                    s5 = peg$c155;
                    peg$currPos += 5;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e164); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseTableName();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        s9 = peg$parseboundary();
                        if (s9 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c200) {
                            s10 = peg$c200;
                            peg$currPos += 5;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e209); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse__();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parseName();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s14 = peg$c9;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$currPos;
                                  s16 = peg$parseModuleArguments();
                                  if (s16 !== peg$FAILED) {
                                    s15 = input.substring(s15, peg$currPos);
                                  } else {
                                    s15 = s16;
                                  }
                                  if (s15 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s16 = peg$c10;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f281(s7, s12, s15);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDo();
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (input.substr(peg$currPos, 6) === peg$c169) {
              s2 = peg$c169;
              peg$currPos += 6;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e178); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c155) {
                  s4 = peg$c155;
                  peg$currPos += 5;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e164); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseboundary();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse_();
                    if (input.substr(peg$currPos, 2) === peg$c8) {
                      s8 = peg$c8;
                      peg$currPos += 2;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e13); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();
                      if (s9 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c114) {
                          s10 = peg$c114;
                          peg$currPos += 3;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e119); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parse__();
                          if (s11 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c156) {
                              s12 = peg$c156;
                              peg$currPos += 6;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e165); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseboundary();
                              if (s13 !== peg$FAILED) {
                                s7 = [s7, s8, s9, s10, s11, s12, s13];
                                s6 = s7;
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    s7 = peg$parse_();
                    s8 = peg$parseTableName();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s10 = peg$c9;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e14); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        s12 = peg$parseTableDef();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$currPos;
                          s14 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s15 = peg$c18;
                            peg$currPos++;
                          } else {
                            s15 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e23); }
                          }
                          if (s15 !== peg$FAILED) {
                            s14 = [s14, s15];
                            s13 = s14;
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                          if (s13 === peg$FAILED) {
                            s13 = null;
                          }
                          s14 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s15 = peg$c10;
                            peg$currPos++;
                          } else {
                            s15 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e15); }
                          }
                          if (s15 !== peg$FAILED) {
                            s16 = peg$parseTableOptions();
                            if (s16 === peg$FAILED) {
                              s16 = null;
                            }
                            peg$savedPos = s0;
                            s0 = peg$f282(s6, s8, s12, s16);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDo();
              if (s1 === peg$FAILED) {
                s1 = null;
              }
              if (input.substr(peg$currPos, 6) === peg$c169) {
                s2 = peg$c169;
                peg$currPos += 6;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e178); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c197) {
                    s5 = peg$c197;
                    peg$currPos += 9;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e206); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f283();
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c201) {
                    s5 = peg$c201;
                    peg$currPos += 7;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e210); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseboundary();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$currPos;
                      s8 = peg$parse_();
                      if (input.substr(peg$currPos, 2) === peg$c8) {
                        s9 = peg$c8;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e13); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse__();
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c114) {
                            s11 = peg$c114;
                            peg$currPos += 3;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e119); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse__();
                            if (s12 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c156) {
                                s13 = peg$c156;
                                peg$currPos += 6;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e165); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseboundary();
                                if (s14 !== peg$FAILED) {
                                  peg$savedPos = s7;
                                  s7 = peg$f284(s3);
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = null;
                      }
                      s8 = peg$parse_();
                      s9 = peg$parseTableName();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (input.substr(peg$currPos, 6) === peg$c202) {
                          s11 = peg$c202;
                          peg$currPos += 6;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e211); }
                        }
                        if (s11 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c203) {
                            s11 = peg$c203;
                            peg$currPos += 5;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e212); }
                          }
                          if (s11 === peg$FAILED) {
                            s11 = peg$currPos;
                            if (input.substr(peg$currPos, 7) === peg$c204) {
                              s12 = peg$c204;
                              peg$currPos += 7;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e213); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parse__();
                              if (s13 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c14) {
                                  s14 = peg$c14;
                                  peg$currPos += 2;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e19); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parseboundary();
                                  if (s15 !== peg$FAILED) {
                                    peg$savedPos = s11;
                                    s11 = peg$f285(s3, s7, s9);
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (input.substr(peg$currPos, 6) === peg$c205) {
                            s13 = peg$c205;
                            peg$currPos += 6;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e214); }
                          }
                          if (s13 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c206) {
                              s13 = peg$c206;
                              peg$currPos += 6;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e215); }
                            }
                            if (s13 === peg$FAILED) {
                              s13 = peg$currPos;
                              if (input.substr(peg$currPos, 6) === peg$c207) {
                                s14 = peg$c207;
                                peg$currPos += 6;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e216); }
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parse__();
                                if (s15 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c14) {
                                    s16 = peg$c14;
                                    peg$currPos += 2;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e19); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parse__();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseNameList();
                                      if (s18 !== peg$FAILED) {
                                        peg$savedPos = s13;
                                        s13 = peg$f286(s3, s7, s9, s11, s18);
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                            }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parse_();
                            if (input.substr(peg$currPos, 2) === peg$c189) {
                              s15 = peg$c189;
                              peg$currPos += 2;
                            } else {
                              s15 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e198); }
                            }
                            if (s15 !== peg$FAILED) {
                              s16 = peg$parse__();
                              if (s16 !== peg$FAILED) {
                                s17 = peg$parseTableName();
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$currPos;
                                  s19 = peg$parse_();
                                  if (input.substr(peg$currPos, 4) === peg$c208) {
                                    s20 = peg$c208;
                                    peg$currPos += 4;
                                  } else {
                                    s20 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e217); }
                                  }
                                  if (s20 !== peg$FAILED) {
                                    s21 = peg$parse__();
                                    if (s21 !== peg$FAILED) {
                                      s22 = peg$parseExpression();
                                      if (s22 !== peg$FAILED) {
                                        peg$savedPos = s18;
                                        s18 = peg$f287(s3, s7, s9, s11, s13, s17, s22);
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                  if (s18 === peg$FAILED) {
                                    s18 = null;
                                  }
                                  s19 = peg$parse_();
                                  s20 = peg$parseBlockTriggerStatement();
                                  if (s20 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f288(s3, s7, s9, s11, s13, s17, s18, s20);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c155) {
                  s1 = peg$c155;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e164); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c198) {
                    s1 = peg$c198;
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e207); }
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c209) {
                      s3 = peg$c209;
                      peg$currPos += 9;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e218); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseTableName1();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parse_();
                          s7 = peg$parseColumnNameList();
                          if (s7 === peg$FAILED) {
                            s7 = null;
                          }
                          if (input.charCodeAt(peg$currPos) === 61) {
                            s8 = peg$c19;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e24); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parse_();
                            s10 = peg$parseTable();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f289(s1, s5, s7, s10);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c155) {
                    s1 = peg$c155;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e164); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c198) {
                      s1 = peg$c198;
                      peg$currPos += 4;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e207); }
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseTableName1();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        s5 = peg$parseColumnNameList();
                        if (s5 === peg$FAILED) {
                          s5 = null;
                        }
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s6 = peg$c19;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e24); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parse_();
                          s8 = peg$parseTable();
                          if (s8 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f290(s1, s3, s5, s8);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Create",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Create",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableOptions() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableOptions",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parseTableOption();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$currPos;
      s5 = peg$currPos;
      s6 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s7 = peg$c18;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s6 = [s6, s7, s8];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s5 = peg$parseTableOption();
        if (s5 === peg$FAILED) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
      } else {
        s4 = s5;
      }
    }
    if (s3.length < 1) {
      peg$currPos = s2;
      s2 = peg$FAILED;
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f291(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableOptions",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableOptions",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableOption() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c210) {
      s1 = peg$c210;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e219); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f292();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c211) {
        s1 = peg$c211;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e220); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c212) {
            s3 = peg$c212;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e221); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseboundary();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f293();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBlockTriggerStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BlockTriggerStatement",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseTriggerStatement();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f294(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseTriggerStatement();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c0) {
            s7 = peg$c0;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s5 = peg$parseTriggerStatement();
            if (s5 === peg$FAILED) {
              peg$currPos = s4;
              s4 = peg$FAILED;
            } else {
              s4 = s5;
            }
          } else {
            s4 = s5;
          }
        }
        if (s3.length < 1) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c0) {
            s4 = peg$c0;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c10;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f295(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BlockTriggerStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BlockTriggerStatement",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseAlter() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Alter",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 5) === peg$c213) {
      s2 = peg$c213;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c155) {
          s4 = peg$c155;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e164); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTableName();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (input.substr(peg$currPos, 6) === peg$c214) {
                s8 = peg$c214;
                peg$currPos += 6;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e223); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c41) {
                    s10 = peg$c41;
                    peg$currPos += 2;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e46); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse__();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseName();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f296(s6, s12);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDo();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 5) === peg$c213) {
        s2 = peg$c213;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e222); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c155) {
            s4 = peg$c155;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e164); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTableName();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (input.substr(peg$currPos, 6) === peg$c214) {
                  s8 = peg$c214;
                  peg$currPos += 6;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e223); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseName();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      s12 = peg$parseboundary();
                      if (s12 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c41) {
                          s13 = peg$c41;
                          peg$currPos += 2;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e46); }
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse__();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parseName();
                            if (s15 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f297(s6, s10, s15);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDo();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (input.substr(peg$currPos, 5) === peg$c213) {
          s2 = peg$c213;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e222); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c155) {
              s4 = peg$c155;
              peg$currPos += 5;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e164); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTableName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (input.substr(peg$currPos, 3) === peg$c215) {
                    s8 = peg$c215;
                    peg$currPos += 3;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e224); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseColumnDef();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f298(s6, s10);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDo();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (input.substr(peg$currPos, 5) === peg$c213) {
            s2 = peg$c213;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e222); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            if (s3 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c155) {
                s4 = peg$c155;
                peg$currPos += 5;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e164); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseTableName();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (input.substr(peg$currPos, 4) === peg$c216) {
                      s8 = peg$c216;
                      peg$currPos += 4;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e225); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse__();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseName();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f299(s6, s10);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Alter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Alter",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseOrConflictClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "OrConflictClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c112) {
      s2 = peg$c112;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c149) {
          s4 = peg$c149;
          peg$currPos += 8;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e158); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c191) {
            s4 = peg$c191;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e200); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c192) {
              s4 = peg$c192;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e201); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c193) {
                s4 = peg$c193;
                peg$currPos += 6;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e202); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c194) {
                  s4 = peg$c194;
                  peg$currPos += 7;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e203); }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseboundary();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f300(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "OrConflictClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "OrConflictClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseInsert() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Insert",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWithClause();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWithClause();
    }
    s2 = peg$parseDo();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c206) {
      s3 = peg$c206;
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e215); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseboundary();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseOrConflictClause();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 4) === peg$c217) {
          s7 = peg$c217;
          peg$currPos += 4;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e226); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseTableName();
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = peg$parse_();
              s12 = peg$parseColumnNameList();
              if (s12 !== peg$FAILED) {
                peg$savedPos = s10;
                s10 = peg$f301(s1, s5, s9, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s11 = peg$parse_();
              s12 = peg$parseTable();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parseUpsertClause();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parseUpsertClause();
                }
                peg$savedPos = s0;
                s0 = peg$f302(s1, s5, s9, s10, s12, s13);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWithClause();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWithClause();
      }
      s2 = peg$currPos;
      s3 = peg$parseDo();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.substr(peg$currPos, 6) === peg$c206) {
        s4 = peg$c206;
        peg$currPos += 6;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e215); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseboundary();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseOrConflictClause();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          peg$savedPos = s2;
          s2 = peg$f303(s1, s6);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseTableName();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parseColumnNameList();
        if (s6 === peg$FAILED) {
          s6 = peg$parseBraceColumnNameList();
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f304(s1, s2, s3, s6);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c218) {
          s6 = peg$c218;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e227); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseTable();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parseUpsertClause();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseUpsertClause();
            }
            peg$savedPos = s0;
            s0 = peg$f305(s1, s2, s3, s4, s8, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Insert",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Insert",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUpsertClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UpsertClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c189) {
      s2 = peg$c189;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c190) {
          s4 = peg$c190;
          peg$currPos += 8;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e199); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseConflictTarget();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s7 = peg$c21;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseUpsertAction();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f306(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UpsertClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UpsertClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseConflictTarget() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ConflictTarget",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseIndexedColumns();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.substr(peg$currPos, 5) === peg$c219) {
            s8 = peg$c219;
            peg$currPos += 5;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e228); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseExpression();
              if (s10 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f307(s4, s10);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseIndexedColumns();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c10;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f308(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parseBracketCondExpressionSeries();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIndexedColumns();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c10;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f309(s2, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ConflictTarget",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ConflictTarget",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUpsertAction() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UpsertAction",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c220) {
      s1 = peg$c220;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e229); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f310();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c207) {
        s1 = peg$c207;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e216); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseSetClause();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parse_();
            s5 = peg$parseSetClause();
            if (s5 === peg$FAILED) {
              peg$currPos = s4;
              s4 = peg$FAILED;
            } else {
              s4 = s5;
            }
          }
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (input.substr(peg$currPos, 5) === peg$c219) {
            s6 = peg$c219;
            peg$currPos += 5;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e228); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseExpression();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s4;
                s4 = peg$f311(s3, s8);
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f312(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c207) {
          s1 = peg$c207;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e216); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseBracketCondExpressionSeries();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = [];
              s6 = peg$parseSetClause();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parse_();
                s7 = peg$parseSetClause();
                if (s7 === peg$FAILED) {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                } else {
                  s6 = s7;
                }
              }
              peg$savedPos = s0;
              s0 = peg$f313(s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UpsertAction",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UpsertAction",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseDelete() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Delete",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWithClause();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWithClause();
    }
    s2 = peg$parseDo();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c205) {
      s3 = peg$c205;
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e214); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c157) {
          s5 = peg$c157;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e166); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseTableName();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c219) {
                s9 = peg$c219;
                peg$currPos += 5;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e228); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseExpression();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f314(s1, s7, s11);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWithClause();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWithClause();
      }
      s2 = peg$parseDo();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (input.substr(peg$currPos, 6) === peg$c205) {
        s3 = peg$c205;
        peg$currPos += 6;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e214); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTableName();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseBracketCondExpressionSeries();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f315(s1, s5, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Delete",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Delete",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUpdate() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Update",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWithClause();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWithClause();
    }
    s2 = peg$parseDo();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c207) {
      s3 = peg$c207;
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseboundary();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseOrConflictClause();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseTableName();
        if (s7 !== peg$FAILED) {
          s8 = peg$currPos;
          s9 = peg$parse_();
          s10 = peg$parseBracketCondExpressionSeries();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s8;
            s8 = peg$f316(s1, s5, s7, s10);
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = [];
          s10 = peg$currPos;
          s11 = peg$parse_();
          s12 = peg$parseSetClause();
          if (s12 !== peg$FAILED) {
            peg$savedPos = s10;
            s10 = peg$f317(s1, s5, s7, s8, s12);
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$currPos;
            s11 = peg$parse_();
            s12 = peg$parseSetClause();
            if (s12 !== peg$FAILED) {
              peg$savedPos = s10;
              s10 = peg$f317(s1, s5, s7, s8, s12);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f318(s1, s5, s7, s8, s9);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Update",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Update",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBracketCondExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BracketCondExpression",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c102;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f319(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BracketCondExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BracketCondExpression",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBracketCondExpressionSeries() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BracketCondExpressionSeries",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseBracketCondExpression();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseBracketCondExpression();
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f320(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BracketCondExpressionSeries",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BracketCondExpressionSeries",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseSetClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SetClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseUpdateLHS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c19;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseExpression();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f321(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.substr(peg$currPos, 2) === peg$c221) {
              s5 = peg$c221;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e230); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f322(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c22) {
          s1 = peg$c22;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseName();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.substr(peg$currPos, 2) === peg$c222) {
                s5 = peg$c222;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e231); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f323(s3, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseName();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (input.substr(peg$currPos, 2) === peg$c223) {
                  s5 = peg$c223;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e232); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f324(s3, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c22) {
              s1 = peg$c22;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseName();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (input.substr(peg$currPos, 2) === peg$c224) {
                    s5 = peg$c224;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e233); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseExpression();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f325(s3, s7);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c22) {
                s1 = peg$c22;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e27); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseName();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (input.substr(peg$currPos, 2) === peg$c225) {
                      s5 = peg$c225;
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e234); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      s7 = peg$parseExpression();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f326(s3, s7);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c22) {
                  s1 = peg$c22;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e27); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseName();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      if (input.substr(peg$currPos, 2) === peg$c226) {
                        s5 = peg$c226;
                        peg$currPos += 2;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e235); }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        s7 = peg$parseExpression();
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f327(s3, s7);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c22) {
                    s1 = peg$c22;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e27); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseName();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (input.substr(peg$currPos, 2) === peg$c227) {
                          s5 = peg$c227;
                          peg$currPos += 2;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e236); }
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parse_();
                          s7 = peg$parseExpression();
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f328(s3, s7);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c22) {
                      s1 = peg$c22;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e27); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse__();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseName();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          if (input.substr(peg$currPos, 2) === peg$c228) {
                            s5 = peg$c228;
                            peg$currPos += 2;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e237); }
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            s7 = peg$parseExpression();
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f329(s3, s7);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 3) === peg$c22) {
                        s1 = peg$c22;
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e27); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse__();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseName();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (input.substr(peg$currPos, 3) === peg$c229) {
                              s5 = peg$c229;
                              peg$currPos += 3;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e238); }
                            }
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parse_();
                              s7 = peg$parseExpression();
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f330(s3, s7);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c22) {
                          s1 = peg$c22;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e27); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse__();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseName();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parse_();
                              if (input.substr(peg$currPos, 3) === peg$c230) {
                                s5 = peg$c230;
                                peg$currPos += 3;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e239); }
                              }
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                s7 = peg$parseExpression();
                                if (s7 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f331(s3, s7);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 3) === peg$c22) {
                            s1 = peg$c22;
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e27); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parse__();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseName();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parse_();
                                if (input.substr(peg$currPos, 3) === peg$c231) {
                                  s5 = peg$c231;
                                  peg$currPos += 3;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e240); }
                                }
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parse_();
                                  s7 = peg$parseExpression();
                                  if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f332(s3, s7);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c22) {
                              s1 = peg$c22;
                              peg$currPos += 3;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e27); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parse__();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseName();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parse_();
                                  if (input.substr(peg$currPos, 3) === peg$c232) {
                                    s5 = peg$c232;
                                    peg$currPos += 3;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e241); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    s7 = peg$parseExpression();
                                    if (s7 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f333(s3, s7);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SetClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SetClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUpdateLHS() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UpdateLHS",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseName();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c18;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s6 = peg$parseName();
          if (s6 === peg$FAILED) {
            peg$currPos = s5;
            s5 = peg$FAILED;
          } else {
            s5 = s6;
          }
        } else {
          s5 = s6;
        }
      }
      if (s4.length < 1) {
        peg$currPos = s3;
        s3 = peg$FAILED;
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c54;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f334(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseName();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UpdateLHS",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UpdateLHS",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTruncate() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Truncate",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 8) === peg$c233) {
      s2 = peg$c233;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e242); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c155) {
          s4 = peg$c155;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e164); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTableName();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f335(s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Truncate",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Truncate",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseVacuum() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Vacuum",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 6) === peg$c234) {
      s2 = peg$c234;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e243); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseboundary();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c217) {
              s7 = peg$c217;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e226); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseboundary();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseSQLStringLiteral();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f336(s4, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDo();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 6) === peg$c234) {
        s2 = peg$c234;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e243); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c217) {
            s4 = peg$c217;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e226); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseboundary();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSQLStringLiteral();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f337(s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDo();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (input.substr(peg$currPos, 6) === peg$c234) {
          s2 = peg$c234;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e243); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseName();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f338(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDo();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (input.substr(peg$currPos, 6) === peg$c234) {
            s2 = peg$c234;
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e243); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f339();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Vacuum",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Vacuum",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsePragma() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Pragma",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c235) {
      s1 = peg$c235;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e244); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 46) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f340(s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        s5 = peg$parseName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 61) {
            s8 = peg$c19;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parsePragmaValue();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f341(s3, s5, s10);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s8 = peg$c9;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$parsePragmaValue();
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s12 = peg$c10;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s12 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s7 = peg$f342(s3, s5, s10);
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f343(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Pragma",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Pragma",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsePragmaValue() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PragmaValue",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseSignedNumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parseName();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSQLStringLiteral();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PragmaValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PragmaValue",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseReturningClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReturningClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    s3 = peg$parseboundary();
    if (s3 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c236) {
        s4 = peg$c236;
        peg$currPos += 9;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e245); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseValueWildCardReferences();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f344(s6);
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f345(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReturningClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReturningClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseModuleArguments() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModuleArguments",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseModuleArguments();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (input.substr(peg$currPos, 2) === peg$c237) {
          s5 = peg$c237;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e246); }
        }
        if (s5 === peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r1.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (input.substr(peg$currPos, 2) === peg$c237) {
            s5 = peg$c237;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e246); }
          }
          if (s5 === peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r1.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
          }
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c2;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (input.substr(peg$currPos, 2) === peg$c237) {
              s5 = peg$c237;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e246); }
            }
            if (s5 === peg$FAILED) {
              s5 = input.charAt(peg$currPos);
              if (peg$r1.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (input.substr(peg$currPos, 2) === peg$c237) {
                s5 = peg$c237;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e246); }
              }
              if (s5 === peg$FAILED) {
                s5 = input.charAt(peg$currPos);
                if (peg$r1.test(s5)) {
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
              }
            }
            if (input.charCodeAt(peg$currPos) === 39) {
              s5 = peg$c2;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = input.charAt(peg$currPos);
        if (peg$r8.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e247); }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = [];
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (input.substr(peg$currPos, 2) === peg$c237) {
            s5 = peg$c237;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e246); }
          }
          if (s5 === peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r1.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (input.substr(peg$currPos, 2) === peg$c237) {
              s5 = peg$c237;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e246); }
            }
            if (s5 === peg$FAILED) {
              s5 = input.charAt(peg$currPos);
              if (peg$r1.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
            }
          }
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c2;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c2;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (input.substr(peg$currPos, 2) === peg$c237) {
                s5 = peg$c237;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e246); }
              }
              if (s5 === peg$FAILED) {
                s5 = input.charAt(peg$currPos);
                if (peg$r1.test(s5)) {
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (input.substr(peg$currPos, 2) === peg$c237) {
                  s5 = peg$c237;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e246); }
                }
                if (s5 === peg$FAILED) {
                  s5 = input.charAt(peg$currPos);
                  if (peg$r1.test(s5)) {
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                }
              }
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c2;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = input.charAt(peg$currPos);
          if (peg$r8.test(s1)) {
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e247); }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModuleArguments",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModuleArguments",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseIndexedColumns() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IndexedColumns",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseIndexedColumn();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseIndexedColumn();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f346(s1, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c18;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIndexedColumn();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f346(s1, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f347(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IndexedColumns",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IndexedColumns",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseIndexedColumn() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IndexedColumn",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c99) {
        s4 = peg$c99;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c100) {
          s4 = peg$c100;
          peg$currPos += 4;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f348(s1, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f349(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IndexedColumn",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IndexedColumn",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseReindex() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Reindex",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 7) === peg$c238) {
      s2 = peg$c238;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e248); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseTableName();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f350(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDo();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 7) === peg$c238) {
        s2 = peg$c238;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e248); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseboundary();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f351();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Reindex",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Reindex",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseDrop() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Drop",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseDo();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 4) === peg$c216) {
      s2 = peg$c216;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e225); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c197) {
          s4 = peg$c197;
          peg$currPos += 9;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e206); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c155) {
              s6 = peg$c155;
              peg$currPos += 5;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e164); }
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c198) {
                s6 = peg$c198;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e207); }
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c201) {
                  s6 = peg$c201;
                  peg$currPos += 7;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e210); }
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseTableName();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f352(s6, s8);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDo();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 4) === peg$c216) {
        s2 = peg$c216;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e225); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c155) {
            s4 = peg$c155;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e164); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c198) {
              s4 = peg$c198;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e207); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c199) {
                s4 = peg$c199;
                peg$currPos += 5;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e208); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c201) {
                  s4 = peg$c201;
                  peg$currPos += 7;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e210); }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c8) {
                s7 = peg$c8;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c156) {
                    s9 = peg$c156;
                    peg$currPos += 6;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e165); }
                  }
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTableName();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f353(s4, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Drop",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Drop",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableNameWithVariable() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableNameWithVariable",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVariable();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f354(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f355(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTableName1();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f356(s1);
        }
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableNameWithVariable",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableNameWithVariable",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableName() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableName",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseTableName1();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f357(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableName",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableName1() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableName1",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseMetaTableName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseMetaTableName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f358(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMetaTableName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f359(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableName1",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableName1",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseMetaTableName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MetaTableName",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s3 = peg$c20;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseIdentifier();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f360(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseModulePathName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f361(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MetaTableName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MetaTableName",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTable() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Table",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseWithTable();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c157) {
        s2 = peg$c157;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e166); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseTableUnion();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f362(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Table",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Table",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWithTable() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WithTable",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWithClause();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWithClause();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTable();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f363(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WithTable",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WithTable",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWithClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WithClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c209) {
          s5 = peg$c209;
          peg$currPos += 9;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e218); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseboundary();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseColumnNameList();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          if (input.substr(peg$currPos, 2) === peg$c153) {
            s8 = peg$c153;
            peg$currPos += 2;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e162); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            if (s9 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s10 = peg$c9;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                s12 = peg$parseTable();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s14 = peg$c10;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f364(s5, s7, s12);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WithClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WithClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWindowClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WindowClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c239) {
      s1 = peg$c239;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e249); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseboundary();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c153) {
              s6 = peg$c153;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e162); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseWindowDefn();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f365(s3, s8);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WindowClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WindowClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseColumnNameList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ColumnNameList",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseNameList();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f366(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ColumnNameList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ColumnNameList",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBraceColumnNameList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BraceColumnNameList",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseNameList();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c54;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f367(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BraceColumnNameList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BraceColumnNameList",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseNameList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NameList",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseName();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f368(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NameList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NameList",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseConcatenatedTables() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ConcatenatedTables",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseTable1();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      s6 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s7 = peg$c0;
        peg$currPos += 2;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      peg$silentFails--;
      if (s7 === peg$FAILED) {
        s6 = undefined;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s7 = peg$c61;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseTable1();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f369(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ConcatenatedTables",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ConcatenatedTables",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseExceptTable() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExceptTable",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 6) === peg$c240) {
      s2 = peg$c240;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e250); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseTable1();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f370(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExceptTable",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExceptTable",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseIntersectTable() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IntersectTable",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 9) === peg$c241) {
      s2 = peg$c241;
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e251); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseTable1();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f371(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IntersectTable",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IntersectTable",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseExceptIntersectTable() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExceptIntersectTable",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseExceptTable();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f372(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIntersectTable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f373(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExceptIntersectTable",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExceptIntersectTable",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableUnion() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableUnion",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseConcatenatedTables();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseExceptIntersectTable();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseExceptIntersectTable();
      }
      s3 = peg$parseDistinctClause();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseOrderClause();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseLimitOffsetClause();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parseAsClause();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s7 = [];
      s8 = peg$currPos;
      s9 = peg$parseDistinctClause();
      if (s9 !== peg$FAILED) {
        peg$savedPos = s8;
        s9 = peg$f374(s1, s2, s3, s4, s5, s6, s9);
      }
      s8 = s9;
      if (s8 === peg$FAILED) {
        s8 = peg$currPos;
        s9 = peg$parseOrderClause();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s8;
          s9 = peg$f375(s1, s2, s3, s4, s5, s6, s9);
        }
        s8 = s9;
        if (s8 === peg$FAILED) {
          s8 = peg$currPos;
          s9 = peg$parseLimitOffsetClause();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s8;
            s9 = peg$f376(s1, s2, s3, s4, s5, s6, s9);
          }
          s8 = s9;
          if (s8 === peg$FAILED) {
            s8 = peg$currPos;
            s9 = peg$parseAsClause();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s8;
              s9 = peg$f377(s1, s2, s3, s4, s5, s6, s9);
            }
            s8 = s9;
            if (s8 === peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parse_();
              s10 = peg$parseFilters();
              if (s10 !== peg$FAILED) {
                peg$savedPos = s8;
                s8 = peg$f378(s1, s2, s3, s4, s5, s6, s10);
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
          }
        }
      }
      while (s8 !== peg$FAILED) {
        s7.push(s8);
        s8 = peg$currPos;
        s9 = peg$parseDistinctClause();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s8;
          s9 = peg$f374(s1, s2, s3, s4, s5, s6, s9);
        }
        s8 = s9;
        if (s8 === peg$FAILED) {
          s8 = peg$currPos;
          s9 = peg$parseOrderClause();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s8;
            s9 = peg$f375(s1, s2, s3, s4, s5, s6, s9);
          }
          s8 = s9;
          if (s8 === peg$FAILED) {
            s8 = peg$currPos;
            s9 = peg$parseLimitOffsetClause();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s8;
              s9 = peg$f376(s1, s2, s3, s4, s5, s6, s9);
            }
            s8 = s9;
            if (s8 === peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parseAsClause();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s8;
                s9 = peg$f377(s1, s2, s3, s4, s5, s6, s9);
              }
              s8 = s9;
              if (s8 === peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parse_();
                s10 = peg$parseFilters();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s8;
                  s8 = peg$f378(s1, s2, s3, s4, s5, s6, s10);
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
            }
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f379(s1, s2, s3, s4, s5, s6, s7);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableUnion",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableUnion",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseDistinctClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DistinctClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseboundary();
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c242) {
        s3 = peg$c242;
        peg$currPos += 8;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e252); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseboundary();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f380();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DistinctClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DistinctClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseAsClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AsClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c153) {
      s2 = peg$c153;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseName();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f381(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AsClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AsClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseOrderClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "OrderClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseboundary();
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c243) {
        s3 = peg$c243;
        peg$currPos += 5;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e253); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c244) {
            s5 = peg$c244;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e254); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseboundary();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parseExpression();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse_();
                if (input.substr(peg$currPos, 3) === peg$c99) {
                  s11 = peg$c99;
                  peg$currPos += 3;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e104); }
                }
                if (s11 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c100) {
                    s11 = peg$c100;
                    peg$currPos += 4;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e105); }
                  }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s9;
                  s9 = peg$f382(s8, s11);
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                s10 = [];
                s11 = peg$currPos;
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s13 = peg$c18;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e23); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = peg$parseExpression();
                  if (s15 !== peg$FAILED) {
                    s16 = peg$currPos;
                    s17 = peg$parse_();
                    if (input.substr(peg$currPos, 3) === peg$c99) {
                      s18 = peg$c99;
                      peg$currPos += 3;
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e104); }
                    }
                    if (s18 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c100) {
                        s18 = peg$c100;
                        peg$currPos += 4;
                      } else {
                        s18 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e105); }
                      }
                    }
                    if (s18 !== peg$FAILED) {
                      peg$savedPos = s16;
                      s16 = peg$f383(s8, s9, s15, s18);
                    } else {
                      peg$currPos = s16;
                      s16 = peg$FAILED;
                    }
                    if (s16 === peg$FAILED) {
                      s16 = null;
                    }
                    peg$savedPos = s11;
                    s11 = peg$f384(s8, s9, s15, s16);
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$currPos;
                  s12 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s13 = peg$c18;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    s15 = peg$parseExpression();
                    if (s15 !== peg$FAILED) {
                      s16 = peg$currPos;
                      s17 = peg$parse_();
                      if (input.substr(peg$currPos, 3) === peg$c99) {
                        s18 = peg$c99;
                        peg$currPos += 3;
                      } else {
                        s18 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e104); }
                      }
                      if (s18 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c100) {
                          s18 = peg$c100;
                          peg$currPos += 4;
                        } else {
                          s18 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e105); }
                        }
                      }
                      if (s18 !== peg$FAILED) {
                        peg$savedPos = s16;
                        s16 = peg$f383(s8, s9, s15, s18);
                      } else {
                        peg$currPos = s16;
                        s16 = peg$FAILED;
                      }
                      if (s16 === peg$FAILED) {
                        s16 = null;
                      }
                      peg$savedPos = s11;
                      s11 = peg$f384(s8, s9, s15, s16);
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                }
                peg$savedPos = s0;
                s0 = peg$f385(s8, s9, s10);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "OrderClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "OrderClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseLimitOffsetClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LimitOffsetClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseboundary();
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c245) {
        s3 = peg$c245;
        peg$currPos += 5;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e255); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseExpression();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseboundary();
            if (s7 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c246) {
                s8 = peg$c246;
                peg$currPos += 6;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e256); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseExpression();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f386(s5, s10);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c245) {
          s3 = peg$c245;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e255); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExpression();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f387(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c246) {
            s3 = peg$c246;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e256); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseboundary();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c245) {
                    s8 = peg$c245;
                    peg$currPos += 5;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e255); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseExpression();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f388(s5, s10);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LimitOffsetClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LimitOffsetClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTable1() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Table1",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseTable2();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseFilters();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f389(s1, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f390(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Table1",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Table1",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTable2() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Table2",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c247) {
      s1 = peg$c247;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e257); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValueReferences();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f391(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c53;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseValueReferences();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c18;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s6 = peg$c54;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e59); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f392(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseValuesList();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f393(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLiteral();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f394(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTableReference();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f395(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Table2",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Table2",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValuesList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ValuesList",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c248) {
      s1 = peg$c248;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e258); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseColumnNameList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c101;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e106); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$currPos;
          s7 = peg$currPos;
          s8 = [];
          s9 = peg$parseRecord();
          if (s9 === peg$FAILED) {
            s9 = peg$parseExpression();
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$currPos;
            s11 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s12 = peg$c18;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              s11 = [s11, s12, s13];
              s10 = s11;
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 !== peg$FAILED) {
              s10 = peg$parseRecord();
              if (s10 === peg$FAILED) {
                s10 = peg$parseExpression();
              }
              if (s10 === peg$FAILED) {
                peg$currPos = s9;
                s9 = peg$FAILED;
              } else {
                s9 = s10;
              }
            } else {
              s9 = s10;
            }
          }
          if (s8.length < 1) {
            peg$currPos = s7;
            s7 = peg$FAILED;
          } else {
            s7 = s8;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s6;
            s7 = peg$f396(s3, s7);
          }
          s6 = s7;
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c18;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s9 = peg$c102;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e107); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f397(s3, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c248) {
        s1 = peg$c248;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e258); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseColumnNameList();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c101;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e106); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c102;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e107); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f398(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c248) {
          s1 = peg$c248;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e258); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s3 = peg$c101;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e106); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = [];
              s6 = peg$parseQuasiJsonObjectEntries();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$currPos;
                s8 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c18;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e23); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s7 = peg$parseQuasiJsonObjectEntries();
                  if (s7 === peg$FAILED) {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  } else {
                    s6 = s7;
                  }
                } else {
                  s6 = s7;
                }
              }
              s6 = peg$currPos;
              s7 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c18;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s7 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 93) {
                s8 = peg$c102;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e107); }
              }
              if (s8 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f399(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ValuesList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ValuesList",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRecord() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Record",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpressions();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c54;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f400(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Record",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Record",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableReference() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableReference",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c154) {
        s4 = peg$c154;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e163); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c65;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseTableExpression();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f401(s1, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTableExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f402(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableReference",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableReference",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFilters() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Filters",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseFilter();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseFilters();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f403(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFilter();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f404(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Filters",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Filters",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFilter() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Filter",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c102;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f405(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c219) {
        s1 = peg$c219;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e228); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f406(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c53;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseValueReferences();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c18;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = peg$parse_();
            if (input.substr(peg$currPos, 2) === peg$c110) {
              s6 = peg$c110;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e115); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parseValueWildCardReferences();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s11 = peg$c18;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e23); }
                }
                if (s11 !== peg$FAILED) {
                  s10 = [s10, s11];
                  s9 = s10;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s11 = peg$c54;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e59); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f407(s3, s8);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c53;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e58); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseValueReferences();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c18;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = peg$parse_();
              if (input.substr(peg$currPos, 2) === peg$c110) {
                s6 = peg$c110;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e115); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s8 = peg$c54;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e59); }
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f408(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c53;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e58); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (input.substr(peg$currPos, 2) === peg$c110) {
                s3 = peg$c110;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e115); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseValueReferences();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s8 = peg$c18;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  s7 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c54;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e59); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f409(s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c53;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e58); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseValueWildCardReferences();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s6 = peg$c18;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s6 = peg$c54;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e59); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f410(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c249) {
                  s1 = peg$c249;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e259); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c244) {
                      s3 = peg$c244;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e254); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseValueReferences();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parse_();
                          s7 = peg$parseboundary();
                          if (s7 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c247) {
                              s8 = peg$c247;
                              peg$currPos += 6;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e257); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parse__();
                              if (s9 !== peg$FAILED) {
                                s10 = peg$parseValueWildCardReferences();
                                if (s10 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f411(s5, s10);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 6) === peg$c247) {
                    s1 = peg$c247;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e257); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseValueWildCardReferences();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f412(s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseJoinType();
                    if (s1 === peg$FAILED) {
                      s1 = null;
                    }
                    if (input.substr(peg$currPos, 4) === peg$c250) {
                      s2 = peg$c250;
                      peg$currPos += 4;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e260); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parse__();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseTableReference();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parse_();
                          s6 = peg$parseboundary();
                          if (s6 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c200) {
                              s7 = peg$c200;
                              peg$currPos += 5;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e209); }
                            }
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parse__();
                              if (s8 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s9 = peg$c9;
                                  peg$currPos++;
                                } else {
                                  s9 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                }
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parse_();
                                  s11 = peg$parseNameList();
                                  if (s11 !== peg$FAILED) {
                                    s12 = peg$currPos;
                                    s13 = peg$parse_();
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                      s14 = peg$c18;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e23); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s13 = [s13, s14];
                                      s12 = s13;
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                    if (s12 === peg$FAILED) {
                                      s12 = null;
                                    }
                                    s13 = peg$parse_();
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s14 = peg$c10;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f413(s1, s4, s11);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseJoinType();
                      if (s1 === peg$FAILED) {
                        s1 = null;
                      }
                      if (input.substr(peg$currPos, 4) === peg$c250) {
                        s2 = peg$c250;
                        peg$currPos += 4;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e260); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse__();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseTableReference();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            s6 = peg$parse_();
                            s7 = peg$parseboundary();
                            if (s7 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c189) {
                                s8 = peg$c189;
                                peg$currPos += 2;
                              } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e198); }
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parse__();
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parseExpression();
                                  if (s10 !== peg$FAILED) {
                                    peg$savedPos = s5;
                                    s5 = peg$f414(s1, s4, s10);
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                            if (s5 === peg$FAILED) {
                              s5 = null;
                            }
                            peg$savedPos = s0;
                            s0 = peg$f415(s1, s4, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 7) === peg$c251) {
                          s1 = peg$c251;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e261); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse__();
                          if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c250) {
                              s3 = peg$c250;
                              peg$currPos += 4;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e260); }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parse__();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseTableReference();
                                if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f416(s5);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseJoinType();
                          if (s1 === peg$FAILED) {
                            s1 = null;
                          }
                          if (input.substr(peg$currPos, 2) === peg$c252) {
                            s2 = peg$c252;
                            peg$currPos += 2;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e262); }
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            s4 = peg$parseName();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parse_();
                              s6 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s7 = peg$c65;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e70); }
                              }
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parse_();
                                s9 = peg$parseName();
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parse_();
                                  peg$savedPos = s6;
                                  s6 = peg$f417(s1, s4, s9);
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                              if (s6 === peg$FAILED) {
                                s6 = null;
                              }
                              if (input.substr(peg$currPos, 2) === peg$c253) {
                                s7 = peg$c253;
                                peg$currPos += 2;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e263); }
                              }
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parse_();
                                s9 = peg$parseTableReference();
                                if (s9 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f418(s1, s4, s6, s9);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseWindowClause();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f419(s1);
                            }
                            s0 = s1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Filter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Filter",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJoinType() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JoinType",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c254) {
      s1 = peg$c254;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e264); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c255) {
        s1 = peg$c255;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e265); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c256) {
          s1 = peg$c256;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e266); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c257) {
            s1 = peg$c257;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e267); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c258) {
              s1 = peg$c258;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e268); }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f420(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JoinType",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JoinType",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValueReferences() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ValueReferences",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseValueReferenceOrUnpack();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseValueReferenceOrUnpack();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f421(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ValueReferences",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ValueReferences",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValueWildCardReferences() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ValueWildCardReferences",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseValueWildCardReferenceOrUnpack();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseValueWildCardReferenceOrUnpack();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f422(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ValueWildCardReferences",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ValueWildCardReferences",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValueReference() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ValueReference",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseboundary();
          if (s7 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c99) {
              s8 = peg$c99;
              peg$currPos += 3;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s8 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c100) {
                s8 = peg$c100;
                peg$currPos += 4;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e105); }
              }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseboundary();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f423(s1, s5, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c65;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f424(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseboundary();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c99) {
              s4 = peg$c99;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c100) {
                s4 = peg$c100;
                peg$currPos += 4;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e105); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseboundary();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f425(s1, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseExpression();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f426(s1);
          }
          s0 = s1;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ValueReference",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ValueReference",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWildCardReference() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WildCardReference",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 46) {
            s7 = peg$c1;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 42) {
              s9 = peg$c106;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e111); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f427(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 42) {
            s5 = peg$c106;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f428(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c106;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WildCardReference",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WildCardReference",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValueWildCardReference() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ValueWildCardReference",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseWildCardReference();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f429(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueReference();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ValueWildCardReference",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ValueWildCardReference",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValueReferenceOrUnpack() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ValueReferenceOrUnpack",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseUnpack();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseValueReference();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f430(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ValueReferenceOrUnpack",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ValueReferenceOrUnpack",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValueWildCardReferenceOrUnpack() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ValueWildCardReferenceOrUnpack",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseUnpack();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseValueWildCardReference();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f431(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ValueWildCardReferenceOrUnpack",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ValueWildCardReferenceOrUnpack",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTableExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TableExpression",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseValueReferences();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c54;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f432(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseTable1();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c10;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f433(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c9;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseTable();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c10;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f434(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c259) {
            s1 = peg$c259;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e269); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c248) {
                s3 = peg$c248;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e258); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 91) {
                  s5 = peg$c101;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e106); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parseExpressions();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s10 = peg$c18;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e23); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    s9 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s10 = peg$c102;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e107); }
                    }
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f435(s7);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseValuesList();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f436(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseLiteral();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f437(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseName();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s3 = peg$c1;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e1); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parseModulePathName();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s7 = peg$c9;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e14); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s9 = peg$c10;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e15); }
                        }
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f438(s1, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseName();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s3 = peg$c1;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      s5 = peg$parseModulePathName();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s7 = peg$c9;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e14); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          s9 = peg$parseExpressions();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s11 = peg$c10;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e15); }
                            }
                            if (s11 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f439(s1, s5, s9);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseName();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 46) {
                        s3 = peg$c1;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e1); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        s5 = peg$parseModulePathName();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f440(s1, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseModulePathName();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s3 = peg$c9;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e14); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c10;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e15); }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f441(s1);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseModulePathName();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c9;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e14); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            s5 = peg$parseExpressions();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s7 = peg$c10;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e15); }
                              }
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f442(s1, s5);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseModulePathName();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f443(s1);
                          }
                          s0 = s1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TableExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TableExpression",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseExpressions() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Expressions",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c18;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpressions();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f444(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseExpression();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Expressions",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Expressions",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRowValues() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RowValues",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseRowValue();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c18;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseRowValues();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f445(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseRowValue();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RowValues",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RowValues",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUnOp() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnOp",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = input.charAt(peg$currPos);
    if (peg$r9.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e270); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c114) {
        s1 = peg$c114;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f446();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnOp",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnOp",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBinOp() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BinOp",
      location: peg$computeLocation(startPos, startPos, true)
    });

    if (input.substr(peg$currPos, 2) === peg$c124) {
      s0 = peg$c124;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c120) {
        s0 = peg$c120;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c121) {
          s0 = peg$c121;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e126); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c119) {
            s0 = peg$c119;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e124); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c260) {
              s0 = peg$c260;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e271); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c126) {
                s0 = peg$c126;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e131); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c118) {
                  s0 = peg$c118;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e123); }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.charAt(peg$currPos);
                  if (peg$r10.test(s0)) {
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e272); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c127) {
                      s0 = peg$c127;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e132); }
                    }
                    if (s0 === peg$FAILED) {
                      s0 = input.charAt(peg$currPos);
                      if (peg$r11.test(s0)) {
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e273); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c261) {
                          s0 = peg$c261;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e274); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c262) {
                            s0 = peg$c262;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e275); }
                          }
                          if (s0 === peg$FAILED) {
                            s0 = input.charAt(peg$currPos);
                            if (peg$r12.test(s0)) {
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e276); }
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 3) === peg$c114) {
                                s1 = peg$c114;
                                peg$currPos += 3;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e119); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parse__();
                                if (s2 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 7) === peg$c117) {
                                    s3 = peg$c117;
                                    peg$currPos += 7;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e122); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseboundary();
                                    if (s4 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f447();
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 7) === peg$c117) {
                                  s1 = peg$c117;
                                  peg$currPos += 7;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e122); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseboundary();
                                  if (s2 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f448();
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 3) === peg$c113) {
                                    s1 = peg$c113;
                                    peg$currPos += 3;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e118); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseboundary();
                                    if (s2 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f449();
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c112) {
                                      s1 = peg$c112;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e117); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseboundary();
                                      if (s2 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f450();
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 2) === peg$c263) {
                                        s1 = peg$c263;
                                        peg$currPos += 2;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e277); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parse__();
                                        if (s2 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 3) === peg$c114) {
                                            s3 = peg$c114;
                                            peg$currPos += 3;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e119); }
                                          }
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parseboundary();
                                            if (s4 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f451();
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 2) === peg$c263) {
                                          s1 = peg$c263;
                                          peg$currPos += 2;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e277); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseboundary();
                                          if (s2 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s0 = peg$f452();
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 3) === peg$c114) {
                                            s1 = peg$c114;
                                            peg$currPos += 3;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e119); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parse__();
                                            if (s2 !== peg$FAILED) {
                                              if (input.substr(peg$currPos, 4) === peg$c264) {
                                                s3 = peg$c264;
                                                peg$currPos += 4;
                                              } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e278); }
                                              }
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseboundary();
                                                if (s4 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s0 = peg$f453();
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 4) === peg$c264) {
                                              s1 = peg$c264;
                                              peg$currPos += 4;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e278); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseboundary();
                                              if (s2 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s0 = peg$f454();
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 3) === peg$c114) {
                                                s1 = peg$c114;
                                                peg$currPos += 3;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e119); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parse__();
                                                if (s2 !== peg$FAILED) {
                                                  if (input.substr(peg$currPos, 4) === peg$c265) {
                                                    s3 = peg$c265;
                                                    peg$currPos += 4;
                                                  } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e279); }
                                                  }
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parseboundary();
                                                    if (s4 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s0 = peg$f455();
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 4) === peg$c265) {
                                                  s1 = peg$c265;
                                                  peg$currPos += 4;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e279); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseboundary();
                                                  if (s2 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s0 = peg$f456();
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (input.substr(peg$currPos, 3) === peg$c114) {
                                                    s1 = peg$c114;
                                                    peg$currPos += 3;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e119); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parse__();
                                                    if (s2 !== peg$FAILED) {
                                                      if (input.substr(peg$currPos, 6) === peg$c266) {
                                                        s3 = peg$c266;
                                                        peg$currPos += 6;
                                                      } else {
                                                        s3 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e280); }
                                                      }
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parseboundary();
                                                        if (s4 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s0 = peg$f457();
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 6) === peg$c266) {
                                                      s1 = peg$c266;
                                                      peg$currPos += 6;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e280); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseboundary();
                                                      if (s2 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s0 = peg$f458();
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      if (input.substr(peg$currPos, 3) === peg$c114) {
                                                        s1 = peg$c114;
                                                        peg$currPos += 3;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e119); }
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parse__();
                                                        if (s2 !== peg$FAILED) {
                                                          if (input.substr(peg$currPos, 5) === peg$c267) {
                                                            s3 = peg$c267;
                                                            peg$currPos += 5;
                                                          } else {
                                                            s3 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e281); }
                                                          }
                                                          if (s3 !== peg$FAILED) {
                                                            s4 = peg$parseboundary();
                                                            if (s4 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s0 = peg$f459();
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        if (input.substr(peg$currPos, 5) === peg$c267) {
                                                          s1 = peg$c267;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e281); }
                                                        }
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseboundary();
                                                          if (s2 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s0 = peg$f460();
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          if (input.substr(peg$currPos, 7) === peg$c183) {
                                                            s1 = peg$c183;
                                                            peg$currPos += 7;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e192); }
                                                          }
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parseboundary();
                                                            if (s2 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s0 = peg$f461();
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            if (input.substr(peg$currPos, 6) === peg$c37) {
                                                              s1 = peg$c37;
                                                              peg$currPos += 6;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e42); }
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parseboundary();
                                                              if (s2 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s0 = peg$f462();
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BinOp",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BinOp",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseBinCompOp() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BinCompOp",
      location: peg$computeLocation(startPos, startPos, true)
    });

    if (input.substr(peg$currPos, 2) === peg$c124) {
      s0 = peg$c124;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c19;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c120) {
          s0 = peg$c120;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c121) {
            s0 = peg$c121;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e126); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c118) {
              s0 = peg$c118;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e123); }
            }
            if (s0 === peg$FAILED) {
              s0 = input.charAt(peg$currPos);
              if (peg$r13.test(s0)) {
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e282); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c119) {
                  s0 = peg$c119;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e124); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c263) {
                    s1 = peg$c263;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e277); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c114) {
                        s3 = peg$c114;
                        peg$currPos += 3;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e119); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseboundary();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f463();
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c263) {
                      s1 = peg$c263;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e277); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseboundary();
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f464();
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BinCompOp",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BinCompOp",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Expression",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseExpression1();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseboundary();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c114) {
          s5 = peg$c114;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c116) {
              s7 = peg$c116;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e121); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseTable();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  s11 = peg$parseBinOp();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse_();
                    s13 = peg$parseExpression();
                    if (s13 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s4 = peg$f465(s1, s9, s11, s13);
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c114) {
            s5 = peg$c114;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e119); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c116) {
                s7 = peg$c116;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e121); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseTable();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s4 = peg$f466(s1, s9);
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c114) {
              s5 = peg$c114;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e119); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c116) {
                  s7 = peg$c116;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e121); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 91) {
                    s9 = peg$c101;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e106); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    s11 = peg$parseRecordOrExpressionList();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s14 = peg$c18;
                        peg$currPos++;
                      } else {
                        s14 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e23); }
                      }
                      if (s14 !== peg$FAILED) {
                        s13 = [s13, s14];
                        s12 = s13;
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = null;
                      }
                      s13 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s14 = peg$c102;
                        peg$currPos++;
                      } else {
                        s14 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e107); }
                      }
                      if (s14 !== peg$FAILED) {
                        s15 = peg$parse_();
                        s16 = peg$parseBinOp();
                        if (s16 !== peg$FAILED) {
                          s17 = peg$parse_();
                          s18 = peg$parseExpression();
                          if (s18 !== peg$FAILED) {
                            peg$savedPos = s4;
                            s4 = peg$f467(s1, s11, s16, s18);
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c114) {
                s5 = peg$c114;
                peg$currPos += 3;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e119); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c116) {
                    s7 = peg$c116;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e121); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 91) {
                      s9 = peg$c101;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e106); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      s11 = peg$parseRecordOrExpressionList();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$currPos;
                        s13 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s14 = peg$c18;
                          peg$currPos++;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e23); }
                        }
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        if (s12 === peg$FAILED) {
                          s12 = null;
                        }
                        s13 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s14 = peg$c102;
                          peg$currPos++;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e107); }
                        }
                        if (s14 !== peg$FAILED) {
                          peg$savedPos = s4;
                          s4 = peg$f468(s1, s11);
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c116) {
                  s5 = peg$c116;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e121); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseTable();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      s9 = peg$parseBinOp();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        s11 = peg$parseExpression();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s4;
                          s4 = peg$f469(s1, s7, s9, s11);
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c116) {
                    s5 = peg$c116;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e121); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseTable();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s4;
                        s4 = peg$f470(s1, s7);
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c116) {
                      s5 = peg$c116;
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e121); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 91) {
                        s7 = peg$c101;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e106); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        s9 = peg$parseRecordOrExpressionList();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$currPos;
                          s11 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s12 = peg$c18;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e23); }
                          }
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                          if (s10 === peg$FAILED) {
                            s10 = null;
                          }
                          s11 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s12 = peg$c102;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e107); }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            s14 = peg$parseBinOp();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parse_();
                              s16 = peg$parseExpression();
                              if (s16 !== peg$FAILED) {
                                peg$savedPos = s4;
                                s4 = peg$f471(s1, s9, s14, s16);
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c116) {
                        s5 = peg$c116;
                        peg$currPos += 2;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e121); }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 91) {
                          s7 = peg$c101;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e106); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          s9 = peg$parseRecordOrExpressionList();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$currPos;
                            s11 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s12 = peg$c18;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e23); }
                            }
                            if (s12 !== peg$FAILED) {
                              s11 = [s11, s12];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                            if (s10 === peg$FAILED) {
                              s10 = null;
                            }
                            s11 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 93) {
                              s12 = peg$c102;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e107); }
                            }
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s4;
                              s4 = peg$f472(s1, s9);
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f473(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseExpression1();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Expression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Expression",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseCaseExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CaseExpression",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c268) {
      s1 = peg$c268;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e283); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseWhenClause();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseWhenClause();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseElseClause();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c269) {
            s7 = peg$c269;
            peg$currPos += 3;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e284); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseboundary();
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f474(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c268) {
        s1 = peg$c268;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e283); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpressionOrRowValue();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWhenClause();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseWhenClause();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseElseClause();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$currPos;
              s7 = peg$parse_();
              if (input.substr(peg$currPos, 3) === peg$c269) {
                s8 = peg$c269;
                peg$currPos += 3;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e284); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseboundary();
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f475(s3, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c8) {
          s1 = peg$c8;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.substr(peg$currPos, 4) === peg$c11) {
                s5 = peg$c11;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseElseClause();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    s9 = peg$currPos;
                    s10 = peg$parse_();
                    if (input.substr(peg$currPos, 3) === peg$c269) {
                      s11 = peg$c269;
                      peg$currPos += 3;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e284); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseboundary();
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f476(s3, s7, s8);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CaseExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CaseExpression",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWhenClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WhenClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c208) {
      s2 = peg$c208;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e217); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseExpressionOrRowValue();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseboundary();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c11) {
              s7 = peg$c11;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseExpression();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f477(s4, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WhenClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WhenClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseElseClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ElseClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c12) {
      s2 = peg$c12;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f478(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ElseClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ElseClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseExpressionOrRowValue() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExpressionOrRowValue",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRowValue();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExpressionOrRowValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExpressionOrRowValue",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRecordOrExpressionList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RecordOrExpressionList",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseRecordOrExpression();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseRecordOrExpression();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f479(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RecordOrExpressionList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RecordOrExpressionList",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRecordOrExpression() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RecordOrExpression",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseRecord();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f480(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseExpression();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RecordOrExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RecordOrExpression",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRowValue() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RowValue",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpressions();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c54;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f481(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c157) {
        s1 = peg$c157;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e166); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTable();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f482(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTableName();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseBraceColumnNameList();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f483(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseValuesList();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f484(s1);
          }
          s0 = s1;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RowValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RowValue",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseExpression1() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Expression1",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseUnOp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression1();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f485(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRowValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseBinCompOp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseRowValue();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f486(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseValue();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          s4 = peg$parseBinOp();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parseExpression1();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s2;
              s2 = peg$f487(s1, s4, s6);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f488(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseRowValue();
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Expression1",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Expression1",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseValue() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Value",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseCaseExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c10;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f489(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c157) {
          s3 = peg$c157;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e166); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c32) {
            s3 = peg$c32;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c248) {
              s3 = peg$c248;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e258); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseboundary();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        peg$silentFails--;
        if (s2 !== peg$FAILED) {
          peg$currPos = s1;
          s1 = undefined;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTable();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f490(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c114) {
            s1 = peg$c114;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e119); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c156) {
                s3 = peg$c156;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e165); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseTable();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f491(s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c156) {
              s1 = peg$c156;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e165); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseTable();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f492(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseVariable();
              if (s0 === peg$FAILED) {
                s0 = peg$parseLiteral();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c168) {
                    s1 = peg$c168;
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e177); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s3 = peg$c9;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e14); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      s5 = peg$parseExpression();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        s7 = peg$parseboundary();
                        if (s7 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c153) {
                            s8 = peg$c153;
                            peg$currPos += 2;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e162); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parse__();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parseTypeName();
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 41) {
                                  s12 = peg$c10;
                                  peg$currPos++;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                }
                                if (s12 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f493(s5, s10);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsePack();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseWindowFunctionCall();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFilteredFunctionCall();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseRaiseFunctionCall();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseFunctionCall();
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseName();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 46) {
                                  s4 = peg$c1;
                                  peg$currPos++;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parse_();
                                  s6 = peg$parseModulePathName();
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$currPos;
                                    s8 = peg$parse_();
                                    if (input.charCodeAt(peg$currPos) === 46) {
                                      s9 = peg$c1;
                                      peg$currPos++;
                                    } else {
                                      s9 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                    }
                                    if (s9 !== peg$FAILED) {
                                      s10 = peg$parse_();
                                      s11 = peg$parseName();
                                      if (s11 !== peg$FAILED) {
                                        peg$savedPos = s7;
                                        s7 = peg$f494(s1, s6, s11);
                                      } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s7;
                                      s7 = peg$FAILED;
                                    }
                                    if (s7 === peg$FAILED) {
                                      s7 = null;
                                    }
                                    peg$savedPos = s2;
                                    s2 = peg$f495(s1, s6, s7);
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = null;
                                }
                                s3 = peg$currPos;
                                peg$silentFails++;
                                s4 = peg$currPos;
                                s5 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 46) {
                                  s6 = peg$c1;
                                  peg$currPos++;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parse_();
                                  if (input.charCodeAt(peg$currPos) === 42) {
                                    s8 = peg$c106;
                                    peg$currPos++;
                                  } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e111); }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    s5 = [s5, s6, s7, s8];
                                    s4 = s5;
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                                peg$silentFails--;
                                if (s4 === peg$FAILED) {
                                  s3 = undefined;
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$FAILED;
                                }
                                if (s3 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f496(s1, s2);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Value",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Value",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsePack() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Pack",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c270) {
      s1 = peg$c270;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e285); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePackBody();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f497(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Pack",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Pack",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsePackBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PackBody",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePackNameList();
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c54;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f498(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = [];
        s4 = peg$parsePackBody();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c18;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s5 = peg$parsePackBody();
            if (s5 === peg$FAILED) {
              peg$currPos = s4;
              s4 = peg$FAILED;
            } else {
              s4 = s5;
            }
          } else {
            s4 = s5;
          }
        }
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c102;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f499(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseExpression();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PackBody",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PackBody",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsePackName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PackName",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseJSONObjectKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePackBody();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f500(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = input.charAt(peg$currPos);
        if (peg$r14.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e286); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        peg$silentFails--;
        if (s3 !== peg$FAILED) {
          peg$currPos = s2;
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f501(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f502(s1);
        }
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PackName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PackName",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsePackNameList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PackNameList",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = [];
    s1 = peg$parsePackName();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c18;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s2 = peg$parsePackName();
        if (s2 === peg$FAILED) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
      } else {
        s1 = s2;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PackNameList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PackNameList",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUnpackKeyValue() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnpackKeyValue",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseJSONObjectKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseUnpackBody();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f503(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseJSONObjectKey();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f504(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnpackKeyValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnpackKeyValue",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUnpackObject() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnpackObject",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnpackKeyValue();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s4 = [s4, s5, s6];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parseUnpackKeyValue();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f505(s1);
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnpackObject",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnpackObject",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUnpackArray() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnpackArray",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnpackBody();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s4 = [s4, s5, s6];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parseUnpackBody();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f506(s1);
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnpackArray",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnpackArray",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUnpackBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnpackBody",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseUnpackObject();
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c54;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f507(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseUnpackArray();
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c102;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f508(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f509(s1);
        }
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnpackBody",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnpackBody",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseUnpack() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Unpack",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c271) {
      s1 = peg$c271;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e287); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseExpression();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s8 = peg$c10;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s8 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f510(s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseName();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c1;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parseName();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 46) {
                  s10 = peg$c1;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  s12 = peg$parseName();
                  if (s12 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f511(s4, s8, s12);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 46) {
                s6 = peg$c1;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                s8 = peg$parseName();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f512(s4, s8);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseName();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$f513(s4);
              }
              s3 = s4;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseUnpackBody();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f514(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Unpack",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Unpack",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFilterClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FilterClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c272) {
      s1 = peg$c272;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e288); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 5) === peg$c219) {
          s5 = peg$c219;
          peg$currPos += 5;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e228); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseExpression();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c10;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f515(s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c102;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e107); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f516(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FilterClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FilterClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseOverClause() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "OverClause",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c273) {
      s1 = peg$c273;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e289); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWindowDefn();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f517(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c273) {
        s1 = peg$c273;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e289); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f518(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "OverClause",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "OverClause",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWindowDefn() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WindowDefn",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c274) {
        s6 = peg$c274;
        peg$currPos += 9;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e290); }
      }
      if (s6 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c243) {
          s6 = peg$c243;
          peg$currPos += 5;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e253); }
        }
        if (s6 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c275) {
            s6 = peg$c275;
            peg$currPos += 5;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e291); }
          }
          if (s6 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c276) {
              s6 = peg$c276;
              peg$currPos += 4;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e292); }
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c277) {
                s6 = peg$c277;
                peg$currPos += 6;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e293); }
              }
            }
          }
        }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseboundary();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f519(s5);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseboundary();
      if (s5 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c274) {
          s6 = peg$c274;
          peg$currPos += 9;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e290); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c244) {
              s8 = peg$c244;
              peg$currPos += 2;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e254); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseExpression();
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$currPos;
                  s13 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c18;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parse_();
                    s16 = peg$parseExpression();
                    if (s16 !== peg$FAILED) {
                      peg$savedPos = s12;
                      s12 = peg$f520(s2, s10, s16);
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                  while (s12 !== peg$FAILED) {
                    s11.push(s12);
                    s12 = peg$currPos;
                    s13 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s14 = peg$c18;
                      peg$currPos++;
                    } else {
                      s14 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e23); }
                    }
                    if (s14 !== peg$FAILED) {
                      s15 = peg$parse_();
                      s16 = peg$parseExpression();
                      if (s16 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s12 = peg$f520(s2, s10, s16);
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  }
                  peg$savedPos = s3;
                  s3 = peg$f521(s2, s10, s11);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      s6 = peg$parseboundary();
      if (s6 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c243) {
          s7 = peg$c243;
          peg$currPos += 5;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e253); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          if (s8 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c244) {
              s9 = peg$c244;
              peg$currPos += 2;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e254); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse__();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseOrderingTerm();
                if (s11 !== peg$FAILED) {
                  s12 = [];
                  s13 = peg$currPos;
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s15 = peg$c18;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = peg$parseOrderingTerm();
                    if (s17 !== peg$FAILED) {
                      peg$savedPos = s13;
                      s13 = peg$f522(s2, s3, s11, s17);
                    } else {
                      peg$currPos = s13;
                      s13 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s13;
                    s13 = peg$FAILED;
                  }
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = peg$currPos;
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s15 = peg$c18;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e23); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      s17 = peg$parseOrderingTerm();
                      if (s17 !== peg$FAILED) {
                        peg$savedPos = s13;
                        s13 = peg$f522(s2, s3, s11, s17);
                      } else {
                        peg$currPos = s13;
                        s13 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s13;
                      s13 = peg$FAILED;
                    }
                  }
                  peg$savedPos = s4;
                  s4 = peg$f523(s2, s3, s11, s12);
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      s6 = peg$parse_();
      s7 = peg$parseFrameSpec();
      if (s7 !== peg$FAILED) {
        peg$savedPos = s5;
        s5 = peg$f524(s2, s3, s4, s7);
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s7 = peg$c10;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s7 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f525(s2, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WindowDefn",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WindowDefn",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseOrderingTerm() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "OrderingTerm",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseboundary();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c183) {
          s5 = peg$c183;
          peg$currPos += 7;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e192); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseName();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f526(s1, s6);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseboundary();
      if (s5 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c99) {
          s6 = peg$c99;
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
        if (s6 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c100) {
            s6 = peg$c100;
            peg$currPos += 4;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e105); }
          }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f527(s1, s2, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      s6 = peg$parseboundary();
      if (s6 !== peg$FAILED) {
        s7 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c278) {
          s8 = peg$c278;
          peg$currPos += 5;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e294); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          if (s9 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c279) {
              s10 = peg$c279;
              peg$currPos += 5;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e295); }
            }
            if (s10 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f528(s1, s2, s3);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c278) {
            s8 = peg$c278;
            peg$currPos += 5;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e294); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            if (s9 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c280) {
                s10 = peg$c280;
                peg$currPos += 4;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e296); }
              }
              if (s10 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f529(s1, s2, s3);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f530(s1, s2, s3, s7);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f531(s1, s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "OrderingTerm",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "OrderingTerm",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFrameSpec() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FrameSpec",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c275) {
      s1 = peg$c275;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e291); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c276) {
        s1 = peg$c276;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e292); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c277) {
          s1 = peg$c277;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e293); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c117) {
          s4 = peg$c117;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c281) {
              s7 = peg$c281;
              peg$currPos += 9;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e297); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c282) {
                  s9 = peg$c282;
                  peg$currPos += 9;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e298); }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s6 = peg$f532(s1);
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c283) {
                s7 = peg$c283;
                peg$currPos += 7;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e299); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c63) {
                    s9 = peg$c63;
                    peg$currPos += 3;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e68); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s6 = peg$f533(s1);
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = peg$parseboundary();
                  if (s9 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c282) {
                      s10 = peg$c282;
                      peg$currPos += 9;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e298); }
                    }
                    if (s10 === peg$FAILED) {
                      if (input.substr(peg$currPos, 9) === peg$c284) {
                        s10 = peg$c284;
                        peg$currPos += 9;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e300); }
                      }
                    }
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s6 = peg$f534(s1, s7, s10);
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parseboundary();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c113) {
                  s9 = peg$c113;
                  peg$currPos += 3;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e118); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$currPos;
                    if (input.substr(peg$currPos, 9) === peg$c281) {
                      s12 = peg$c281;
                      peg$currPos += 9;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e297); }
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parse__();
                      if (s13 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 9) === peg$c284) {
                          s14 = peg$c284;
                          peg$currPos += 9;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e300); }
                        }
                        if (s14 !== peg$FAILED) {
                          peg$savedPos = s11;
                          s11 = peg$f535(s1, s6);
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    if (s11 === peg$FAILED) {
                      s11 = peg$currPos;
                      if (input.substr(peg$currPos, 7) === peg$c283) {
                        s12 = peg$c283;
                        peg$currPos += 7;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e299); }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c63) {
                            s14 = peg$c63;
                            peg$currPos += 3;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e68); }
                          }
                          if (s14 !== peg$FAILED) {
                            peg$savedPos = s11;
                            s11 = peg$f536(s1, s6);
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      if (s11 === peg$FAILED) {
                        s11 = peg$currPos;
                        s12 = peg$parseExpression();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parse_();
                          s14 = peg$parseboundary();
                          if (s14 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c282) {
                              s15 = peg$c282;
                              peg$currPos += 9;
                            } else {
                              s15 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e298); }
                            }
                            if (s15 === peg$FAILED) {
                              if (input.substr(peg$currPos, 9) === peg$c284) {
                                s15 = peg$c284;
                                peg$currPos += 9;
                              } else {
                                s15 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e300); }
                              }
                            }
                            if (s15 !== peg$FAILED) {
                              peg$savedPos = s11;
                              s11 = peg$f537(s1, s6, s12, s15);
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      }
                    }
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s3 = peg$f538(s1, s6, s11);
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c281) {
            s4 = peg$c281;
            peg$currPos += 9;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e297); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c282) {
                s6 = peg$c282;
                peg$currPos += 9;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e298); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s3 = peg$f539(s1);
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              s6 = peg$parseboundary();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c282) {
                  s7 = peg$c282;
                  peg$currPos += 9;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e298); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f540(s1, s4);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c283) {
                s4 = peg$c283;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e299); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                if (s5 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c63) {
                    s6 = peg$c63;
                    peg$currPos += 3;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e68); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f541(s1);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = peg$parseboundary();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c285) {
              s7 = peg$c285;
              peg$currPos += 7;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e301); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c34) {
                  s10 = peg$c34;
                  peg$currPos += 2;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e39); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse__();
                  if (s11 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c286) {
                      s12 = peg$c286;
                      peg$currPos += 6;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e302); }
                    }
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s9 = peg$f542(s1, s3);
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  if (input.substr(peg$currPos, 7) === peg$c283) {
                    s10 = peg$c283;
                    peg$currPos += 7;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e299); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse__();
                    if (s11 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c63) {
                        s12 = peg$c63;
                        peg$currPos += 3;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e68); }
                      }
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s9 = peg$f543(s1, s3);
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    if (input.substr(peg$currPos, 5) === peg$c249) {
                      s10 = peg$c249;
                      peg$currPos += 5;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e259); }
                    }
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s9;
                      s10 = peg$f544(s1, s3);
                    }
                    s9 = s10;
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.substr(peg$currPos, 4) === peg$c287) {
                        s10 = peg$c287;
                        peg$currPos += 4;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e303); }
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s9;
                        s10 = peg$f545(s1, s3);
                      }
                      s9 = s10;
                    }
                  }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s4 = peg$f546(s1, s3, s9);
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f547(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FrameSpec",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FrameSpec",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseWindowFunctionCall() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WindowFunctionCall",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseFilterClause();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOverClause();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseFunctionCall();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f548(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOverClause();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseFilteredFunctionCall();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f549(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOverClause();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseFunctionCall();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f550(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WindowFunctionCall",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WindowFunctionCall",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFilteredFunctionCall() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FilteredFunctionCall",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseFilterClause();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseFunctionCall();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f551(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FilteredFunctionCall",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FilteredFunctionCall",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRaiseFunctionCall() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RaiseFunctionCall",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c288) {
      s1 = peg$c288;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e304); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 6) === peg$c193) {
          s5 = peg$c193;
          peg$currPos += 6;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e202); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c10;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f552();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c288) {
        s1 = peg$c288;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e304); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.substr(peg$currPos, 8) === peg$c149) {
            s5 = peg$c149;
            peg$currPos += 8;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e158); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c191) {
              s5 = peg$c191;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e200); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c192) {
                s5 = peg$c192;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e201); }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c18;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseExpression();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s11 = peg$c10;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f553(s5, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RaiseFunctionCall",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RaiseFunctionCall",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFunctionCall() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionCall",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseModulePathName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s5;
          s6 = peg$f554(s1);
        }
        s5 = s6;
        if (s5 === peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 42) {
            s6 = peg$c106;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s8 = peg$c10;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f555(s1);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c242) {
              s6 = peg$c242;
              peg$currPos += 8;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e252); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseExpressions();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseOrderClause();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s11 = peg$c10;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s5 = peg$f556(s1, s8, s9);
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseExpressions();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseOrderClause();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s8 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s9 = peg$c10;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s5 = peg$f557(s1, s6, s7);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f558(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionCall",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionCall",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseNotTypeName() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NotTypeName",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c179) {
      s1 = peg$c179;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c174) {
        s1 = peg$c174;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e183); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c114) {
          s1 = peg$c114;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c176) {
            s1 = peg$c176;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e185); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c177) {
              s1 = peg$c177;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e186); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c182) {
                s1 = peg$c182;
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e191); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c183) {
                  s1 = peg$c183;
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e192); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 10) === peg$c289) {
                    s1 = peg$c289;
                    peg$currPos += 10;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e305); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c290) {
                      s1 = peg$c290;
                      peg$currPos += 9;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e306); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c153) {
                        s1 = peg$c153;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e162); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c189) {
                          s1 = peg$c189;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e198); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NotTypeName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NotTypeName",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseTypeName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TypeName",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseNotTypeName();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseName();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$currPos;
        peg$silentFails++;
        s8 = peg$parseNotTypeName();
        peg$silentFails--;
        if (s8 === peg$FAILED) {
          s7 = undefined;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseName();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f559(s3, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$currPos;
          peg$silentFails++;
          s8 = peg$parseNotTypeName();
          peg$silentFails--;
          if (s8 === peg$FAILED) {
            s7 = undefined;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseName();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f559(s3, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c9;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseSignedNumber();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c18;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseSignedNumber();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s13 = peg$c10;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
                if (s13 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s2 = peg$f560(s3, s4, s7, s11);
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$currPos;
          peg$silentFails++;
          s8 = peg$parseNotTypeName();
          peg$silentFails--;
          if (s8 === peg$FAILED) {
            s7 = undefined;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseName();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f561(s3, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parse_();
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$parseNotTypeName();
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = undefined;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseName();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f561(s3, s8);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseSignedNumber();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c10;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s2;
                s2 = peg$f562(s3, s4, s7);
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse_();
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$parseNotTypeName();
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = undefined;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseName();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f563(s3, s8);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse_();
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseNotTypeName();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = undefined;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseName();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s5 = peg$f563(s3, s8);
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            peg$savedPos = s2;
            s2 = peg$f564(s3, s4);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f565(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TypeName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TypeName",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRowType() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RowType",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseRowTypeField();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c18;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s6 = peg$parseRowTypeField();
          if (s6 === peg$FAILED) {
            peg$currPos = s5;
            s5 = peg$FAILED;
          } else {
            s5 = s6;
          }
        } else {
          s5 = s6;
        }
      }
      if (s4.length < 1) {
        peg$currPos = s3;
        s3 = peg$FAILED;
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f566(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RowType",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RowType",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRowTypeField() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RowTypeField",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTypeName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f567(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f568(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RowTypeField",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RowTypeField",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseSignedNumber() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SignedNumber",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r15.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e307); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseNumericLiteral();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f569(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SignedNumber",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SignedNumber",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseName() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Name",
      location: peg$computeLocation(startPos, startPos, true)
    });

    peg$silentFails++;
    s0 = peg$parseQuotedName();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIdentifier();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e308); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Name",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Name",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseQuotedName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "QuotedName",
      location: peg$computeLocation(startPos, startPos, true)
    });

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 96) {
      s3 = peg$c291;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e310); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (input.substr(peg$currPos, 2) === peg$c292) {
        s5 = peg$c292;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e311); }
      }
      if (s5 === peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r16.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e312); }
        }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (input.substr(peg$currPos, 2) === peg$c292) {
          s5 = peg$c292;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e311); }
        }
        if (s5 === peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r16.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e312); }
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 96) {
        s5 = peg$c291;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e310); }
      }
      if (s5 !== peg$FAILED) {
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 96) {
          s3 = peg$c291;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e310); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (input.substr(peg$currPos, 2) === peg$c292) {
            s5 = peg$c292;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e311); }
          }
          if (s5 === peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r16.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e312); }
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (input.substr(peg$currPos, 2) === peg$c292) {
              s5 = peg$c292;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e311); }
            }
            if (s5 === peg$FAILED) {
              s5 = input.charAt(peg$currPos);
              if (peg$r16.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e312); }
              }
            }
          }
          if (input.charCodeAt(peg$currPos) === 96) {
            s5 = peg$c291;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e310); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e309); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "QuotedName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "QuotedName",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Identifier",
      location: peg$computeLocation(startPos, startPos, true)
    });

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = input.charAt(peg$currPos);
    if (peg$r17.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e314); }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = input.charAt(peg$currPos);
      if (peg$r18.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e315); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$currPos;
        peg$silentFails++;
        s8 = input.charAt(peg$currPos);
        if (peg$r17.test(s8)) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e314); }
        }
        peg$silentFails--;
        if (s8 === peg$FAILED) {
          s7 = undefined;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s8 = input.charAt(peg$currPos);
          if (peg$r19.test(s8)) {
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e316); }
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          peg$silentFails++;
          s8 = input.charAt(peg$currPos);
          if (peg$r17.test(s8)) {
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e314); }
          }
          peg$silentFails--;
          if (s8 === peg$FAILED) {
            s7 = undefined;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = input.charAt(peg$currPos);
            if (peg$r19.test(s8)) {
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e316); }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f570(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f571(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e313); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Identifier",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Identifier",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Literal",
      location: peg$computeLocation(startPos, startPos, true)
    });

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c293) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e318); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseboundary();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f572();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 5);
      if (s1.toLowerCase() === peg$c294) {
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e319); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseboundary();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f573();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c40) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e320); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseboundary();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f574();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseStringLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNumericLiteral();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e317); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Literal",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Literal",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseStringLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StringLiteral",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseSQLStringLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = input.substr(peg$currPos, 2);
      if (s2.toLowerCase() === peg$c295) {
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e321); }
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapedString();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f575(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseJSONString();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f576(s1);
        }
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StringLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StringLiteral",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseParsedStringLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ParsedStringLiteral",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseSQLStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f577(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c295) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e321); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseEscapedStringBody();
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f578(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseJSONString();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f579(s1);
        }
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ParsedStringLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ParsedStringLiteral",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseSQLStringLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SQLStringLiteral",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s3 = peg$c2;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (input.substr(peg$currPos, 2) === peg$c237) {
        s5 = peg$c237;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e246); }
      }
      if (s5 === peg$FAILED) {
        s5 = input.charAt(peg$currPos);
        if (peg$r20.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e322); }
        }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (input.substr(peg$currPos, 2) === peg$c237) {
          s5 = peg$c237;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e246); }
        }
        if (s5 === peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r20.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e322); }
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 39) {
        s5 = peg$c2;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s5 !== peg$FAILED) {
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (input.substr(peg$currPos, 2) === peg$c237) {
            s5 = peg$c237;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e246); }
          }
          if (s5 === peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r20.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e322); }
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (input.substr(peg$currPos, 2) === peg$c237) {
              s5 = peg$c237;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e246); }
            }
            if (s5 === peg$FAILED) {
              s5 = input.charAt(peg$currPos);
              if (peg$r20.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e322); }
              }
            }
          }
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c2;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SQLStringLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SQLStringLiteral",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseEscapedString() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EscapedString",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c296) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e323); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f580();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c295) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e321); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapedStringBody();
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f581(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EscapedString",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EscapedString",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseEscapedStringBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EscapedStringBody",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s3 = peg$c4;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s5 = peg$c2;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s4;
        s5 = peg$f582();
      }
      s4 = s5;
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s5 = peg$c3;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$f583();
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s5 = peg$c4;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$f584();
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c297;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e324); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$f585();
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 97) {
                s5 = peg$c298;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e325); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$f586();
              }
              s4 = s5;
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s5 = peg$c299;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e326); }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$f587();
                }
                s4 = s5;
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 101) {
                    s5 = peg$c300;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e327); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$f588();
                  }
                  s4 = s5;
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 102) {
                      s5 = peg$c301;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e328); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$f589();
                    }
                    s4 = s5;
                    if (s4 === peg$FAILED) {
                      s4 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 110) {
                        s5 = peg$c76;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e81); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s4;
                        s5 = peg$f590();
                      }
                      s4 = s5;
                      if (s4 === peg$FAILED) {
                        s4 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 114) {
                          s5 = peg$c302;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e329); }
                        }
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s4;
                          s5 = peg$f591();
                        }
                        s4 = s5;
                        if (s4 === peg$FAILED) {
                          s4 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 116) {
                            s5 = peg$c80;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e85); }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s4;
                            s5 = peg$f592();
                          }
                          s4 = s5;
                          if (s4 === peg$FAILED) {
                            s4 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 118) {
                              s5 = peg$c303;
                              peg$currPos++;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e330); }
                            }
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s4;
                              s5 = peg$f593();
                            }
                            s4 = s5;
                            if (s4 === peg$FAILED) {
                              s4 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 120) {
                                s5 = peg$c304;
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e331); }
                              }
                              if (s5 !== peg$FAILED) {
                                s6 = peg$currPos;
                                s7 = peg$currPos;
                                s8 = input.charAt(peg$currPos);
                                if (peg$r21.test(s8)) {
                                  peg$currPos++;
                                } else {
                                  s8 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                }
                                if (s8 !== peg$FAILED) {
                                  s9 = input.charAt(peg$currPos);
                                  if (peg$r21.test(s9)) {
                                    peg$currPos++;
                                  } else {
                                    s9 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                  }
                                  if (s9 !== peg$FAILED) {
                                    s8 = [s8, s9];
                                    s7 = s8;
                                  } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                  s6 = input.substring(s6, peg$currPos);
                                } else {
                                  s6 = s7;
                                }
                                if (s6 !== peg$FAILED) {
                                  peg$savedPos = s4;
                                  s4 = peg$f594(s6);
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                              if (s4 === peg$FAILED) {
                                s4 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c305) {
                                  s5 = peg$c305;
                                  peg$currPos += 2;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e333); }
                                }
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$currPos;
                                  s7 = [];
                                  s8 = input.charAt(peg$currPos);
                                  if (peg$r21.test(s8)) {
                                    peg$currPos++;
                                  } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    while (s8 !== peg$FAILED) {
                                      s7.push(s8);
                                      s8 = input.charAt(peg$currPos);
                                      if (peg$r21.test(s8)) {
                                        peg$currPos++;
                                      } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                      }
                                    }
                                  } else {
                                    s7 = peg$FAILED;
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s6 = input.substring(s6, peg$currPos);
                                  } else {
                                    s6 = s7;
                                  }
                                  if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 125) {
                                      s7 = peg$c54;
                                      peg$currPos++;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e59); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                      peg$savedPos = s4;
                                      s4 = peg$f595(s6);
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                                if (s4 === peg$FAILED) {
                                  s4 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 117) {
                                    s5 = peg$c306;
                                    peg$currPos++;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e334); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$currPos;
                                    s7 = peg$currPos;
                                    s8 = input.charAt(peg$currPos);
                                    if (peg$r21.test(s8)) {
                                      peg$currPos++;
                                    } else {
                                      s8 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                    }
                                    if (s8 !== peg$FAILED) {
                                      s9 = input.charAt(peg$currPos);
                                      if (peg$r21.test(s9)) {
                                        peg$currPos++;
                                      } else {
                                        s9 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                      }
                                      if (s9 !== peg$FAILED) {
                                        s10 = input.charAt(peg$currPos);
                                        if (peg$r21.test(s10)) {
                                          peg$currPos++;
                                        } else {
                                          s10 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                        }
                                        if (s10 !== peg$FAILED) {
                                          s11 = input.charAt(peg$currPos);
                                          if (peg$r21.test(s11)) {
                                            peg$currPos++;
                                          } else {
                                            s11 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                          }
                                          if (s11 !== peg$FAILED) {
                                            s8 = [s8, s9, s10, s11];
                                            s7 = s8;
                                          } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s7;
                                          s7 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s7;
                                      s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                      s6 = input.substring(s6, peg$currPos);
                                    } else {
                                      s6 = s7;
                                    }
                                    if (s6 !== peg$FAILED) {
                                      peg$savedPos = s4;
                                      s4 = peg$f596(s6);
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                  if (s4 === peg$FAILED) {
                                    s4 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c307) {
                                      s5 = peg$c307;
                                      peg$currPos += 2;
                                    } else {
                                      s5 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e335); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parse_();
                                      s7 = peg$parseExpression();
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s9 = peg$c10;
                                          peg$currPos++;
                                        } else {
                                          s9 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                        }
                                        if (s9 !== peg$FAILED) {
                                          peg$savedPos = s4;
                                          s4 = peg$f597(s7);
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                    if (s4 === peg$FAILED) {
                                      s4 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 40) {
                                        s5 = peg$c9;
                                        peg$currPos++;
                                      } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                      }
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parse_();
                                        s7 = peg$parseExpression();
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parse_();
                                          if (input.charCodeAt(peg$currPos) === 41) {
                                            s9 = peg$c10;
                                            peg$currPos++;
                                          } else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                          }
                                          if (s9 !== peg$FAILED) {
                                            peg$savedPos = s4;
                                            s4 = peg$f598(s7);
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                      if (s4 === peg$FAILED) {
                                        s4 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 37) {
                                          s5 = peg$c308;
                                          peg$currPos++;
                                        } else {
                                          s5 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e336); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$currPos;
                                          s7 = peg$parseFormatOption();
                                          if (s7 !== peg$FAILED) {
                                            s6 = input.substring(s6, peg$currPos);
                                          } else {
                                            s6 = s7;
                                          }
                                          if (s6 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 40) {
                                              s7 = peg$c9;
                                              peg$currPos++;
                                            } else {
                                              s7 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                            }
                                            if (s7 !== peg$FAILED) {
                                              s8 = peg$parse_();
                                              s9 = peg$parseExpression();
                                              if (s9 !== peg$FAILED) {
                                                s10 = peg$parse_();
                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                  s11 = peg$c10;
                                                  peg$currPos++;
                                                } else {
                                                  s11 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                  peg$savedPos = s4;
                                                  s4 = peg$f599(s6, s9);
                                                } else {
                                                  peg$currPos = s4;
                                                  s4 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s4;
                                                s4 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f600(s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c237) {
        s3 = peg$c237;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e246); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f601();
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s3 = peg$c308;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e336); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f602();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$currPos;
          s4 = [];
          s5 = input.charAt(peg$currPos);
          if (peg$r22.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e337); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = input.charAt(peg$currPos);
              if (peg$r22.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e337); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$f603(s3);
          }
          s2 = s3;
        }
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$f582();
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s5 = peg$c3;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$f583();
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s5 = peg$c4;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$f584();
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c297;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e324); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$f585();
              }
              s4 = s5;
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 97) {
                  s5 = peg$c298;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e325); }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$f586();
                }
                s4 = s5;
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 98) {
                    s5 = peg$c299;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e326); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$f587();
                  }
                  s4 = s5;
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 101) {
                      s5 = peg$c300;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e327); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$f588();
                    }
                    s4 = s5;
                    if (s4 === peg$FAILED) {
                      s4 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 102) {
                        s5 = peg$c301;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e328); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s4;
                        s5 = peg$f589();
                      }
                      s4 = s5;
                      if (s4 === peg$FAILED) {
                        s4 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 110) {
                          s5 = peg$c76;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e81); }
                        }
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s4;
                          s5 = peg$f590();
                        }
                        s4 = s5;
                        if (s4 === peg$FAILED) {
                          s4 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 114) {
                            s5 = peg$c302;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e329); }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s4;
                            s5 = peg$f591();
                          }
                          s4 = s5;
                          if (s4 === peg$FAILED) {
                            s4 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 116) {
                              s5 = peg$c80;
                              peg$currPos++;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e85); }
                            }
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s4;
                              s5 = peg$f592();
                            }
                            s4 = s5;
                            if (s4 === peg$FAILED) {
                              s4 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 118) {
                                s5 = peg$c303;
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e330); }
                              }
                              if (s5 !== peg$FAILED) {
                                peg$savedPos = s4;
                                s5 = peg$f593();
                              }
                              s4 = s5;
                              if (s4 === peg$FAILED) {
                                s4 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 120) {
                                  s5 = peg$c304;
                                  peg$currPos++;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e331); }
                                }
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$currPos;
                                  s7 = peg$currPos;
                                  s8 = input.charAt(peg$currPos);
                                  if (peg$r21.test(s8)) {
                                    peg$currPos++;
                                  } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    s9 = input.charAt(peg$currPos);
                                    if (peg$r21.test(s9)) {
                                      peg$currPos++;
                                    } else {
                                      s9 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                    }
                                    if (s9 !== peg$FAILED) {
                                      s8 = [s8, s9];
                                      s7 = s8;
                                    } else {
                                      peg$currPos = s7;
                                      s7 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s6 = input.substring(s6, peg$currPos);
                                  } else {
                                    s6 = s7;
                                  }
                                  if (s6 !== peg$FAILED) {
                                    peg$savedPos = s4;
                                    s4 = peg$f594(s6);
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                                if (s4 === peg$FAILED) {
                                  s4 = peg$currPos;
                                  if (input.substr(peg$currPos, 2) === peg$c305) {
                                    s5 = peg$c305;
                                    peg$currPos += 2;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e333); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$currPos;
                                    s7 = [];
                                    s8 = input.charAt(peg$currPos);
                                    if (peg$r21.test(s8)) {
                                      peg$currPos++;
                                    } else {
                                      s8 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                    }
                                    if (s8 !== peg$FAILED) {
                                      while (s8 !== peg$FAILED) {
                                        s7.push(s8);
                                        s8 = input.charAt(peg$currPos);
                                        if (peg$r21.test(s8)) {
                                          peg$currPos++;
                                        } else {
                                          s8 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                        }
                                      }
                                    } else {
                                      s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                      s6 = input.substring(s6, peg$currPos);
                                    } else {
                                      s6 = s7;
                                    }
                                    if (s6 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 125) {
                                        s7 = peg$c54;
                                        peg$currPos++;
                                      } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e59); }
                                      }
                                      if (s7 !== peg$FAILED) {
                                        peg$savedPos = s4;
                                        s4 = peg$f595(s6);
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                  if (s4 === peg$FAILED) {
                                    s4 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 117) {
                                      s5 = peg$c306;
                                      peg$currPos++;
                                    } else {
                                      s5 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e334); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$currPos;
                                      s7 = peg$currPos;
                                      s8 = input.charAt(peg$currPos);
                                      if (peg$r21.test(s8)) {
                                        peg$currPos++;
                                      } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                      }
                                      if (s8 !== peg$FAILED) {
                                        s9 = input.charAt(peg$currPos);
                                        if (peg$r21.test(s9)) {
                                          peg$currPos++;
                                        } else {
                                          s9 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                        }
                                        if (s9 !== peg$FAILED) {
                                          s10 = input.charAt(peg$currPos);
                                          if (peg$r21.test(s10)) {
                                            peg$currPos++;
                                          } else {
                                            s10 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                          }
                                          if (s10 !== peg$FAILED) {
                                            s11 = input.charAt(peg$currPos);
                                            if (peg$r21.test(s11)) {
                                              peg$currPos++;
                                            } else {
                                              s11 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e332); }
                                            }
                                            if (s11 !== peg$FAILED) {
                                              s8 = [s8, s9, s10, s11];
                                              s7 = s8;
                                            } else {
                                              peg$currPos = s7;
                                              s7 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s7;
                                          s7 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s6 = input.substring(s6, peg$currPos);
                                      } else {
                                        s6 = s7;
                                      }
                                      if (s6 !== peg$FAILED) {
                                        peg$savedPos = s4;
                                        s4 = peg$f596(s6);
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                    if (s4 === peg$FAILED) {
                                      s4 = peg$currPos;
                                      if (input.substr(peg$currPos, 2) === peg$c307) {
                                        s5 = peg$c307;
                                        peg$currPos += 2;
                                      } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e335); }
                                      }
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parse_();
                                        s7 = peg$parseExpression();
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parse_();
                                          if (input.charCodeAt(peg$currPos) === 41) {
                                            s9 = peg$c10;
                                            peg$currPos++;
                                          } else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                          }
                                          if (s9 !== peg$FAILED) {
                                            peg$savedPos = s4;
                                            s4 = peg$f597(s7);
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                      if (s4 === peg$FAILED) {
                                        s4 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 40) {
                                          s5 = peg$c9;
                                          peg$currPos++;
                                        } else {
                                          s5 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parse_();
                                          s7 = peg$parseExpression();
                                          if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s9 = peg$c10;
                                              peg$currPos++;
                                            } else {
                                              s9 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                            }
                                            if (s9 !== peg$FAILED) {
                                              peg$savedPos = s4;
                                              s4 = peg$f598(s7);
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 37) {
                                            s5 = peg$c308;
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e336); }
                                          }
                                          if (s5 !== peg$FAILED) {
                                            s6 = peg$currPos;
                                            s7 = peg$parseFormatOption();
                                            if (s7 !== peg$FAILED) {
                                              s6 = input.substring(s6, peg$currPos);
                                            } else {
                                              s6 = s7;
                                            }
                                            if (s6 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 40) {
                                                s7 = peg$c9;
                                                peg$currPos++;
                                              } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                              }
                                              if (s7 !== peg$FAILED) {
                                                s8 = peg$parse_();
                                                s9 = peg$parseExpression();
                                                if (s9 !== peg$FAILED) {
                                                  s10 = peg$parse_();
                                                  if (input.charCodeAt(peg$currPos) === 41) {
                                                    s11 = peg$c10;
                                                    peg$currPos++;
                                                  } else {
                                                    s11 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                                  }
                                                  if (s11 !== peg$FAILED) {
                                                    peg$savedPos = s4;
                                                    s4 = peg$f599(s6, s9);
                                                  } else {
                                                    peg$currPos = s4;
                                                    s4 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s4;
                                                  s4 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s4;
                                                s4 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f600(s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c237) {
          s3 = peg$c237;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e246); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f601();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 37) {
            s3 = peg$c308;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e336); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$f602();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            s4 = [];
            s5 = input.charAt(peg$currPos);
            if (peg$r22.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e337); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = input.charAt(peg$currPos);
                if (peg$r22.test(s5)) {
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e337); }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$f603(s3);
            }
            s2 = s3;
          }
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f604(s1);
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EscapedStringBody",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EscapedStringBody",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFormatOption() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FormatOption",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseFormatFlags();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseFormatWidth();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseFormatPrecision();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseFormatType();
    if (s4 !== peg$FAILED) {
      s1 = [s1, s2, s3, s4];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FormatOption",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FormatOption",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFormatFlags() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FormatFlags",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r23.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e338); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r23.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e338); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FormatFlags",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FormatFlags",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFormatWidth() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FormatWidth",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r24.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e339); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r25.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e340); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r25.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e340); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FormatWidth",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FormatWidth",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFormatPrecision() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FormatPrecision",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c1;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r25.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e340); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r25.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e340); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FormatPrecision",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FormatPrecision",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseFormatType() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FormatType",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = input.charAt(peg$currPos);
    if (peg$r26.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e341); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FormatType",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FormatType",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseNumericLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NumericLiteral",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c309) {
      s3 = peg$c309;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e342); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r21.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e332); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r21.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e332); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s7 = peg$c310;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e343); }
        }
        if (s7 !== peg$FAILED) {
          s8 = [];
          s9 = input.charAt(peg$currPos);
          if (peg$r21.test(s9)) {
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e332); }
          }
          if (s9 !== peg$FAILED) {
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = input.charAt(peg$currPos);
              if (peg$r21.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e332); }
              }
            }
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s7 = peg$c310;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e343); }
          }
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = input.charAt(peg$currPos);
            if (peg$r21.test(s9)) {
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e332); }
            }
            if (s9 !== peg$FAILED) {
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = input.charAt(peg$currPos);
                if (peg$r21.test(s9)) {
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e332); }
                }
              }
            } else {
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f605(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r25.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e340); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r25.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e340); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s6 = peg$c310;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e343); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = input.charAt(peg$currPos);
          if (peg$r25.test(s8)) {
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e340); }
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = input.charAt(peg$currPos);
              if (peg$r25.test(s8)) {
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s6 = peg$c310;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e343); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = input.charAt(peg$currPos);
            if (peg$r25.test(s8)) {
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e340); }
            }
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = input.charAt(peg$currPos);
                if (peg$r25.test(s8)) {
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e340); }
                }
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c1;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$currPos;
          s8 = [];
          s9 = input.charAt(peg$currPos);
          if (peg$r25.test(s9)) {
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e340); }
          }
          if (s9 !== peg$FAILED) {
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = input.charAt(peg$currPos);
              if (peg$r25.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
            }
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s11 = peg$c310;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e343); }
            }
            if (s11 !== peg$FAILED) {
              s12 = [];
              s13 = input.charAt(peg$currPos);
              if (peg$r25.test(s13)) {
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
              if (s13 !== peg$FAILED) {
                while (s13 !== peg$FAILED) {
                  s12.push(s13);
                  s13 = input.charAt(peg$currPos);
                  if (peg$r25.test(s13)) {
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e340); }
                  }
                }
              } else {
                s12 = peg$FAILED;
              }
              if (s12 !== peg$FAILED) {
                s11 = [s11, s12];
                s10 = s11;
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 95) {
                s11 = peg$c310;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e343); }
              }
              if (s11 !== peg$FAILED) {
                s12 = [];
                s13 = input.charAt(peg$currPos);
                if (peg$r25.test(s13)) {
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e340); }
                }
                if (s13 !== peg$FAILED) {
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = input.charAt(peg$currPos);
                    if (peg$r25.test(s13)) {
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e340); }
                    }
                  }
                } else {
                  s12 = peg$FAILED;
                }
                if (s12 !== peg$FAILED) {
                  s11 = [s11, s12];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            }
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        s7 = input.charAt(peg$currPos);
        if (peg$r27.test(s7)) {
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e344); }
        }
        if (s7 !== peg$FAILED) {
          s8 = input.charAt(peg$currPos);
          if (peg$r28.test(s8)) {
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e345); }
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = [];
          s10 = input.charAt(peg$currPos);
          if (peg$r25.test(s10)) {
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e340); }
          }
          if (s10 !== peg$FAILED) {
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = input.charAt(peg$currPos);
              if (peg$r25.test(s10)) {
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
            }
          } else {
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            s10 = [];
            s11 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s12 = peg$c310;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e343); }
            }
            if (s12 !== peg$FAILED) {
              s13 = [];
              s14 = input.charAt(peg$currPos);
              if (peg$r25.test(s14)) {
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
              if (s14 !== peg$FAILED) {
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = input.charAt(peg$currPos);
                  if (peg$r25.test(s14)) {
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e340); }
                  }
                }
              } else {
                s13 = peg$FAILED;
              }
              if (s13 !== peg$FAILED) {
                s12 = [s12, s13];
                s11 = s12;
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            while (s11 !== peg$FAILED) {
              s10.push(s11);
              s11 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 95) {
                s12 = peg$c310;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e343); }
              }
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = input.charAt(peg$currPos);
                if (peg$r25.test(s14)) {
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e340); }
                }
                if (s14 !== peg$FAILED) {
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = input.charAt(peg$currPos);
                    if (peg$r25.test(s14)) {
                      peg$currPos++;
                    } else {
                      s14 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e340); }
                    }
                  }
                } else {
                  s13 = peg$FAILED;
                }
                if (s13 !== peg$FAILED) {
                  s12 = [s12, s13];
                  s11 = s12;
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            }
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s3 = [s3, s4, s5, s6];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f606(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = input.charAt(peg$currPos);
          if (peg$r25.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e340); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = input.charAt(peg$currPos);
              if (peg$r25.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s7 = peg$c310;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e343); }
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = input.charAt(peg$currPos);
              if (peg$r25.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
              if (s9 !== peg$FAILED) {
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = input.charAt(peg$currPos);
                  if (peg$r25.test(s9)) {
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e340); }
                  }
                }
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 95) {
                s7 = peg$c310;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e343); }
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = input.charAt(peg$currPos);
                if (peg$r25.test(s9)) {
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e340); }
                }
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = input.charAt(peg$currPos);
                    if (peg$r25.test(s9)) {
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e340); }
                    }
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            s6 = peg$currPos;
            s7 = input.charAt(peg$currPos);
            if (peg$r27.test(s7)) {
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e344); }
            }
            if (s7 !== peg$FAILED) {
              s8 = input.charAt(peg$currPos);
              if (peg$r28.test(s8)) {
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e345); }
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = [];
              s10 = input.charAt(peg$currPos);
              if (peg$r25.test(s10)) {
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e340); }
              }
              if (s10 !== peg$FAILED) {
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = input.charAt(peg$currPos);
                  if (peg$r25.test(s10)) {
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e340); }
                  }
                }
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 95) {
                  s12 = peg$c310;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e343); }
                }
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = input.charAt(peg$currPos);
                  if (peg$r25.test(s14)) {
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e340); }
                  }
                  if (s14 !== peg$FAILED) {
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = input.charAt(peg$currPos);
                      if (peg$r25.test(s14)) {
                        peg$currPos++;
                      } else {
                        s14 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e340); }
                      }
                    }
                  } else {
                    s13 = peg$FAILED;
                  }
                  if (s13 !== peg$FAILED) {
                    s12 = [s12, s13];
                    s11 = s12;
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 95) {
                    s12 = peg$c310;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e343); }
                  }
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = input.charAt(peg$currPos);
                    if (peg$r25.test(s14)) {
                      peg$currPos++;
                    } else {
                      s14 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e340); }
                    }
                    if (s14 !== peg$FAILED) {
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = input.charAt(peg$currPos);
                        if (peg$r25.test(s14)) {
                          peg$currPos++;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e340); }
                        }
                      }
                    } else {
                      s13 = peg$FAILED;
                    }
                    if (s13 !== peg$FAILED) {
                      s12 = [s12, s13];
                      s11 = s12;
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                }
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s3 = [s3, s4, s5, s6];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f607(s1);
        }
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NumericLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NumericLiteral",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseRawBlock() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RawBlock",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (input.charCodeAt(peg$currPos) === 96) {
      s3 = peg$c291;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e310); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 96) {
          s3 = peg$c291;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e310); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r29.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e346); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r29.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e346); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 13) {
        s3 = peg$c311;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e347); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s4 = peg$c312;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e348); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$currPos;
        s8 = peg$currPos;
        peg$silentFails++;
        s9 = peg$currPos;
        s10 = peg$currPos;
        s11 = [];
        if (input.charCodeAt(peg$currPos) === 96) {
          s12 = peg$c291;
          peg$currPos++;
        } else {
          s12 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e310); }
        }
        if (s12 !== peg$FAILED) {
          while (s12 !== peg$FAILED) {
            s11.push(s12);
            if (input.charCodeAt(peg$currPos) === 96) {
              s12 = peg$c291;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e310); }
            }
          }
        } else {
          s11 = peg$FAILED;
        }
        if (s11 !== peg$FAILED) {
          s10 = input.substring(s10, peg$currPos);
        } else {
          s10 = s11;
        }
        if (s10 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s11 = peg$f608(s1, s2, s10);
          if (s11) {
            s11 = undefined;
          } else {
            s11 = peg$FAILED;
          }
          if (s11 !== peg$FAILED) {
            s10 = [s10, s11];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        peg$silentFails--;
        if (s9 === peg$FAILED) {
          s8 = undefined;
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 !== peg$FAILED) {
          s9 = [];
          s10 = input.charAt(peg$currPos);
          if (peg$r30.test(s10)) {
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e349); }
          }
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = input.charAt(peg$currPos);
            if (peg$r30.test(s10)) {
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e349); }
            }
          }
          if (input.charCodeAt(peg$currPos) === 13) {
            s10 = peg$c311;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e347); }
          }
          if (s10 === peg$FAILED) {
            s10 = null;
          }
          if (input.charCodeAt(peg$currPos) === 10) {
            s11 = peg$c312;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e348); }
          }
          if (s11 !== peg$FAILED) {
            s8 = [s8, s9, s10, s11];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$currPos;
          peg$silentFails++;
          s9 = peg$currPos;
          s10 = peg$currPos;
          s11 = [];
          if (input.charCodeAt(peg$currPos) === 96) {
            s12 = peg$c291;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e310); }
          }
          if (s12 !== peg$FAILED) {
            while (s12 !== peg$FAILED) {
              s11.push(s12);
              if (input.charCodeAt(peg$currPos) === 96) {
                s12 = peg$c291;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e310); }
              }
            }
          } else {
            s11 = peg$FAILED;
          }
          if (s11 !== peg$FAILED) {
            s10 = input.substring(s10, peg$currPos);
          } else {
            s10 = s11;
          }
          if (s10 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s11 = peg$f608(s1, s2, s10);
            if (s11) {
              s11 = undefined;
            } else {
              s11 = peg$FAILED;
            }
            if (s11 !== peg$FAILED) {
              s10 = [s10, s11];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          peg$silentFails--;
          if (s9 === peg$FAILED) {
            s8 = undefined;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = input.charAt(peg$currPos);
            if (peg$r30.test(s10)) {
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e349); }
            }
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = input.charAt(peg$currPos);
              if (peg$r30.test(s10)) {
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e349); }
              }
            }
            if (input.charCodeAt(peg$currPos) === 13) {
              s10 = peg$c311;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e347); }
            }
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c312;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e348); }
            }
            if (s11 !== peg$FAILED) {
              s8 = [s8, s9, s10, s11];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        s5 = input.substring(s5, peg$currPos);
        s6 = peg$currPos;
        s7 = [];
        if (input.charCodeAt(peg$currPos) === 96) {
          s8 = peg$c291;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e310); }
        }
        if (s8 !== peg$FAILED) {
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            if (input.charCodeAt(peg$currPos) === 96) {
              s8 = peg$c291;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e310); }
            }
          }
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s6 = input.substring(s6, peg$currPos);
        } else {
          s6 = s7;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f609(s1, s2, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RawBlock",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RawBlock",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsecomment() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "comment",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c313) {
      s1 = peg$c313;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e350); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c314) {
        s5 = peg$c314;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e351); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c314) {
          s5 = peg$c314;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e351); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c314) {
        s3 = peg$c314;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e351); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c128) {
        s1 = peg$c128;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e134); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 10) {
          s5 = peg$c312;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e348); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 10) {
            s5 = peg$c312;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e348); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "comment",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "comment",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parsespace() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "space",
      location: peg$computeLocation(startPos, startPos, true)
    });

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r17.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e314); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e352); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "space",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "space",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parse_() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "_",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = [];
    s1 = peg$parsecomment();
    if (s1 === peg$FAILED) {
      s1 = [];
      s2 = peg$parsespace();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsespace();
        }
      } else {
        s1 = peg$FAILED;
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsecomment();
      if (s1 === peg$FAILED) {
        s1 = [];
        s2 = peg$parsespace();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsespace();
          }
        } else {
          s1 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "_",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "_",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseboundary() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "boundary",
      location: peg$computeLocation(startPos, startPos, true)
    });

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f610();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e353); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "boundary",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "boundary",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parse__() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "__",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseboundary();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "__",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "__",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONValue() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONValue",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseJSONObject();
    if (s0 === peg$FAILED) {
      s0 = peg$parseJSONArray();
      if (s0 === peg$FAILED) {
        s0 = peg$parseJSONString();
        if (s0 === peg$FAILED) {
          s0 = peg$parseJSONNumber();
          if (s0 === peg$FAILED) {
            s0 = peg$parseJSONBoolean();
            if (s0 === peg$FAILED) {
              s0 = peg$parseJSONNull();
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONValue",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONBoolean() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONBoolean",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c293) {
      s1 = peg$c293;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e354); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f611();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c294) {
        s1 = peg$c294;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e355); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f612();
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONBoolean",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONBoolean",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONNull() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONNull",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f613();
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONNull",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONNull",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONObject() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONObject",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseJSONObjectEntry();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c18;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseJSONObjectEntry();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c54;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f614(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONObject",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONObject",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONObjectKey() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONObjectKey",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseJSONString();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f615(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONObjectKey",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONObjectKey",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONObjectEntry() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONObjectEntry",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseJSONObjectKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseJSONValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f616(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONObjectEntry",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONObjectEntry",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONArray() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONArray",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseJSONValue();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c18;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseJSONValue();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c102;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f617(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONArray",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONArray",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONString() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONString",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s3 = peg$c3;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseJSONStringBody();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseJSONStringBody();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s5 = peg$c3;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s5 !== peg$FAILED) {
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f618(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONString",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONString",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONStringBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONStringBody",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c315) {
      s1 = peg$c315;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e356); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r21.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e332); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r21.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e332); }
        }
        if (s3 !== peg$FAILED) {
          s4 = input.charAt(peg$currPos);
          if (peg$r21.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e332); }
          }
          if (s4 !== peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r21.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e332); }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c4;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = input.charAt(peg$currPos);
        if (peg$r31.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e357); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = input.charAt(peg$currPos);
        if (peg$r32.test(s0)) {
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e358); }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONStringBody",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONStringBody",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseJSONNumber() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "JSONNumber",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s3 = peg$c316;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e359); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = [];
    s5 = input.charAt(peg$currPos);
    if (peg$r25.test(s5)) {
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e340); }
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r25.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e340); }
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = input.charAt(peg$currPos);
        if (peg$r25.test(s8)) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e340); }
        }
        if (s8 !== peg$FAILED) {
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = input.charAt(peg$currPos);
            if (peg$r25.test(s8)) {
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e340); }
            }
          }
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$currPos;
      s7 = input.charAt(peg$currPos);
      if (peg$r27.test(s7)) {
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e344); }
      }
      if (s7 !== peg$FAILED) {
        s8 = input.charAt(peg$currPos);
        if (peg$r28.test(s8)) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e345); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = [];
        s10 = input.charAt(peg$currPos);
        if (peg$r25.test(s10)) {
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e340); }
        }
        if (s10 !== peg$FAILED) {
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = input.charAt(peg$currPos);
            if (peg$r25.test(s10)) {
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e340); }
            }
          }
        } else {
          s9 = peg$FAILED;
        }
        if (s9 !== peg$FAILED) {
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f619(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "JSONNumber",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "JSONNumber",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseQuasiJsonExpression() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "QuasiJsonExpression",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$parseQuasiJsonObject();
    if (s0 === peg$FAILED) {
      s0 = peg$parseQuasiJsonArray();
      if (s0 === peg$FAILED) {
        s0 = peg$parseExpression();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "QuasiJsonExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "QuasiJsonExpression",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseQuasiJsonObject() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "QuasiJsonObject",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseQuasiJsonObjectEntries();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f620(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "QuasiJsonObject",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "QuasiJsonObject",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseQuasiJsonArray() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "QuasiJsonArray",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseQuasiJsonExpression();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c18;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseQuasiJsonExpression();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c102;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f621(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "QuasiJsonArray",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "QuasiJsonArray",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseQuasiJsonObjectEntry() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "QuasiJsonObjectEntry",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    s1 = peg$parseJSONObjectKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c65;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseQuasiJsonExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f622(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "QuasiJsonObjectEntry",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "QuasiJsonObjectEntry",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  function peg$parseQuasiJsonObjectEntries() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "QuasiJsonObjectEntries",
      location: peg$computeLocation(startPos, startPos, true)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseQuasiJsonObjectEntry();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c18;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseQuasiJsonObjectEntry();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$currPos;
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c18;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c54;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f623(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "QuasiJsonObjectEntries",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "QuasiJsonObjectEntries",
        location: peg$computeLocation(startPos, startPos, true)
      });
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "start",
  "cli_readline",
  "script"
];

export {
  peg$DefaultTracer as DefaultTracer,
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
